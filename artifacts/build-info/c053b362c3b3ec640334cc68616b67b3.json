{"id":"c053b362c3b3ec640334cc68616b67b3","_format":"hh-sol-build-info-1","solcVersion":"0.8.9","solcLongVersion":"0.8.9+commit.e5eed63a","input":{"language":"Solidity","sources":{"contracts/DwellaReit.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol';\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\ncontract DR is Initializable, AccessControlUpgradeable, PausableUpgradeable, ERC1155Upgradeable, ERC1155HolderUpgradeable {\n\n    /**\n     * @dev Declaration of variables.\n     * 1. `MODERATOR` - Group of addresses possessing moderator authorization for AccessControl contract\n     * 2. `ADMIN_ROLE` - Group of addresses possessing admin authorization\n     * 3. `MINTER_ROLE` - Group of addresses possessing minting authorization\n     * 4. `_legalContracts` - Mapping of Token ID to Legal Contract File Hash\n     * 5. `platform_address` - Main address for the platform owner\n     */\n    bytes32 public constant MODERATOR = keccak256(\"MODERATOR\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    mapping (string => uint256) _legalContracts;\n    address public platform_address;\n\n    /**\n     * @dev Throws if called by any account without ADMIN_ROLE access.\n     */\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"Access Denied: Caller is not the Admin\");\n        _;\n    }\n\n    /**\n     * @dev Declaration of `_tokenID` variable as unique Token ID using Counters library\n     */\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n    CountersUpgradeable.Counter internal _tokenIds;\n    uint256 public _tokenID;\n\n    /**\n     * @dev Declaring `DRToken` struct to store token details and\n     * mapping of Token ID to DRToken Struct\n     */\n    struct DRToken {\n        uint256 totalSupply;\n        address owner;\n        string valuationReport;\n        string legalContract;\n        uint256 fee;\n        uint256 rate;\n    }\n    mapping (uint256 => DRToken) drToken;\n\n     /**\n     * @dev Declaration of new Event to record created token details for DRToken\n     *\n     * @param timestamp - Time Stamp of Event\n     * @param id - Unique token ID\n     * @param totalSupply - Number of tokens for unique token ID\n     * @param owner - Asset Owner wallet address\n     * @param valuationReport - File Hash of Valuation Report\n     * @param legalContract - File Hash of Legal Contract\n     */\n    event DRTokenID(uint256 timestamp, uint256 indexed id, uint256 indexed totalSupply, address indexed owner, string valuationReport, string legalContract, uint256 rate);\n\n     /**\n     * @dev Declaration of new Event to record ERC20 token withdraw\n     *\n     * @param timestamp - Time Stamp of Event\n     * @param initiator - Wallet Address that invoked the withdrawal process\n     * @param recipient - Wallet address which received the USDT\n     * @param amount - Total amount of USDT withdrawn\n     */\n    event TokenWithdrawn(uint256 timestamp, address initiator, address recipient, uint256 amount);\n\n    /**\n     * @dev Functions for ERC1155 Token\n     * 1. __ERC1155_init - Construct the ERC1155 token with URI\n     * 2. incrementTokenId() - Increase `tokenID` by 1 before minting new token\n     */\n    function __DR_init(address _platformAddress) initializer external {\n        __ERC1155_init(\"https://token-cdn-domain/{id}.json\");\n        __DR_init_unchained(_platformAddress);\n    }\n\n    function __DR_init_unchained(address _platformAddress) initializer internal {\n        platform_address = _platformAddress;\n        _tokenID = _tokenIds.current();\n    }\n\n    function incrementTokenId() internal {\n        _tokenIds.increment();\n        _tokenID = _tokenIds.current();\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable, ERC1155Upgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Series of functions to retrieve token details from `DRToken` struct, including\n     * Total Supply, Owner, Valuation Report, Legal Contract and Service Fee.\n     *\n     * @param tokenId - Unique token id of token\n     */\n    function getTotalSupply(uint256 tokenId) external view returns (uint256) {\n        DRToken memory token = drToken[tokenId];\n        return token.totalSupply;\n    }\n\n    function getOwner(uint256 tokenId) external view returns (address) {\n        DRToken memory token = drToken[tokenId];\n        return token.owner;\n    }\n\n    function getValuationRpt(uint256 tokenId) external view returns (string memory) {\n        DRToken memory token = drToken[tokenId];\n        return token.valuationReport;\n    }\n\n    function getLegalContr(uint256 tokenId) external view returns (string memory) {\n        DRToken memory token = drToken[tokenId];\n        return token.legalContract;\n    }\n\n    function getFee(uint256 tokenId) public view returns (uint256) {\n        DRToken memory token = drToken[tokenId];\n        return token.fee;\n    }\n\n    function getRate(uint256 tokenId) public view returns (uint256) {\n        DRToken memory token = drToken[tokenId];\n        return token.rate;\n    }\n\n    /**\n     * @dev Creates `totalAmt` tokens of token type `newTokenId`, by calling ERC1155 _mint function.\n     *\n     * Can only be called by the current admin.\n     * \n     * Emits a {DRTokenID} event.\n     * Emits {TransferSingle} event via ERC1155 library.\n     *\n     * Requirements:\n     * - `legalContr` must not have been used for another token ID.\n     *\n     * @param assetOwner - Asset Owner wallet address\n     * @param totalAmt - Total number of tokens for unique token ID\n     * @param valueRpt - File Hash of Valuation Report\n     * @param legalContr - File Hash of Legal Contract\n     * @param fee - Fees to be paid to platform owner for sale proceedings\n     * @param rate - token rate for the sale\n     */\n    function mintToken(address assetOwner, uint256 totalAmt, string memory valueRpt, string memory legalContr, uint256 fee, uint256 rate) external onlyAdmin whenNotPaused {\n        require(_legalContracts[legalContr] == 0, \"This asset has already been tokenized.\");\n        require(totalAmt <= 50, 'Amounts exceeds limit');\n\n        incrementTokenId();\n        \n        uint256 newTokenId = _tokenID;\n\n        emit DRTokenID(block.timestamp, newTokenId, totalAmt, assetOwner, valueRpt, legalContr, rate);\n\n        // Creates and updates DRToken Struct of unique token ID with token details\n        DRToken storage token = drToken[_tokenID];\n        token.totalSupply = totalAmt;\n        token.owner = assetOwner;\n        token.valuationReport = valueRpt;\n        token.legalContract = legalContr;\n        token.fee = fee;\n        token.rate = rate;\n\n        _legalContracts[legalContr] = _tokenID;\n\n        _mint(platform_address, newTokenId, totalAmt, \"\");\n    }\n    \n    /**\n     * @dev Withdraws any ERC20 from Contract\n     *\n     * Can only be called by the current admin.\n     * \n     * Emits a {TokenWithdrawn} event.\n     *\n     * @param _contract - token contact address to withdraw\n     * @param _recipient - Wallet address to withdraw token to\n     * @param _amount - Amount of ERC20 token to withdraw\n     */\n    function withdrawToken(address _contract, address _recipient, uint256 _amount) external onlyAdmin {\n         IERC20 tokenContract = IERC20(_contract);\n        // transfer the token from address of Catbotica address\n        uint256 balance = tokenContract.balanceOf(address(this));\n        require(balance >= _amount, \"Amount of token withdrawn exceed balance.\");\n        \n        emit TokenWithdrawn(block.timestamp, msg.sender, _recipient, _amount);\n        \n        tokenContract.transfer(_recipient, _amount);\n    }\n\n    /**\n     * @dev Transfers `tokenAmt` tokens of token type `id` from `platform_address` to `investor`\n     * by calling ERC1155 safeTransferFrom function.\n     *\n     * Emits a {TransferSingle} event via ERC1155 library.\n     * \n     * Requirements:\n     * - `id` must be equal or less than current Token ID.\n     * - `tokenAmt` must be equal or less than balance of Proxy Contract\n     *\n     * Transfers the payable amount of ETH equivalent to amount of tokens multiplied by the token rate.\n     * \n     * Requirements:\n     * - Paid ETH amount must be equal or more than `tokenAmt` multiplied by the token rate.\n     *\n     * @param id - Token ID\n     * @param tokenAmt - Number of tokens purchased\n     */\n    function buyToken(uint256 id, uint256 tokenAmt) external payable whenNotPaused {\n        require(_tokenID >= id, \"Token ID doesn't exist.\");\n        require(balanceOf(address(this), id) >= tokenAmt, \"Number of tokens purchased exceed tokens available.\");\n\n        DRToken memory token = drToken[id];\n        \n        uint256 rate = token.rate;\n\n        require(msg.value >= tokenAmt*rate, 'Insufficient ETH');\n        \n        super.safeTransferFrom(platform_address, msg.sender, id, tokenAmt, \"0x0\");\n    }\n\n}"},"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2539],"ContextUpgradeable":[2581],"ERC165Upgradeable":[2874],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[2886],"Initializable":[580],"MathUpgradeable":[3751],"StringsUpgradeable":[2830]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"138:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2582,"src":"180:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2831,"src":"222:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2875,"src":"264:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":581,"src":"319:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1944:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1944:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2581,"src":"1959:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1959:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1979:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1979:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"2006:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2006:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"363:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,2874,2886,408,2581,580],"name":"AccessControlUpgradeable","nameLocation":"1916:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2088:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2071:16:0"},"nodeType":"ModifierInvocation","src":"2071:16:0"}],"name":"__AccessControl_init","nameLocation":"2039:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2059:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2088:0:0"},"scope":335,"src":"2030:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2169:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2152:16:0"},"nodeType":"ModifierInvocation","src":"2152:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2110:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2140:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2169:0:0"},"scope":335,"src":"2101:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2232:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2207:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2215:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2207:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2226:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2257:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2249:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2188:8:0","nodeType":"StructDefinition","scope":335,"src":"2181:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2316:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2279:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2287:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2279:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2298:8:0"},"referencedDeclaration":34,"src":"2298:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2353:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2329:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2329:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2374:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2797:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2818:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2807:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2807:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2807:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2833:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2385:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2774:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2791:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2783:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2783:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2782:14:0"},"src":"2765:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2868],"body":{"id":74,"nodeType":"Block","src":"2999:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3016:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3036:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3031:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3031:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"3031:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3016:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3102:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3078:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2868,"src":"3078:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3078:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3016:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3009:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2847:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2917:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2975:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2942:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2935:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2935:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2934:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2993:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2993:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2992:6:0"},"scope":335,"src":"2908:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3300:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3317:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3324:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3317:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3317:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3338:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3317:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3310:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3127:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3217:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3276:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3233:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3225:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3225:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3247:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3239:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3239:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3224:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3294:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3294:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3293:6:0"},"scope":335,"src":"3208:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3703:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3724:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"3730:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3730:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3713:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3713:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3713:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3359:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3656:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3675:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3667:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3667:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3666:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3703:0:0"},"scope":335,"src":"3647:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4104:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4118:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4127:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4133:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4119:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4119:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4114:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4143:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4251:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"4302:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2830_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2829,"src":"4302:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4302:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4367:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4451:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4443:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4443:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4443:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4458:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"4412:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2830_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2809,"src":"4412:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4412:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4209:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4209:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4209:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4181:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4181:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4181:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4157:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4157:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4157:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3756:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4040:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4059:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4051:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4051:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4073:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4065:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4065:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4050:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4104:0:0"},"scope":335,"src":"4031:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4796:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4813:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4820:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4813:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4813:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4806:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4538:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4722:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4769:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4743:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4735:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4735:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4734:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4787:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4787:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4786:9:0"},"scope":335,"src":"4713:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5241:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5262:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5268:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5251:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5251:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5251:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4848:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5234:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5221:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5221:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5212:8:0"},"nodeType":"ModifierInvocation","src":"5212:28:0"}],"name":"grantRole","nameLocation":"5147:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5203:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5165:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5157:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5157:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5179:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5171:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5171:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5156:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5241:0:0"},"scope":335,"src":"5138:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5667:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5689:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5695:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5677:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5677:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5677:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5289:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5660:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5647:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5647:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5638:8:0"},"nodeType":"ModifierInvocation","src":"5638:28:0"}],"name":"revokeRole","nameLocation":"5572:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5629:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5591:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5583:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5583:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5605:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5597:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5597:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5582:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5667:0:0"},"scope":335,"src":"5563:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6324:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6342:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"6353:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6353:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6342:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6367:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6334:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6334:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6334:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6440:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6446:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6428:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6428:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6428:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5716:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6256:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6315:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6277:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6269:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6269:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6291:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6283:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6283:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6268:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6324:0:0"},"scope":335,"src":"6247:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7214:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7235:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7241:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7224:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7224:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7224:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6467:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7155:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7174:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7166:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7166:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7188:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7180:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7180:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7165:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7214:0:0"},"scope":335,"src":"7146:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7454:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7472:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7464:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7464:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7505:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7492:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7492:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7464:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7520:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7527:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7520:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7520:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7545:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7520:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7520:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7586:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7592:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7611:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7569:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7569:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7564:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7262:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7390:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7412:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7404:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7404:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7426:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7418:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7418:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7403:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7454:0:0"},"scope":335,"src":"7381:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7864:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7878:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7887:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7893:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7879:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7879:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7874:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7903:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7917:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7924:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7917:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7917:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7938:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7917:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7949:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7917:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7917:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7984:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7990:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7999:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7999:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7972:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7972:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7967:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7634:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7805:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7824:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7816:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7816:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7838:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7830:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7830:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7815:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7864:0:0"},"scope":335,"src":"7796:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8269:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8291:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8297:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8283:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8283:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8279:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8307:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8321:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8328:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8321:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8321:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8342:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8321:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8353:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8321:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8321:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8389:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8395:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"8404:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8404:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8377:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8377:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8372:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8035:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8209:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8229:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8221:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8221:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8243:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8235:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8235:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8220:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8269:0:0"},"scope":335,"src":"8200:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8440:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8719:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8699:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8699:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8707:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8699:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1898:6829:0","usedErrors":[]}],"src":"113:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[2886]},"id":412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"91:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../utils/introspection/IERC165Upgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":412,"sourceUnit":2887,"src":"116:55:2","symbolAliases":[],"unitAlias":""}],"src":"91:81:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"Initializable":[580]},"id":581,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":413,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"118:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":2540,"src":"143:44:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"189:2198:3","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":580,"linearizedBaseContracts":[580],"name":"Initializable","nameLocation":"2406:13:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2426:109:3","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":418,"mutability":"mutable","name":"_initialized","nameLocation":"2554:12:3","nodeType":"VariableDeclaration","scope":580,"src":"2540:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":417,"name":"uint8","nodeType":"ElementaryTypeName","src":"2540:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2573:91:3","text":" @dev Indicates that the contract is in the process of being initialized."},"id":421,"mutability":"mutable","name":"_initializing","nameLocation":"2682:13:3","nodeType":"VariableDeclaration","scope":580,"src":"2669:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"2669:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"2702:90:3","text":" @dev Triggered when the contract has been initialized or reinitialized."},"id":426,"name":"Initialized","nameLocation":"2803:11:3","nodeType":"EventDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2821:7:3","nodeType":"VariableDeclaration","scope":426,"src":"2815:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":423,"name":"uint8","nodeType":"ElementaryTypeName","src":"2815:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2814:15:3"},"src":"2797:33:3"},{"body":{"id":481,"nodeType":"Block","src":"3263:483:3","statements":[{"assignments":[430],"declarations":[{"constant":false,"id":430,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3278:14:3","nodeType":"VariableDeclaration","scope":481,"src":"3273:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"3273:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":433,"initialValue":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3295:14:3","subExpression":{"id":431,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3296:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3273:36:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":435,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3341:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3359:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3374:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3359:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3341:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3340:36:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3381:45:3","subExpression":{"arguments":[{"arguments":[{"id":445,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3420:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}],"id":444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3412:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"3412:7:3","typeDescriptions":{}}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":441,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"3382:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2539_$","typeString":"type(library AddressUpgradeable)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"3382:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3382:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3430:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3446:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3430:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3381:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3380:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3340:108:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3462:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3319:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3319:201:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"3319:201:3"},{"expression":{"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":458,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3530:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3545:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3530:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":461,"nodeType":"ExpressionStatement","src":"3530:16:3"},{"condition":{"id":462,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3560:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"IfStatement","src":"3556:65:3","trueBody":{"id":467,"nodeType":"Block","src":"3576:45:3","statements":[{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":463,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3590:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3606:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3590:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":466,"nodeType":"ExpressionStatement","src":"3590:20:3"}]}},{"id":469,"nodeType":"PlaceholderStatement","src":"3630:1:3"},{"condition":{"id":470,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3645:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":480,"nodeType":"IfStatement","src":"3641:99:3","trueBody":{"id":479,"nodeType":"Block","src":"3661:79:3","statements":[{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":471,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3675:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3691:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3675:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"3675:21:3"},{"eventCall":{"arguments":[{"hexValue":"31","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3727:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":475,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"3715:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3715:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":478,"nodeType":"EmitStatement","src":"3710:19:3"}]}}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"2836:399:3","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":482,"name":"initializer","nameLocation":"3249:11:3","nodeType":"ModifierDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"3260:2:3"},"src":"3240:506:3","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"4857:255:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4875:14:3","subExpression":{"id":488,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4876:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4893:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":491,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4908:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4893:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4875:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4917:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4867:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4867:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"4867:99:3"},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":497,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4976:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":498,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4991:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4976:22:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":500,"nodeType":"ExpressionStatement","src":"4976:22:3"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":501,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5008:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5024:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5008:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"5008:20:3"},{"id":505,"nodeType":"PlaceholderStatement","src":"5038:1:3"},{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":506,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5049:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5065:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5049:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"ExpressionStatement","src":"5049:21:3"},{"eventCall":{"arguments":[{"id":511,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"5097:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":510,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"5085:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5085:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"EmitStatement","src":"5080:25:3"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"3752:1062:3","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":515,"name":"reinitializer","nameLocation":"4828:13:3","nodeType":"ModifierDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"version","nameLocation":"4848:7:3","nodeType":"VariableDeclaration","scope":515,"src":"4842:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":484,"name":"uint8","nodeType":"ElementaryTypeName","src":"4842:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4841:15:3"},"src":"4819:293:3","virtual":false,"visibility":"internal"},{"body":{"id":524,"nodeType":"Block","src":"5350:97:3","statements":[{"expression":{"arguments":[{"id":519,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5368:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5383:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5360:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5360:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"ExpressionStatement","src":"5360:69:3"},{"id":523,"nodeType":"PlaceholderStatement","src":"5439:1:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"5118:199:3","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":525,"name":"onlyInitializing","nameLocation":"5331:16:3","nodeType":"ModifierDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"5347:2:3"},"src":"5322:125:3","virtual":false,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"5982:230:3","statements":[{"expression":{"arguments":[{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6000:14:3","subExpression":{"id":530,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6001:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6016:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5992:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5992:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"ExpressionStatement","src":"5992:66:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6072:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6092:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":537,"name":"uint8","nodeType":"ElementaryTypeName","src":"6092:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":536,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6087:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6087:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6087:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6072:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"IfStatement","src":"6068:138:3","trueBody":{"id":558,"nodeType":"Block","src":"6104:102:3","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":542,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6118:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6138:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":544,"name":"uint8","nodeType":"ElementaryTypeName","src":"6138:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":543,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6133:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6133:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6133:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6118:30:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":549,"nodeType":"ExpressionStatement","src":"6118:30:3"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6184:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":552,"name":"uint8","nodeType":"ElementaryTypeName","src":"6184:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6179:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6179:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6179:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":550,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"6167:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6167:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"EmitStatement","src":"6162:33:3"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"5453:475:3","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5942:20:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"5962:2:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"5982:0:3"},"scope":580,"src":"5933:279:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"6389:36:3","statements":[{"expression":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6406:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":566,"id":568,"nodeType":"Return","src":"6399:19:3"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"6218:102:3","text":" @dev Internal function that returns the initialized version. Returns `_initialized`"},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6334:22:3","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6356:2:3"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"6382:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":564,"name":"uint8","nodeType":"ElementaryTypeName","src":"6382:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6381:7:3"},"scope":580,"src":"6325:100:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":578,"nodeType":"Block","src":"6595:37:3","statements":[{"expression":{"id":576,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6612:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":575,"id":577,"nodeType":"Return","src":"6605:20:3"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"6431:103:3","text":" @dev Internal function that returns the initialized version. Returns `_initializing`"},"id":579,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6548:15:3","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"6563:2:3"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":579,"src":"6589:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6589:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6588:6:3"},"scope":580,"src":"6539:93:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":581,"src":"2388:4246:3","usedErrors":[]}],"src":"118:6517:3"},"id":3},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ContextUpgradeable":[2581],"Initializable":[580],"PausableUpgradeable":[707]},"id":708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":582,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":2582,"src":"130:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":581,"src":"172:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":586,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"697:13:4"},"id":587,"nodeType":"InheritanceSpecifier","src":"697:13:4"},{"baseName":{"id":588,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2581,"src":"712:18:4"},"id":589,"nodeType":"InheritanceSpecifier","src":"712:18:4"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"216:439:4","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":707,"linearizedBaseContracts":[707,2581,580],"name":"PausableUpgradeable","nameLocation":"674:19:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"737:73:4","text":" @dev Emitted when the pause is triggered by `account`."},"id":594,"name":"Paused","nameLocation":"821:6:4","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:4","nodeType":"VariableDeclaration","scope":594,"src":"828:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:4"},"src":"815:30:4"},{"anonymous":false,"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"851:70:4","text":" @dev Emitted when the pause is lifted by `account`."},"id":599,"name":"Unpaused","nameLocation":"932:8:4","nodeType":"EventDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:4","nodeType":"VariableDeclaration","scope":599,"src":"941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:4"},"src":"926:32:4"},{"constant":false,"id":601,"mutability":"mutable","name":"_paused","nameLocation":"977:7:4","nodeType":"VariableDeclaration","scope":707,"src":"964:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":610,"nodeType":"Block","src":"1116:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":607,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1126:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1126:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"1126:27:4"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"991:67:4","text":" @dev Initializes the contract in unpaused state."},"id":611,"implemented":true,"kind":"function","modifiers":[{"id":605,"kind":"modifierInvocation","modifierName":{"id":604,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1099:16:4"},"nodeType":"ModifierInvocation","src":"1099:16:4"}],"name":"__Pausable_init","nameLocation":"1072:15:4","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1087:2:4"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1116:0:4"},"scope":707,"src":"1063:97:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"1229:32:4","statements":[{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":616,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1239:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"ExpressionStatement","src":"1239:15:4"}]},"id":621,"implemented":true,"kind":"function","modifiers":[{"id":614,"kind":"modifierInvocation","modifierName":{"id":613,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1212:16:4"},"nodeType":"ModifierInvocation","src":"1212:16:4"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1200:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"1229:0:4"},"scope":707,"src":"1166:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"1472:47:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":624,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1482:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":626,"nodeType":"ExpressionStatement","src":"1482:19:4"},{"id":627,"nodeType":"PlaceholderStatement","src":"1511:1:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"1267:175:4","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":629,"name":"whenNotPaused","nameLocation":"1456:13:4","nodeType":"ModifierDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"1469:2:4"},"src":"1447:72:4","virtual":false,"visibility":"internal"},{"body":{"id":636,"nodeType":"Block","src":"1719:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1729:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1729:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"1729:16:4"},{"id":635,"nodeType":"PlaceholderStatement","src":"1755:1:4"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"1525:167:4","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":637,"name":"whenPaused","nameLocation":"1706:10:4","nodeType":"ModifierDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"1716:2:4"},"src":"1697:66:4","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"1911:31:4","statements":[{"expression":{"id":643,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1928:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":642,"id":644,"nodeType":"Return","src":"1921:14:4"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"1769:84:4","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":646,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"1873:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"1905:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":640,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:4"},"scope":707,"src":"1858:84:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":657,"nodeType":"Block","src":"2061:55:4","statements":[{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:4","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":651,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2080:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2080:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2071:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"2071:38:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"1948:57:4","text":" @dev Throws if the contract is paused."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:4","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"2036:2:4"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2061:0:4"},"scope":707,"src":"2010:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"2236:58:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2254:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2254:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2246:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"2246:41:4"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"2122:61:4","text":" @dev Throws if the contract is not paused."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:4","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"2211:2:4"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"2236:0:4"},"scope":707,"src":"2188:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"2478:66:4","statements":[{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2488:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"ExpressionStatement","src":"2488:14:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":680,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2524:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2524:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2517:6:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"EmitStatement","src":"2512:25:4"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"2300:124:4","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":685,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":629,"src":"2464:13:4"},"nodeType":"ModifierInvocation","src":"2464:13:4"}],"name":"_pause","nameLocation":"2438:6:4","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"2444:2:4"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"2478:0:4"},"scope":707,"src":"2429:115:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":700,"nodeType":"Block","src":"2724:69:4","statements":[{"expression":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":691,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2734:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"ExpressionStatement","src":"2734:15:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":696,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2773:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2773:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":695,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"2764:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2764:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"EmitStatement","src":"2759:27:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"2550:121:4","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":701,"implemented":true,"kind":"function","modifiers":[{"id":689,"kind":"modifierInvocation","modifierName":{"id":688,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":637,"src":"2713:10:4"},"nodeType":"ModifierInvocation","src":"2713:10:4"}],"name":"_unpause","nameLocation":"2685:8:4","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"2693:2:4"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2724:0:4"},"scope":707,"src":"2676:117:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"2799:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":706,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:4","nodeType":"VariableDeclaration","scope":707,"src":"3058:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"length":{"hexValue":"3439","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":708,"src":"656:2430:4","usedErrors":[]}],"src":"105:2982:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ContextUpgradeable":[2581],"ERC1155Upgradeable":[1952],"ERC165Upgradeable":[2874],"IERC1155MetadataURIUpgradeable":[2130],"IERC1155ReceiverUpgradeable":[1993],"IERC1155Upgradeable":[2115],"IERC165Upgradeable":[2886],"Initializable":[580]},"id":1953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"./IERC1155Upgradeable.sol","id":710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":2116,"src":"139:35:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","file":"./IERC1155ReceiverUpgradeable.sol","id":711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":1994,"src":"175:43:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","file":"./extensions/IERC1155MetadataURIUpgradeable.sol","id":712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":2131,"src":"219:57:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":713,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":2540,"src":"277:44:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":714,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":2582,"src":"322:44:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../utils/introspection/ERC165Upgradeable.sol","id":715,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":2875,"src":"367:57:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":716,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1953,"sourceUnit":581,"src":"425:45:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":718,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"718:13:5"},"id":719,"nodeType":"InheritanceSpecifier","src":"718:13:5"},{"baseName":{"id":720,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2581,"src":"733:18:5"},"id":721,"nodeType":"InheritanceSpecifier","src":"733:18:5"},{"baseName":{"id":722,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"753:17:5"},"id":723,"nodeType":"InheritanceSpecifier","src":"753:17:5"},{"baseName":{"id":724,"name":"IERC1155Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"772:19:5"},"id":725,"nodeType":"InheritanceSpecifier","src":"772:19:5"},{"baseName":{"id":726,"name":"IERC1155MetadataURIUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2130,"src":"793:30:5"},"id":727,"nodeType":"InheritanceSpecifier","src":"793:30:5"}],"canonicalName":"ERC1155Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"472:214:5","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":1952,"linearizedBaseContracts":[1952,2130,2115,2874,2886,2581,580],"name":"ERC1155Upgradeable","nameLocation":"696:18:5","nodeType":"ContractDefinition","nodes":[{"id":730,"libraryName":{"id":728,"name":"AddressUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2539,"src":"836:18:5"},"nodeType":"UsingForDirective","src":"830:37:5","typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":736,"mutability":"mutable","name":"_balances","nameLocation":"978:9:5","nodeType":"VariableDeclaration","scope":1952,"src":"922:65:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":735,"keyType":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"930:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"922:47:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueType":{"id":734,"keyType":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"949:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"941:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":733,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":742,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1097:18:5","nodeType":"VariableDeclaration","scope":1952,"src":"1044:71:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":741,"keyType":{"id":737,"name":"address","nodeType":"ElementaryTypeName","src":"1052:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1044:44:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":740,"keyType":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"1071:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1063:24:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":739,"name":"bool","nodeType":"ElementaryTypeName","src":"1082:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":744,"mutability":"mutable","name":"_uri","nameLocation":"1251:4:5","nodeType":"VariableDeclaration","scope":1952,"src":"1236:19:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":743,"name":"string","nodeType":"ElementaryTypeName","src":"1236:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":756,"nodeType":"Block","src":"1375:47:5","statements":[{"expression":{"arguments":[{"id":753,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1410:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":752,"name":"__ERC1155_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"1385:24:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1385:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"ExpressionStatement","src":"1385:30:5"}]},"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"1262:38:5","text":" @dev See {_setURI}."},"id":757,"implemented":true,"kind":"function","modifiers":[{"id":750,"kind":"modifierInvocation","modifierName":{"id":749,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1358:16:5"},"nodeType":"ModifierInvocation","src":"1358:16:5"}],"name":"__ERC1155_init","nameLocation":"1314:14:5","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"uri_","nameLocation":"1343:4:5","nodeType":"VariableDeclaration","scope":757,"src":"1329:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":746,"name":"string","nodeType":"ElementaryTypeName","src":"1329:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1328:20:5"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[],"src":"1375:0:5"},"scope":1952,"src":"1305:117:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"1508:30:5","statements":[{"expression":{"arguments":[{"id":765,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"1526:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":764,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"1518:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1518:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"1518:13:5"}]},"id":769,"implemented":true,"kind":"function","modifiers":[{"id":762,"kind":"modifierInvocation","modifierName":{"id":761,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1491:16:5"},"nodeType":"ModifierInvocation","src":"1491:16:5"}],"name":"__ERC1155_init_unchained","nameLocation":"1437:24:5","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":759,"mutability":"mutable","name":"uri_","nameLocation":"1476:4:5","nodeType":"VariableDeclaration","scope":769,"src":"1462:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":758,"name":"string","nodeType":"ElementaryTypeName","src":"1462:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1461:20:5"},"returnParameters":{"id":763,"nodeType":"ParameterList","parameters":[],"src":"1508:0:5"},"scope":1952,"src":"1428:110:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2868,2885],"body":{"id":799,"nodeType":"Block","src":"1735:219:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":780,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"1764:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":782,"name":"IERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1784:19:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2115_$","typeString":"type(contract IERC1155Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Upgradeable_$2115_$","typeString":"type(contract IERC1155Upgradeable)"}],"id":781,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1779:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1779:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Upgradeable_$2115","typeString":"type(contract IERC1155Upgradeable)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1779:37:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1764:52:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":786,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"1832:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":788,"name":"IERC1155MetadataURIUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"1852:30:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2130_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURIUpgradeable_$2130_$","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}],"id":787,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1847:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1847:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURIUpgradeable_$2130","typeString":"type(contract IERC1155MetadataURIUpgradeable)"}},"id":790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1847:48:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1832:63:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1764:131:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":795,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"1935:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":793,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1911:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155Upgradeable_$1952_$","typeString":"type(contract super ERC1155Upgradeable)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2868,"src":"1911:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1911:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1764:183:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":779,"id":798,"nodeType":"Return","src":"1745:202:5"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"1544:56:5","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":800,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1614:17:5","nodeType":"FunctionDefinition","overrides":{"id":776,"nodeType":"OverrideSpecifier","overrides":[{"id":774,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"1681:17:5"},{"id":775,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"1700:18:5"}],"src":"1672:47:5"},"parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"interfaceId","nameLocation":"1639:11:5","nodeType":"VariableDeclaration","scope":800,"src":"1632:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":771,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1632:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1631:20:5"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":800,"src":"1729:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":777,"name":"bool","nodeType":"ElementaryTypeName","src":"1729:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1728:6:5"},"scope":1952,"src":"1605:349:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2129],"body":{"id":811,"nodeType":"Block","src":"2428:28:5","statements":[{"expression":{"id":809,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"2445:4:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":808,"id":810,"nodeType":"Return","src":"2438:11:5"}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"1960:388:5","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":812,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"2362:3:5","nodeType":"FunctionDefinition","overrides":{"id":805,"nodeType":"OverrideSpecifier","overrides":[],"src":"2395:8:5"},"parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":812,"src":"2366:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"2366:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2365:9:5"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":812,"src":"2413:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":806,"name":"string","nodeType":"ElementaryTypeName","src":"2413:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2412:15:5"},"scope":1952,"src":"2353:103:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2053],"body":{"id":839,"nodeType":"Block","src":"2693:132:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"2711:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2730:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2722:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"2722:7:5","typeDescriptions":{}}},"id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2722:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2711:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2734:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":823,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2703:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2703:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"2703:76:5"},{"expression":{"baseExpression":{"baseExpression":{"id":833,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2796:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":835,"indexExpression":{"id":834,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"2806:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2796:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":837,"indexExpression":{"id":836,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"2810:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2796:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":822,"id":838,"nodeType":"Return","src":"2789:29:5"}]},"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"2462:131:5","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":840,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2607:9:5","nodeType":"FunctionDefinition","overrides":{"id":819,"nodeType":"OverrideSpecifier","overrides":[],"src":"2666:8:5"},"parameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"account","nameLocation":"2625:7:5","nodeType":"VariableDeclaration","scope":840,"src":"2617:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":814,"name":"address","nodeType":"ElementaryTypeName","src":"2617:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"id","nameLocation":"2642:2:5","nodeType":"VariableDeclaration","scope":840,"src":"2634:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"2634:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2616:29:5"},"returnParameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":840,"src":"2684:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"2684:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2683:9:5"},"scope":1952,"src":"2598:227:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2066],"body":{"id":903,"nodeType":"Block","src":"3155:335:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":855,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3173:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3173:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":857,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3192:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3192:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3173:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3204:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3165:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3165:83:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":862,"nodeType":"ExpressionStatement","src":"3165:83:5"},{"assignments":[867],"declarations":[{"constant":false,"id":867,"mutability":"mutable","name":"batchBalances","nameLocation":"3276:13:5","nodeType":"VariableDeclaration","scope":903,"src":"3259:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":865,"name":"uint256","nodeType":"ElementaryTypeName","src":"3259:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":866,"nodeType":"ArrayTypeName","src":"3259:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":874,"initialValue":{"arguments":[{"expression":{"id":871,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3306:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3306:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3292:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":868,"name":"uint256","nodeType":"ElementaryTypeName","src":"3296:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":869,"nodeType":"ArrayTypeName","src":"3296:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3292:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3259:63:5"},{"body":{"id":899,"nodeType":"Block","src":"3379:74:5","statements":[{"expression":{"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":886,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"3393:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":888,"indexExpression":{"id":887,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3407:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3393:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":890,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3422:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":892,"indexExpression":{"id":891,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3431:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3422:11:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":893,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3435:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":895,"indexExpression":{"id":894,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3439:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3435:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":889,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"3412:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3393:49:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":898,"nodeType":"ExpressionStatement","src":"3393:49:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":879,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3353:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":880,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"3357:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3357:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3353:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":900,"initializationExpression":{"assignments":[876],"declarations":[{"constant":false,"id":876,"mutability":"mutable","name":"i","nameLocation":"3346:1:5","nodeType":"VariableDeclaration","scope":900,"src":"3338:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":875,"name":"uint256","nodeType":"ElementaryTypeName","src":"3338:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":878,"initialValue":{"hexValue":"30","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3350:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3338:13:5"},"loopExpression":{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3374:3:5","subExpression":{"id":883,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3376:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":885,"nodeType":"ExpressionStatement","src":"3374:3:5"},"nodeType":"ForStatement","src":"3333:120:5"},{"expression":{"id":901,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"3470:13:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":853,"id":902,"nodeType":"Return","src":"3463:20:5"}]},"documentation":{"id":841,"nodeType":"StructuredDocumentation","src":"2831:146:5","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":904,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2991:14:5","nodeType":"FunctionDefinition","overrides":{"id":849,"nodeType":"OverrideSpecifier","overrides":[],"src":"3107:8:5"},"parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"accounts","nameLocation":"3023:8:5","nodeType":"VariableDeclaration","scope":904,"src":"3006:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"3006:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":843,"nodeType":"ArrayTypeName","src":"3006:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"ids","nameLocation":"3050:3:5","nodeType":"VariableDeclaration","scope":904,"src":"3033:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":845,"name":"uint256","nodeType":"ElementaryTypeName","src":"3033:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":846,"nodeType":"ArrayTypeName","src":"3033:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3005:49:5"},"returnParameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":904,"src":"3133:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":851,"nodeType":"ArrayTypeName","src":"3133:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3132:18:5"},"scope":1952,"src":"2982:508:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2074],"body":{"id":920,"nodeType":"Block","src":"3642:69:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":914,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"3671:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3671:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"3685:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"3695:8:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":913,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"3652:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3652:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"ExpressionStatement","src":"3652:52:5"}]},"documentation":{"id":905,"nodeType":"StructuredDocumentation","src":"3496:57:5","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":921,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3567:17:5","nodeType":"FunctionDefinition","overrides":{"id":911,"nodeType":"OverrideSpecifier","overrides":[],"src":"3633:8:5"},"parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"operator","nameLocation":"3593:8:5","nodeType":"VariableDeclaration","scope":921,"src":"3585:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"3585:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"approved","nameLocation":"3608:8:5","nodeType":"VariableDeclaration","scope":921,"src":"3603:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":908,"name":"bool","nodeType":"ElementaryTypeName","src":"3603:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3584:33:5"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[],"src":"3642:0:5"},"scope":1952,"src":"3558:153:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2084],"body":{"id":938,"nodeType":"Block","src":"3883:61:5","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":932,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"3900:18:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":934,"indexExpression":{"id":933,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"3919:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3900:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":936,"indexExpression":{"id":935,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3928:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3900:37:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":931,"id":937,"nodeType":"Return","src":"3893:44:5"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"3717:56:5","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":939,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3787:16:5","nodeType":"FunctionDefinition","overrides":{"id":928,"nodeType":"OverrideSpecifier","overrides":[],"src":"3859:8:5"},"parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"account","nameLocation":"3812:7:5","nodeType":"VariableDeclaration","scope":939,"src":"3804:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"3804:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"operator","nameLocation":"3829:8:5","nodeType":"VariableDeclaration","scope":939,"src":"3821:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"3821:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3803:35:5"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":939,"src":"3877:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":929,"name":"bool","nodeType":"ElementaryTypeName","src":"3877:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3876:6:5"},"scope":1952,"src":"3778:166:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2098],"body":{"id":976,"nodeType":"Block","src":"4180:225:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":955,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"4211:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"4219:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4219:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4211:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":960,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"4252:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":961,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"4258:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4258:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":959,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"4235:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4235:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4211:60:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4285:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4190:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4190:153:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"4190:153:5"},{"expression":{"arguments":[{"id":969,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"4371:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":970,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"4377:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"4381:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":972,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"4385:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":973,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"4393:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":968,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"4353:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4353:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":975,"nodeType":"ExpressionStatement","src":"4353:45:5"}]},"documentation":{"id":940,"nodeType":"StructuredDocumentation","src":"3950:56:5","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":977,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4020:16:5","nodeType":"FunctionDefinition","overrides":{"id":952,"nodeType":"OverrideSpecifier","overrides":[],"src":"4171:8:5"},"parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"from","nameLocation":"4054:4:5","nodeType":"VariableDeclaration","scope":977,"src":"4046:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"4046:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"to","nameLocation":"4076:2:5","nodeType":"VariableDeclaration","scope":977,"src":"4068:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":946,"mutability":"mutable","name":"id","nameLocation":"4096:2:5","nodeType":"VariableDeclaration","scope":977,"src":"4088:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"4088:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"amount","nameLocation":"4116:6:5","nodeType":"VariableDeclaration","scope":977,"src":"4108:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"4108:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"data","nameLocation":"4145:4:5","nodeType":"VariableDeclaration","scope":977,"src":"4132:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":949,"name":"bytes","nodeType":"ElementaryTypeName","src":"4132:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4036:119:5"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[],"src":"4180:0:5"},"scope":1952,"src":"4011:394:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2114],"body":{"id":1016,"nodeType":"Block","src":"4671:232:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":995,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"4702:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":996,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"4710:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4710:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4702:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1000,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"4743:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1001,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"4749:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4749:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":999,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"4726:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4726:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4702:60:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4776:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":994,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4681:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4681:153:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"4681:153:5"},{"expression":{"arguments":[{"id":1009,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"4867:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1010,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"4873:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1011,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"4877:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1012,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"4882:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1013,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"4891:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1008,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"4844:22:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4844:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1015,"nodeType":"ExpressionStatement","src":"4844:52:5"}]},"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"4411:61:5","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":1017,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4486:21:5","nodeType":"FunctionDefinition","overrides":{"id":992,"nodeType":"OverrideSpecifier","overrides":[],"src":"4662:8:5"},"parameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"mutability":"mutable","name":"from","nameLocation":"4525:4:5","nodeType":"VariableDeclaration","scope":1017,"src":"4517:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":979,"name":"address","nodeType":"ElementaryTypeName","src":"4517:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":982,"mutability":"mutable","name":"to","nameLocation":"4547:2:5","nodeType":"VariableDeclaration","scope":1017,"src":"4539:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":981,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"ids","nameLocation":"4576:3:5","nodeType":"VariableDeclaration","scope":1017,"src":"4559:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":983,"name":"uint256","nodeType":"ElementaryTypeName","src":"4559:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":984,"nodeType":"ArrayTypeName","src":"4559:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"amounts","nameLocation":"4606:7:5","nodeType":"VariableDeclaration","scope":1017,"src":"4589:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"4589:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":987,"nodeType":"ArrayTypeName","src":"4589:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":990,"mutability":"mutable","name":"data","nameLocation":"4636:4:5","nodeType":"VariableDeclaration","scope":1017,"src":"4623:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":989,"name":"bytes","nodeType":"ElementaryTypeName","src":"4623:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4507:139:5"},"returnParameters":{"id":993,"nodeType":"ParameterList","parameters":[],"src":"4671:0:5"},"scope":1952,"src":"4477:426:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1133,"nodeType":"Block","src":"5516:784:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1032,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"5534:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5548:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5540:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"5540:7:5","typeDescriptions":{}}},"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5540:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5534:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5552:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1031,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5526:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5526:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1040,"nodeType":"ExpressionStatement","src":"5526:66:5"},{"assignments":[1042],"declarations":[{"constant":false,"id":1042,"mutability":"mutable","name":"operator","nameLocation":"5611:8:5","nodeType":"VariableDeclaration","scope":1133,"src":"5603:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"5603:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1045,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1043,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"5622:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5622:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5603:31:5"},{"assignments":[1050],"declarations":[{"constant":false,"id":1050,"mutability":"mutable","name":"ids","nameLocation":"5661:3:5","nodeType":"VariableDeclaration","scope":1133,"src":"5644:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1048,"name":"uint256","nodeType":"ElementaryTypeName","src":"5644:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1049,"nodeType":"ArrayTypeName","src":"5644:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1054,"initialValue":{"arguments":[{"id":1052,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"5685:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1051,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5667:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5667:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5644:44:5"},{"assignments":[1059],"declarations":[{"constant":false,"id":1059,"mutability":"mutable","name":"amounts","nameLocation":"5715:7:5","nodeType":"VariableDeclaration","scope":1133,"src":"5698:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"5698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1058,"nodeType":"ArrayTypeName","src":"5698:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1063,"initialValue":{"arguments":[{"id":1061,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"5743:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1060,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5725:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5725:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5698:52:5"},{"expression":{"arguments":[{"id":1065,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"5782:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1066,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"5792:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1067,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"5798:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1068,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"5802:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1069,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"5807:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1070,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"5816:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1064,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"5761:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5761:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"5761:60:5"},{"assignments":[1074],"declarations":[{"constant":false,"id":1074,"mutability":"mutable","name":"fromBalance","nameLocation":"5840:11:5","nodeType":"VariableDeclaration","scope":1133,"src":"5832:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1073,"name":"uint256","nodeType":"ElementaryTypeName","src":"5832:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1080,"initialValue":{"baseExpression":{"baseExpression":{"id":1075,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5854:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1077,"indexExpression":{"id":1076,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"5864:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5854:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1079,"indexExpression":{"id":1078,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"5868:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5854:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5832:41:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1082,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"5891:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1083,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"5906:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5891:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5914:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1081,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5883:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5883:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"ExpressionStatement","src":"5883:76:5"},{"id":1098,"nodeType":"UncheckedBlock","src":"5969:77:5","statements":[{"expression":{"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1088,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5993:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1091,"indexExpression":{"id":1089,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"6003:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5993:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1092,"indexExpression":{"id":1090,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"6007:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5993:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1093,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"6015:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1094,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"6029:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6015:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5993:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1097,"nodeType":"ExpressionStatement","src":"5993:42:5"}]},{"expression":{"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1099,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"6055:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1102,"indexExpression":{"id":1100,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"6065:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6055:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1103,"indexExpression":{"id":1101,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"6069:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6055:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1104,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"6076:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6055:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1106,"nodeType":"ExpressionStatement","src":"6055:27:5"},{"eventCall":{"arguments":[{"id":1108,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"6113:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1109,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"6123:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1110,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"6129:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1111,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"6133:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1112,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"6137:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1107,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"6098:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6098:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1114,"nodeType":"EmitStatement","src":"6093:51:5"},{"expression":{"arguments":[{"id":1116,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"6175:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"6185:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1118,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"6191:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1119,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6195:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1120,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6200:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1121,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"6209:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1115,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"6155:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6155:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1123,"nodeType":"ExpressionStatement","src":"6155:59:5"},{"expression":{"arguments":[{"id":1125,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"6256:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1126,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"6266:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1127,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"6272:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1128,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"6276:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1129,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"6280:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1130,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"6288:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1124,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"6225:30:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6225:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1132,"nodeType":"ExpressionStatement","src":"6225:68:5"}]},"documentation":{"id":1018,"nodeType":"StructuredDocumentation","src":"4909:439:5","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1134,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"5362:17:5","nodeType":"FunctionDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1020,"mutability":"mutable","name":"from","nameLocation":"5397:4:5","nodeType":"VariableDeclaration","scope":1134,"src":"5389:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1019,"name":"address","nodeType":"ElementaryTypeName","src":"5389:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1022,"mutability":"mutable","name":"to","nameLocation":"5419:2:5","nodeType":"VariableDeclaration","scope":1134,"src":"5411:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1021,"name":"address","nodeType":"ElementaryTypeName","src":"5411:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"id","nameLocation":"5439:2:5","nodeType":"VariableDeclaration","scope":1134,"src":"5431:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint256","nodeType":"ElementaryTypeName","src":"5431:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"amount","nameLocation":"5459:6:5","nodeType":"VariableDeclaration","scope":1134,"src":"5451:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"5451:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"data","nameLocation":"5488:4:5","nodeType":"VariableDeclaration","scope":1134,"src":"5475:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"5475:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5379:119:5"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"5516:0:5"},"scope":1952,"src":"5353:947:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1268,"nodeType":"Block","src":"6834:927:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1151,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"6852:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6852:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1153,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"6866:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6866:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6852:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6882:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1150,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6844:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6844:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1158,"nodeType":"ExpressionStatement","src":"6844:81:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1160,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"6943:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6957:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6949:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1161,"name":"address","nodeType":"ElementaryTypeName","src":"6949:7:5","typeDescriptions":{}}},"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6949:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6943:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6961:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":1159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6935:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6935:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1168,"nodeType":"ExpressionStatement","src":"6935:66:5"},{"assignments":[1170],"declarations":[{"constant":false,"id":1170,"mutability":"mutable","name":"operator","nameLocation":"7020:8:5","nodeType":"VariableDeclaration","scope":1268,"src":"7012:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"7012:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1173,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1171,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7031:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7031:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7012:31:5"},{"expression":{"arguments":[{"id":1175,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7075:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1176,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7085:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1177,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7091:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1178,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7095:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1179,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7100:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1180,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"7109:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1174,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"7054:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7054:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1182,"nodeType":"ExpressionStatement","src":"7054:60:5"},{"body":{"id":1240,"nodeType":"Block","src":"7166:370:5","statements":[{"assignments":[1195],"declarations":[{"constant":false,"id":1195,"mutability":"mutable","name":"id","nameLocation":"7188:2:5","nodeType":"VariableDeclaration","scope":1240,"src":"7180:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint256","nodeType":"ElementaryTypeName","src":"7180:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1199,"initialValue":{"baseExpression":{"id":1196,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7193:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1198,"indexExpression":{"id":1197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"7197:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7193:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7180:19:5"},{"assignments":[1201],"declarations":[{"constant":false,"id":1201,"mutability":"mutable","name":"amount","nameLocation":"7221:6:5","nodeType":"VariableDeclaration","scope":1240,"src":"7213:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"7213:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1205,"initialValue":{"baseExpression":{"id":1202,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7230:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1204,"indexExpression":{"id":1203,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"7238:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7230:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7213:27:5"},{"assignments":[1207],"declarations":[{"constant":false,"id":1207,"mutability":"mutable","name":"fromBalance","nameLocation":"7263:11:5","nodeType":"VariableDeclaration","scope":1240,"src":"7255:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1213,"initialValue":{"baseExpression":{"baseExpression":{"id":1208,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"7277:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1210,"indexExpression":{"id":1209,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7287:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7277:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1212,"indexExpression":{"id":1211,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7291:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7277:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7255:41:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1215,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"7318:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1216,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"7333:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7318:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7341:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":1214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7310:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7310:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1220,"nodeType":"ExpressionStatement","src":"7310:76:5"},{"id":1231,"nodeType":"UncheckedBlock","src":"7400:85:5","statements":[{"expression":{"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1221,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"7428:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1224,"indexExpression":{"id":1222,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7438:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7428:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1225,"indexExpression":{"id":1223,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7442:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7428:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"7450:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1227,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"7464:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7450:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7428:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1230,"nodeType":"ExpressionStatement","src":"7428:42:5"}]},{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1232,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"7498:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1235,"indexExpression":{"id":1233,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"7508:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7498:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1236,"indexExpression":{"id":1234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7512:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7498:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1237,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"7519:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7498:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"nodeType":"ExpressionStatement","src":"7498:27:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"7145:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1188,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7149:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7149:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7145:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1241,"initializationExpression":{"assignments":[1184],"declarations":[{"constant":false,"id":1184,"mutability":"mutable","name":"i","nameLocation":"7138:1:5","nodeType":"VariableDeclaration","scope":1241,"src":"7130:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"7130:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1186,"initialValue":{"hexValue":"30","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7142:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7130:13:5"},"loopExpression":{"expression":{"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7161:3:5","subExpression":{"id":1191,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"7163:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1193,"nodeType":"ExpressionStatement","src":"7161:3:5"},"nodeType":"ForStatement","src":"7125:411:5"},{"eventCall":{"arguments":[{"id":1243,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7565:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1244,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7575:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1245,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7581:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1246,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7585:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1247,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7590:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1242,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"7551:13:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7551:47:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1249,"nodeType":"EmitStatement","src":"7546:52:5"},{"expression":{"arguments":[{"id":1251,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7629:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1252,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7639:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1253,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7645:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1254,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7649:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1255,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7654:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1256,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"7663:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1250,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"7609:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7609:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1258,"nodeType":"ExpressionStatement","src":"7609:59:5"},{"expression":{"arguments":[{"id":1260,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7715:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1261,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7725:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1262,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7731:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1263,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"7735:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1264,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7740:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1265,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"7749:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1259,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"7679:35:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7679:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1267,"nodeType":"ExpressionStatement","src":"7679:75:5"}]},"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"6306:335:5","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1269,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6655:22:5","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"from","nameLocation":"6695:4:5","nodeType":"VariableDeclaration","scope":1269,"src":"6687:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1136,"name":"address","nodeType":"ElementaryTypeName","src":"6687:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"to","nameLocation":"6717:2:5","nodeType":"VariableDeclaration","scope":1269,"src":"6709:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"6709:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"ids","nameLocation":"6746:3:5","nodeType":"VariableDeclaration","scope":1269,"src":"6729:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"6729:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1141,"nodeType":"ArrayTypeName","src":"6729:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"amounts","nameLocation":"6776:7:5","nodeType":"VariableDeclaration","scope":1269,"src":"6759:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"6759:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1144,"nodeType":"ArrayTypeName","src":"6759:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"data","nameLocation":"6806:4:5","nodeType":"VariableDeclaration","scope":1269,"src":"6793:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1146,"name":"bytes","nodeType":"ElementaryTypeName","src":"6793:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6677:139:5"},"returnParameters":{"id":1149,"nodeType":"ParameterList","parameters":[],"src":"6834:0:5"},"scope":1952,"src":"6646:1115:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1279,"nodeType":"Block","src":"8640:30:5","statements":[{"expression":{"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1275,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"8650:4:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1276,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"8657:6:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8650:13:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1278,"nodeType":"ExpressionStatement","src":"8650:13:5"}]},"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"7767:812:5","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":1280,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8593:7:5","nodeType":"FunctionDefinition","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"newuri","nameLocation":"8615:6:5","nodeType":"VariableDeclaration","scope":1280,"src":"8601:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1271,"name":"string","nodeType":"ElementaryTypeName","src":"8601:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8600:22:5"},"returnParameters":{"id":1274,"nodeType":"ParameterList","parameters":[],"src":"8640:0:5"},"scope":1952,"src":"8584:86:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1380,"nodeType":"Block","src":"9172:580:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1293,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9190:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9204:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9196:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"9196:7:5","typeDescriptions":{}}},"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9196:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9190:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9208:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1292,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9182:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9182:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1301,"nodeType":"ExpressionStatement","src":"9182:62:5"},{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"operator","nameLocation":"9263:8:5","nodeType":"VariableDeclaration","scope":1380,"src":"9255:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"9255:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1306,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1304,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"9274:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9274:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9255:31:5"},{"assignments":[1311],"declarations":[{"constant":false,"id":1311,"mutability":"mutable","name":"ids","nameLocation":"9313:3:5","nodeType":"VariableDeclaration","scope":1380,"src":"9296:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"9296:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1310,"nodeType":"ArrayTypeName","src":"9296:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1315,"initialValue":{"arguments":[{"id":1313,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"9337:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1312,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"9319:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9319:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9296:44:5"},{"assignments":[1320],"declarations":[{"constant":false,"id":1320,"mutability":"mutable","name":"amounts","nameLocation":"9367:7:5","nodeType":"VariableDeclaration","scope":1380,"src":"9350:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1318,"name":"uint256","nodeType":"ElementaryTypeName","src":"9350:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1319,"nodeType":"ArrayTypeName","src":"9350:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1324,"initialValue":{"arguments":[{"id":1322,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"9395:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1321,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"9377:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9377:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9350:52:5"},{"expression":{"arguments":[{"id":1326,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9434:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9452:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9444:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"9444:7:5","typeDescriptions":{}}},"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9444:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1331,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9456:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1332,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"9460:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1333,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"9465:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1334,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"9474:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1325,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"9413:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9413:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1336,"nodeType":"ExpressionStatement","src":"9413:66:5"},{"expression":{"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1337,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"9490:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1340,"indexExpression":{"id":1338,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"9500:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9490:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1341,"indexExpression":{"id":1339,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9504:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9490:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1342,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"9511:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9490:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1344,"nodeType":"ExpressionStatement","src":"9490:27:5"},{"eventCall":{"arguments":[{"id":1346,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9547:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9565:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9557:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"9557:7:5","typeDescriptions":{}}},"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9557:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1351,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9569:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1352,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"9573:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"9577:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1345,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9532:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9532:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1355,"nodeType":"EmitStatement","src":"9527:57:5"},{"expression":{"arguments":[{"id":1357,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9615:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9633:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9625:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1358,"name":"address","nodeType":"ElementaryTypeName","src":"9625:7:5","typeDescriptions":{}}},"id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9625:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1362,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9637:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"9641:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1364,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"9646:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1365,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"9655:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1356,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"9595:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9595:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1367,"nodeType":"ExpressionStatement","src":"9595:65:5"},{"expression":{"arguments":[{"id":1369,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"9702:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9720:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9712:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"9712:7:5","typeDescriptions":{}}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9712:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1374,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"9724:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1375,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"9728:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1376,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"9732:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1377,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"9740:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1368,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"9671:30:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9671:74:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1379,"nodeType":"ExpressionStatement","src":"9671:74:5"}]},"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"8676:362:5","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1381,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9052:5:5","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"to","nameLocation":"9075:2:5","nodeType":"VariableDeclaration","scope":1381,"src":"9067:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"id","nameLocation":"9095:2:5","nodeType":"VariableDeclaration","scope":1381,"src":"9087:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"9087:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"amount","nameLocation":"9115:6:5","nodeType":"VariableDeclaration","scope":1381,"src":"9107:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"9107:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"data","nameLocation":"9144:4:5","nodeType":"VariableDeclaration","scope":1381,"src":"9131:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1288,"name":"bytes","nodeType":"ElementaryTypeName","src":"9131:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9057:97:5"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"9172:0:5"},"scope":1952,"src":"9043:709:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1491,"nodeType":"Block","src":"10296:637:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1396,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10314:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10328:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10320:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1397,"name":"address","nodeType":"ElementaryTypeName","src":"10320:7:5","typeDescriptions":{}}},"id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10320:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10314:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10332:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1395,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10306:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10306:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1404,"nodeType":"ExpressionStatement","src":"10306:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1406,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10386:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10386:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1408,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10400:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10400:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10386:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10416:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10378:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10378:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1413,"nodeType":"ExpressionStatement","src":"10378:81:5"},{"assignments":[1415],"declarations":[{"constant":false,"id":1415,"mutability":"mutable","name":"operator","nameLocation":"10478:8:5","nodeType":"VariableDeclaration","scope":1491,"src":"10470:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"10470:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1418,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1416,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"10489:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10489:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10470:31:5"},{"expression":{"arguments":[{"id":1420,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"10533:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10543:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1421,"name":"address","nodeType":"ElementaryTypeName","src":"10543:7:5","typeDescriptions":{}}},"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10543:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1425,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10555:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1426,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10559:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1427,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10564:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1428,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"10573:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1419,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"10512:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10512:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1430,"nodeType":"ExpressionStatement","src":"10512:66:5"},{"body":{"id":1454,"nodeType":"Block","src":"10630:60:5","statements":[{"expression":{"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1442,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"10644:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1447,"indexExpression":{"baseExpression":{"id":1443,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10654:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1445,"indexExpression":{"id":1444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"10658:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10654:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10644:17:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1448,"indexExpression":{"id":1446,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10662:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10644:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":1449,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10669:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1451,"indexExpression":{"id":1450,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"10677:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10669:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10644:35:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1453,"nodeType":"ExpressionStatement","src":"10644:35:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1435,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"10609:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1436,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10613:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10613:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10609:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1455,"initializationExpression":{"assignments":[1432],"declarations":[{"constant":false,"id":1432,"mutability":"mutable","name":"i","nameLocation":"10602:1:5","nodeType":"VariableDeclaration","scope":1455,"src":"10594:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"10594:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1434,"initialValue":{"hexValue":"30","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10606:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10594:13:5"},"loopExpression":{"expression":{"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10625:3:5","subExpression":{"id":1439,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"10625:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1441,"nodeType":"ExpressionStatement","src":"10625:3:5"},"nodeType":"ForStatement","src":"10589:101:5"},{"eventCall":{"arguments":[{"id":1457,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"10719:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10729:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"10729:7:5","typeDescriptions":{}}},"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10729:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10741:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10745:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1464,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10750:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1456,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"10705:13:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10705:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1466,"nodeType":"EmitStatement","src":"10700:58:5"},{"expression":{"arguments":[{"id":1468,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"10789:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10807:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10799:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"10799:7:5","typeDescriptions":{}}},"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10799:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1473,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10811:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1474,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10815:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1475,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10820:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1476,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"10829:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1467,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"10769:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10769:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1478,"nodeType":"ExpressionStatement","src":"10769:65:5"},{"expression":{"arguments":[{"id":1480,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"10881:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10891:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"10891:7:5","typeDescriptions":{}}},"id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10891:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1485,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"10903:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"10907:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1487,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"10912:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1488,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"10921:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1479,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"10845:35:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10845:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1490,"nodeType":"ExpressionStatement","src":"10845:81:5"}]},"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"9758:379:5","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1492,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"10151:10:5","nodeType":"FunctionDefinition","parameters":{"id":1393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"to","nameLocation":"10179:2:5","nodeType":"VariableDeclaration","scope":1492,"src":"10171:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"10171:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"ids","nameLocation":"10208:3:5","nodeType":"VariableDeclaration","scope":1492,"src":"10191:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"10191:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1386,"nodeType":"ArrayTypeName","src":"10191:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1390,"mutability":"mutable","name":"amounts","nameLocation":"10238:7:5","nodeType":"VariableDeclaration","scope":1492,"src":"10221:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"10221:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1389,"nodeType":"ArrayTypeName","src":"10221:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1392,"mutability":"mutable","name":"data","nameLocation":"10268:4:5","nodeType":"VariableDeclaration","scope":1492,"src":"10255:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1391,"name":"bytes","nodeType":"ElementaryTypeName","src":"10255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10161:117:5"},"returnParameters":{"id":1394,"nodeType":"ParameterList","parameters":[],"src":"10296:0:5"},"scope":1952,"src":"10142:791:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1596,"nodeType":"Block","src":"11323:682:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1503,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11341:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11357:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11349:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1504,"name":"address","nodeType":"ElementaryTypeName","src":"11349:7:5","typeDescriptions":{}}},"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11349:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11341:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11361:37:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11333:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11333:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1511,"nodeType":"ExpressionStatement","src":"11333:66:5"},{"assignments":[1513],"declarations":[{"constant":false,"id":1513,"mutability":"mutable","name":"operator","nameLocation":"11418:8:5","nodeType":"VariableDeclaration","scope":1596,"src":"11410:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"11410:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1516,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1514,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"11429:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11429:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11410:31:5"},{"assignments":[1521],"declarations":[{"constant":false,"id":1521,"mutability":"mutable","name":"ids","nameLocation":"11468:3:5","nodeType":"VariableDeclaration","scope":1596,"src":"11451:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"11451:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1520,"nodeType":"ArrayTypeName","src":"11451:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1525,"initialValue":{"arguments":[{"id":1523,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"11492:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1522,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"11474:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11474:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11451:44:5"},{"assignments":[1530],"declarations":[{"constant":false,"id":1530,"mutability":"mutable","name":"amounts","nameLocation":"11522:7:5","nodeType":"VariableDeclaration","scope":1596,"src":"11505:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1528,"name":"uint256","nodeType":"ElementaryTypeName","src":"11505:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1529,"nodeType":"ArrayTypeName","src":"11505:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1534,"initialValue":{"arguments":[{"id":1532,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"11550:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1531,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"11532:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11532:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11505:52:5"},{"expression":{"arguments":[{"id":1536,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"11589:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1537,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11599:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11613:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11605:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"11605:7:5","typeDescriptions":{}}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11605:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1542,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"11617:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1543,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"11622:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11631:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1535,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"11568:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11568:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1546,"nodeType":"ExpressionStatement","src":"11568:66:5"},{"assignments":[1548],"declarations":[{"constant":false,"id":1548,"mutability":"mutable","name":"fromBalance","nameLocation":"11653:11:5","nodeType":"VariableDeclaration","scope":1596,"src":"11645:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"11645:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1554,"initialValue":{"baseExpression":{"baseExpression":{"id":1549,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"11667:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1551,"indexExpression":{"id":1550,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"11677:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11667:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1553,"indexExpression":{"id":1552,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11681:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11667:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11645:41:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1556,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"11704:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1557,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"11719:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11704:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11727:38:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1555,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11696:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11696:70:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1561,"nodeType":"ExpressionStatement","src":"11696:70:5"},{"id":1572,"nodeType":"UncheckedBlock","src":"11776:77:5","statements":[{"expression":{"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1562,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"11800:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1565,"indexExpression":{"id":1563,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"11810:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11800:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1566,"indexExpression":{"id":1564,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11814:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11800:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1567,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"11822:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1568,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"11836:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11822:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11800:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1571,"nodeType":"ExpressionStatement","src":"11800:42:5"}]},{"eventCall":{"arguments":[{"id":1574,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"11883:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1575,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11893:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11907:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11899:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1576,"name":"address","nodeType":"ElementaryTypeName","src":"11899:7:5","typeDescriptions":{}}},"id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11899:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1580,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"11911:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1581,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"11915:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1573,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"11868:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11868:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1583,"nodeType":"EmitStatement","src":"11863:59:5"},{"expression":{"arguments":[{"id":1585,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"11953:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"11963:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11977:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11969:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1587,"name":"address","nodeType":"ElementaryTypeName","src":"11969:7:5","typeDescriptions":{}}},"id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11969:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1591,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"11981:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1592,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"11986:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11995:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1584,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"11933:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11933:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1595,"nodeType":"ExpressionStatement","src":"11933:65:5"}]},"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"10939:275:5","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1597,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11228:5:5","nodeType":"FunctionDefinition","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"from","nameLocation":"11251:4:5","nodeType":"VariableDeclaration","scope":1597,"src":"11243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"11243:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"id","nameLocation":"11273:2:5","nodeType":"VariableDeclaration","scope":1597,"src":"11265:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1496,"name":"uint256","nodeType":"ElementaryTypeName","src":"11265:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"amount","nameLocation":"11293:6:5","nodeType":"VariableDeclaration","scope":1597,"src":"11285:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1498,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11233:72:5"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[],"src":"11323:0:5"},"scope":1952,"src":"11219:786:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"12373:814:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12391:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12407:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12399:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"12399:7:5","typeDescriptions":{}}},"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12399:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12391:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12411:37:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1609,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12383:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12383:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1618,"nodeType":"ExpressionStatement","src":"12383:66:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1620,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"12467:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12467:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1622,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"12481:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12481:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12467:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12497:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1619,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12459:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12459:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1627,"nodeType":"ExpressionStatement","src":"12459:81:5"},{"assignments":[1629],"declarations":[{"constant":false,"id":1629,"mutability":"mutable","name":"operator","nameLocation":"12559:8:5","nodeType":"VariableDeclaration","scope":1719,"src":"12551:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"12551:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1632,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1630,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"12570:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12551:31:5"},{"expression":{"arguments":[{"id":1634,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"12614:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1635,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12624:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12638:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12630:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"12630:7:5","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12630:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1640,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"12642:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1641,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"12647:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12656:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1633,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"12593:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12593:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1644,"nodeType":"ExpressionStatement","src":"12593:66:5"},{"body":{"id":1694,"nodeType":"Block","src":"12711:323:5","statements":[{"assignments":[1657],"declarations":[{"constant":false,"id":1657,"mutability":"mutable","name":"id","nameLocation":"12733:2:5","nodeType":"VariableDeclaration","scope":1694,"src":"12725:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"12725:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1661,"initialValue":{"baseExpression":{"id":1658,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"12738:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1660,"indexExpression":{"id":1659,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"12742:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12738:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12725:19:5"},{"assignments":[1663],"declarations":[{"constant":false,"id":1663,"mutability":"mutable","name":"amount","nameLocation":"12766:6:5","nodeType":"VariableDeclaration","scope":1694,"src":"12758:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"12758:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1667,"initialValue":{"baseExpression":{"id":1664,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"12775:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1666,"indexExpression":{"id":1665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"12783:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12775:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12758:27:5"},{"assignments":[1669],"declarations":[{"constant":false,"id":1669,"mutability":"mutable","name":"fromBalance","nameLocation":"12808:11:5","nodeType":"VariableDeclaration","scope":1694,"src":"12800:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"12800:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1675,"initialValue":{"baseExpression":{"baseExpression":{"id":1670,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"12822:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1672,"indexExpression":{"id":1671,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"12832:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12822:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1674,"indexExpression":{"id":1673,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12836:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12822:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12800:41:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1677,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12863:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1678,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"12878:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12863:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12886:38:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12855:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12855:70:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1682,"nodeType":"ExpressionStatement","src":"12855:70:5"},{"id":1693,"nodeType":"UncheckedBlock","src":"12939:85:5","statements":[{"expression":{"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1683,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"12967:9:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1686,"indexExpression":{"id":1684,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"12977:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12967:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1687,"indexExpression":{"id":1685,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"12981:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12967:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"12989:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1689,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"13003:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12989:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12967:42:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1692,"nodeType":"ExpressionStatement","src":"12967:42:5"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1649,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"12690:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1650,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"12694:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"12694:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12690:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1695,"initializationExpression":{"assignments":[1646],"declarations":[{"constant":false,"id":1646,"mutability":"mutable","name":"i","nameLocation":"12683:1:5","nodeType":"VariableDeclaration","scope":1695,"src":"12675:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"12675:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1648,"initialValue":{"hexValue":"30","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12687:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12675:13:5"},"loopExpression":{"expression":{"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12706:3:5","subExpression":{"id":1653,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"12706:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1655,"nodeType":"ExpressionStatement","src":"12706:3:5"},"nodeType":"ForStatement","src":"12670:364:5"},{"eventCall":{"arguments":[{"id":1697,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"13063:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1698,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"13073:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13087:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13079:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"13079:7:5","typeDescriptions":{}}},"id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13079:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1703,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"13091:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1704,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"13096:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1696,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"13049:13:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13049:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1706,"nodeType":"EmitStatement","src":"13044:60:5"},{"expression":{"arguments":[{"id":1708,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"13135:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1709,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"13145:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13159:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13151:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1710,"name":"address","nodeType":"ElementaryTypeName","src":"13151:7:5","typeDescriptions":{}}},"id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13151:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1714,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"13163:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1715,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"13168:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13177:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1707,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"13115:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13115:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1718,"nodeType":"ExpressionStatement","src":"13115:65:5"}]},"documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"12011:228:5","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"12253:10:5","nodeType":"FunctionDefinition","parameters":{"id":1607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"from","nameLocation":"12281:4:5","nodeType":"VariableDeclaration","scope":1720,"src":"12273:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"12273:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"ids","nameLocation":"12312:3:5","nodeType":"VariableDeclaration","scope":1720,"src":"12295:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"12295:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1602,"nodeType":"ArrayTypeName","src":"12295:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"amounts","nameLocation":"12342:7:5","nodeType":"VariableDeclaration","scope":1720,"src":"12325:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"12325:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1605,"nodeType":"ArrayTypeName","src":"12325:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12263:92:5"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[],"src":"12373:0:5"},"scope":1952,"src":"12244:943:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1751,"nodeType":"Block","src":"13446:200:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"13464:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1732,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"13473:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13464:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13483:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13456:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13456:71:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1736,"nodeType":"ExpressionStatement","src":"13456:71:5"},{"expression":{"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1737,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"13537:18:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1740,"indexExpression":{"id":1738,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"13556:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13537:25:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1741,"indexExpression":{"id":1739,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"13563:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13537:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1742,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"13575:8:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13537:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1744,"nodeType":"ExpressionStatement","src":"13537:46:5"},{"eventCall":{"arguments":[{"id":1746,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"13613:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1747,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"13620:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1748,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"13630:8:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1745,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"13598:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13598:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1750,"nodeType":"EmitStatement","src":"13593:46:5"}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"13193:125:5","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1752,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13332:18:5","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"owner","nameLocation":"13368:5:5","nodeType":"VariableDeclaration","scope":1752,"src":"13360:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"13360:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1725,"mutability":"mutable","name":"operator","nameLocation":"13391:8:5","nodeType":"VariableDeclaration","scope":1752,"src":"13383:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"13383:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"approved","nameLocation":"13414:8:5","nodeType":"VariableDeclaration","scope":1752,"src":"13409:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1726,"name":"bool","nodeType":"ElementaryTypeName","src":"13409:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13350:78:5"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"13446:0:5"},"scope":1952,"src":"13323:323:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1770,"nodeType":"Block","src":"14794:2:5","statements":[]},"documentation":{"id":1753,"nodeType":"StructuredDocumentation","src":"13652:925:5","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1771,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14591:20:5","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"operator","nameLocation":"14629:8:5","nodeType":"VariableDeclaration","scope":1771,"src":"14621:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"14621:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"from","nameLocation":"14655:4:5","nodeType":"VariableDeclaration","scope":1771,"src":"14647:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"14647:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"to","nameLocation":"14677:2:5","nodeType":"VariableDeclaration","scope":1771,"src":"14669:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"14669:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"ids","nameLocation":"14706:3:5","nodeType":"VariableDeclaration","scope":1771,"src":"14689:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"14689:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1761,"nodeType":"ArrayTypeName","src":"14689:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"amounts","nameLocation":"14736:7:5","nodeType":"VariableDeclaration","scope":1771,"src":"14719:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"14719:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1764,"nodeType":"ArrayTypeName","src":"14719:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"data","nameLocation":"14766:4:5","nodeType":"VariableDeclaration","scope":1771,"src":"14753:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1766,"name":"bytes","nodeType":"ElementaryTypeName","src":"14753:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14611:165:5"},"returnParameters":{"id":1769,"nodeType":"ParameterList","parameters":[],"src":"14794:0:5"},"scope":1952,"src":"14582:214:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1789,"nodeType":"Block","src":"15940:2:5","statements":[]},"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"14802:922:5","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1790,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15738:19:5","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"operator","nameLocation":"15775:8:5","nodeType":"VariableDeclaration","scope":1790,"src":"15767:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"15767:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"from","nameLocation":"15801:4:5","nodeType":"VariableDeclaration","scope":1790,"src":"15793:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"15793:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"to","nameLocation":"15823:2:5","nodeType":"VariableDeclaration","scope":1790,"src":"15815:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1777,"name":"address","nodeType":"ElementaryTypeName","src":"15815:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"ids","nameLocation":"15852:3:5","nodeType":"VariableDeclaration","scope":1790,"src":"15835:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"15835:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1780,"nodeType":"ArrayTypeName","src":"15835:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"amounts","nameLocation":"15882:7:5","nodeType":"VariableDeclaration","scope":1790,"src":"15865:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"15865:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1783,"nodeType":"ArrayTypeName","src":"15865:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"data","nameLocation":"15912:4:5","nodeType":"VariableDeclaration","scope":1790,"src":"15899:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1785,"name":"bytes","nodeType":"ElementaryTypeName","src":"15899:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15757:165:5"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[],"src":"15940:0:5"},"scope":1952,"src":"15729:213:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1852,"nodeType":"Block","src":"16141:554:5","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1805,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"16155:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"16155:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16155:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1851,"nodeType":"IfStatement","src":"16151:538:5","trueBody":{"id":1850,"nodeType":"Block","src":"16172:517:5","statements":[{"clauses":[{"block":{"id":1832,"nodeType":"Block","src":"16300:195:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1821,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"16322:8:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1822,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"16334:27:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1974,"src":"16334:45:5","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"16334:54:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16322:66:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1831,"nodeType":"IfStatement","src":"16318:163:5","trueBody":{"id":1830,"nodeType":"Block","src":"16390:91:5","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16419:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1826,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16412:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16412:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1829,"nodeType":"ExpressionStatement","src":"16412:50:5"}]}}]},"errorName":"","id":1833,"nodeType":"TryCatchClause","parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"response","nameLocation":"16290:8:5","nodeType":"VariableDeclaration","scope":1833,"src":"16283:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1818,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16283:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16282:17:5"},"src":"16274:221:5"},{"block":{"id":1841,"nodeType":"Block","src":"16530:47:5","statements":[{"expression":{"arguments":[{"id":1838,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"16555:6:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1837,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16548:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16548:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1840,"nodeType":"ExpressionStatement","src":"16548:14:5"}]},"errorName":"Error","id":1842,"nodeType":"TryCatchClause","parameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"reason","nameLocation":"16522:6:5","nodeType":"VariableDeclaration","scope":1842,"src":"16508:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1834,"name":"string","nodeType":"ElementaryTypeName","src":"16508:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16507:22:5"},"src":"16496:81:5"},{"block":{"id":1847,"nodeType":"Block","src":"16584:95:5","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16609:54:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1843,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16602:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16602:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1846,"nodeType":"ExpressionStatement","src":"16602:62:5"}]},"errorName":"","id":1848,"nodeType":"TryCatchClause","src":"16578:101:5"}],"externalCall":{"arguments":[{"id":1812,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"16240:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1813,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"16250:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1814,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"16256:2:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1815,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"16260:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1816,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"16268:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1809,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"16218:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1808,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"16190:27:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16190:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$1993","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1974,"src":"16190:49:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16190:83:5","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1849,"nodeType":"TryStatement","src":"16186:493:5"}]}}]},"id":1853,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15957:30:5","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"operator","nameLocation":"16005:8:5","nodeType":"VariableDeclaration","scope":1853,"src":"15997:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1791,"name":"address","nodeType":"ElementaryTypeName","src":"15997:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1794,"mutability":"mutable","name":"from","nameLocation":"16031:4:5","nodeType":"VariableDeclaration","scope":1853,"src":"16023:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"16023:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"to","nameLocation":"16053:2:5","nodeType":"VariableDeclaration","scope":1853,"src":"16045:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"16045:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"id","nameLocation":"16073:2:5","nodeType":"VariableDeclaration","scope":1853,"src":"16065:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"16065:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"amount","nameLocation":"16093:6:5","nodeType":"VariableDeclaration","scope":1853,"src":"16085:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"16085:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"data","nameLocation":"16122:4:5","nodeType":"VariableDeclaration","scope":1853,"src":"16109:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1801,"name":"bytes","nodeType":"ElementaryTypeName","src":"16109:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15987:145:5"},"returnParameters":{"id":1804,"nodeType":"ParameterList","parameters":[],"src":"16141:0:5"},"scope":1952,"src":"15948:747:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1917,"nodeType":"Block","src":"16919:596:5","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1870,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"16933:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2273,"src":"16933:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16933:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1916,"nodeType":"IfStatement","src":"16929:580:5","trueBody":{"id":1915,"nodeType":"Block","src":"16950:559:5","statements":[{"clauses":[{"block":{"id":1897,"nodeType":"Block","src":"17115:200:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17137:8:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1887,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"17149:27:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1992,"src":"17149:50:5","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155ReceiverUpgradeable.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"17149:59:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17137:71:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1896,"nodeType":"IfStatement","src":"17133:168:5","trueBody":{"id":1895,"nodeType":"Block","src":"17210:91:5","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17239:42:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1891,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17232:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17232:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1894,"nodeType":"ExpressionStatement","src":"17232:50:5"}]}}]},"errorName":"","id":1898,"nodeType":"TryCatchClause","parameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"response","nameLocation":"17092:8:5","nodeType":"VariableDeclaration","scope":1898,"src":"17085:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1883,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17085:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17067:47:5"},"src":"17059:256:5"},{"block":{"id":1906,"nodeType":"Block","src":"17350:47:5","statements":[{"expression":{"arguments":[{"id":1903,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"17375:6:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1902,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17368:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17368:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1905,"nodeType":"ExpressionStatement","src":"17368:14:5"}]},"errorName":"Error","id":1907,"nodeType":"TryCatchClause","parameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"reason","nameLocation":"17342:6:5","nodeType":"VariableDeclaration","scope":1907,"src":"17328:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1899,"name":"string","nodeType":"ElementaryTypeName","src":"17328:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17327:22:5"},"src":"17316:81:5"},{"block":{"id":1912,"nodeType":"Block","src":"17404:95:5","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17429:54:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1908,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"17422:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17422:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1911,"nodeType":"ExpressionStatement","src":"17422:62:5"}]},"errorName":"","id":1913,"nodeType":"TryCatchClause","src":"17398:101:5"}],"externalCall":{"arguments":[{"id":1877,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"17023:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1878,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"17033:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1879,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"17039:3:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1880,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"17044:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1881,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"17053:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1874,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"16996:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1873,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"16968:27:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16968:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155ReceiverUpgradeable_$1993","typeString":"contract IERC1155ReceiverUpgradeable"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1992,"src":"16968:54:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16968:90:5","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1914,"nodeType":"TryStatement","src":"16964:535:5"}]}}]},"id":1918,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16710:35:5","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"operator","nameLocation":"16763:8:5","nodeType":"VariableDeclaration","scope":1918,"src":"16755:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1854,"name":"address","nodeType":"ElementaryTypeName","src":"16755:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1857,"mutability":"mutable","name":"from","nameLocation":"16789:4:5","nodeType":"VariableDeclaration","scope":1918,"src":"16781:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"16781:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1859,"mutability":"mutable","name":"to","nameLocation":"16811:2:5","nodeType":"VariableDeclaration","scope":1918,"src":"16803:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"16803:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"ids","nameLocation":"16840:3:5","nodeType":"VariableDeclaration","scope":1918,"src":"16823:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"16823:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1861,"nodeType":"ArrayTypeName","src":"16823:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"amounts","nameLocation":"16870:7:5","nodeType":"VariableDeclaration","scope":1918,"src":"16853:24:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"16853:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ArrayTypeName","src":"16853:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"data","nameLocation":"16900:4:5","nodeType":"VariableDeclaration","scope":1918,"src":"16887:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1866,"name":"bytes","nodeType":"ElementaryTypeName","src":"16887:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16745:165:5"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"16919:0:5"},"scope":1952,"src":"16701:814:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1945,"nodeType":"Block","src":"17605:109:5","statements":[{"assignments":[1930],"declarations":[{"constant":false,"id":1930,"mutability":"mutable","name":"array","nameLocation":"17632:5:5","nodeType":"VariableDeclaration","scope":1945,"src":"17615:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"17615:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1929,"nodeType":"ArrayTypeName","src":"17615:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1936,"initialValue":{"arguments":[{"hexValue":"31","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17654:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17640:13:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"17644:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1932,"nodeType":"ArrayTypeName","src":"17644:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17640:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17615:41:5"},{"expression":{"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1937,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"17666:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1939,"indexExpression":{"hexValue":"30","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17672:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17666:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1940,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"17677:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17666:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1942,"nodeType":"ExpressionStatement","src":"17666:18:5"},{"expression":{"id":1943,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"17702:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1925,"id":1944,"nodeType":"Return","src":"17695:12:5"}]},"id":1946,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"17530:17:5","nodeType":"FunctionDefinition","parameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"element","nameLocation":"17556:7:5","nodeType":"VariableDeclaration","scope":1946,"src":"17548:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"17548:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17547:17:5"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"17587:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"17587:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1923,"nodeType":"ArrayTypeName","src":"17587:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17586:18:5"},"scope":1952,"src":"17521:193:5","stateMutability":"pure","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"17720:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1951,"mutability":"mutable","name":"__gap","nameLocation":"17999:5:5","nodeType":"VariableDeclaration","scope":1952,"src":"17979:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"17979:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1950,"length":{"hexValue":"3437","id":1949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17987:2:5","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"17979:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"}],"scope":1953,"src":"687:17320:5","usedErrors":[]}],"src":"114:17894:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","exportedSymbols":{"IERC1155ReceiverUpgradeable":[1993],"IERC165Upgradeable":[2886]},"id":1994,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1954,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":1955,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1994,"sourceUnit":2887,"src":"143:58:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1957,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"284:18:6"},"id":1958,"nodeType":"InheritanceSpecifier","src":"284:18:6"}],"canonicalName":"IERC1155ReceiverUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1956,"nodeType":"StructuredDocumentation","src":"203:39:6","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":1993,"linearizedBaseContracts":[1993,2886],"name":"IERC1155ReceiverUpgradeable","nameLocation":"253:27:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"309:826:6","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":1974,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1149:17:6","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"operator","nameLocation":"1184:8:6","nodeType":"VariableDeclaration","scope":1974,"src":"1176:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1960,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"from","nameLocation":"1210:4:6","nodeType":"VariableDeclaration","scope":1974,"src":"1202:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1962,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"id","nameLocation":"1232:2:6","nodeType":"VariableDeclaration","scope":1974,"src":"1224:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1967,"mutability":"mutable","name":"value","nameLocation":"1252:5:6","nodeType":"VariableDeclaration","scope":1974,"src":"1244:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"1244:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1969,"mutability":"mutable","name":"data","nameLocation":"1282:4:6","nodeType":"VariableDeclaration","scope":1974,"src":"1267:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1968,"name":"bytes","nodeType":"ElementaryTypeName","src":"1267:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1166:126:6"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1974,"src":"1311:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1971,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1311:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1310:8:6"},"scope":1993,"src":"1140:179:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1975,"nodeType":"StructuredDocumentation","src":"1325:994:6","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":1992,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2333:22:6","nodeType":"FunctionDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1977,"mutability":"mutable","name":"operator","nameLocation":"2373:8:6","nodeType":"VariableDeclaration","scope":1992,"src":"2365:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1976,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1979,"mutability":"mutable","name":"from","nameLocation":"2399:4:6","nodeType":"VariableDeclaration","scope":1992,"src":"2391:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1978,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"ids","nameLocation":"2432:3:6","nodeType":"VariableDeclaration","scope":1992,"src":"2413:22:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2413:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1981,"nodeType":"ArrayTypeName","src":"2413:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1985,"mutability":"mutable","name":"values","nameLocation":"2464:6:6","nodeType":"VariableDeclaration","scope":1992,"src":"2445:25:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"2445:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1984,"nodeType":"ArrayTypeName","src":"2445:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1987,"mutability":"mutable","name":"data","nameLocation":"2495:4:6","nodeType":"VariableDeclaration","scope":1992,"src":"2480:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1986,"name":"bytes","nodeType":"ElementaryTypeName","src":"2480:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2355:150:6"},"returnParameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1992,"src":"2524:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1989,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2523:8:6"},"scope":1993,"src":"2324:208:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1994,"src":"243:2291:6","usedErrors":[]}],"src":"118:2417:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","exportedSymbols":{"IERC1155Upgradeable":[2115],"IERC165Upgradeable":[2886]},"id":2116,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1995,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"../../utils/introspection/IERC165Upgradeable.sol","id":1996,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2116,"sourceUnit":2887,"src":"135:58:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1998,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"394:18:7"},"id":1999,"nodeType":"InheritanceSpecifier","src":"394:18:7"}],"canonicalName":"IERC1155Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"195:165:7","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2115,"linearizedBaseContracts":[2115,2886],"name":"IERC1155Upgradeable","nameLocation":"371:19:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"419:121:7","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"id":2012,"name":"TransferSingle","nameLocation":"551:14:7","nodeType":"EventDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"582:8:7","nodeType":"VariableDeclaration","scope":2012,"src":"566:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2001,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2004,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"608:4:7","nodeType":"VariableDeclaration","scope":2012,"src":"592:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2003,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2006,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"630:2:7","nodeType":"VariableDeclaration","scope":2012,"src":"614:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2008,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"642:2:7","nodeType":"VariableDeclaration","scope":2012,"src":"634:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"634:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"654:5:7","nodeType":"VariableDeclaration","scope":2012,"src":"646:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"565:95:7"},"src":"545:116:7"},{"anonymous":false,"documentation":{"id":2013,"nodeType":"StructuredDocumentation","src":"667:144:7","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"id":2027,"name":"TransferBatch","nameLocation":"822:13:7","nodeType":"EventDefinition","parameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"861:8:7","nodeType":"VariableDeclaration","scope":2027,"src":"845:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2017,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"895:4:7","nodeType":"VariableDeclaration","scope":2027,"src":"879:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2016,"name":"address","nodeType":"ElementaryTypeName","src":"879:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2019,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"925:2:7","nodeType":"VariableDeclaration","scope":2027,"src":"909:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2018,"name":"address","nodeType":"ElementaryTypeName","src":"909:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2022,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"947:3:7","nodeType":"VariableDeclaration","scope":2027,"src":"937:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2021,"nodeType":"ArrayTypeName","src":"937:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2025,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"970:6:7","nodeType":"VariableDeclaration","scope":2027,"src":"960:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ArrayTypeName","src":"960:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"835:147:7"},"src":"816:167:7"},{"anonymous":false,"documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"989:147:7","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"id":2036,"name":"ApprovalForAll","nameLocation":"1147:14:7","nodeType":"EventDefinition","parameters":{"id":2035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1178:7:7","nodeType":"VariableDeclaration","scope":2036,"src":"1162:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1203:8:7","nodeType":"VariableDeclaration","scope":2036,"src":"1187:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2031,"name":"address","nodeType":"ElementaryTypeName","src":"1187:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2034,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1218:8:7","nodeType":"VariableDeclaration","scope":2036,"src":"1213:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2033,"name":"bool","nodeType":"ElementaryTypeName","src":"1213:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1161:66:7"},"src":"1141:87:7"},{"anonymous":false,"documentation":{"id":2037,"nodeType":"StructuredDocumentation","src":"1234:343:7","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"id":2043,"name":"URI","nameLocation":"1588:3:7","nodeType":"EventDefinition","parameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1599:5:7","nodeType":"VariableDeclaration","scope":2043,"src":"1592:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2038,"name":"string","nodeType":"ElementaryTypeName","src":"1592:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2041,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1622:2:7","nodeType":"VariableDeclaration","scope":2043,"src":"1606:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2040,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1591:34:7"},"src":"1582:44:7"},{"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"1632:173:7","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":2053,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1819:9:7","nodeType":"FunctionDefinition","parameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"account","nameLocation":"1837:7:7","nodeType":"VariableDeclaration","scope":2053,"src":"1829:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"1829:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2048,"mutability":"mutable","name":"id","nameLocation":"1854:2:7","nodeType":"VariableDeclaration","scope":2053,"src":"1846:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1828:29:7"},"returnParameters":{"id":2052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2053,"src":"1881:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1880:9:7"},"scope":2115,"src":"1810:80:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2054,"nodeType":"StructuredDocumentation","src":"1896:188:7","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":2066,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2098:14:7","nodeType":"FunctionDefinition","parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"accounts","nameLocation":"2132:8:7","nodeType":"VariableDeclaration","scope":2066,"src":"2113:27:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2055,"name":"address","nodeType":"ElementaryTypeName","src":"2113:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2056,"nodeType":"ArrayTypeName","src":"2113:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"ids","nameLocation":"2161:3:7","nodeType":"VariableDeclaration","scope":2066,"src":"2142:22:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2059,"nodeType":"ArrayTypeName","src":"2142:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2112:53:7"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"2213:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"2213:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2063,"nodeType":"ArrayTypeName","src":"2213:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2212:18:7"},"scope":2115,"src":"2089:142:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"2237:248:7","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":2074,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2499:17:7","nodeType":"FunctionDefinition","parameters":{"id":2072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"operator","nameLocation":"2525:8:7","nodeType":"VariableDeclaration","scope":2074,"src":"2517:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2068,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2071,"mutability":"mutable","name":"approved","nameLocation":"2540:8:7","nodeType":"VariableDeclaration","scope":2074,"src":"2535:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2070,"name":"bool","nodeType":"ElementaryTypeName","src":"2535:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2516:33:7"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[],"src":"2558:0:7"},"scope":2115,"src":"2490:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"2565:135:7","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2084,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2714:16:7","nodeType":"FunctionDefinition","parameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"mutability":"mutable","name":"account","nameLocation":"2739:7:7","nodeType":"VariableDeclaration","scope":2084,"src":"2731:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2076,"name":"address","nodeType":"ElementaryTypeName","src":"2731:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2079,"mutability":"mutable","name":"operator","nameLocation":"2756:8:7","nodeType":"VariableDeclaration","scope":2084,"src":"2748:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2730:35:7"},"returnParameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2084,"src":"2789:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2081,"name":"bool","nodeType":"ElementaryTypeName","src":"2789:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2788:6:7"},"scope":2115,"src":"2705:90:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2085,"nodeType":"StructuredDocumentation","src":"2801:556:7","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":2098,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3371:16:7","nodeType":"FunctionDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"from","nameLocation":"3405:4:7","nodeType":"VariableDeclaration","scope":2098,"src":"3397:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2086,"name":"address","nodeType":"ElementaryTypeName","src":"3397:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2089,"mutability":"mutable","name":"to","nameLocation":"3427:2:7","nodeType":"VariableDeclaration","scope":2098,"src":"3419:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2088,"name":"address","nodeType":"ElementaryTypeName","src":"3419:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2091,"mutability":"mutable","name":"id","nameLocation":"3447:2:7","nodeType":"VariableDeclaration","scope":2098,"src":"3439:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"3439:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"amount","nameLocation":"3467:6:7","nodeType":"VariableDeclaration","scope":2098,"src":"3459:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"3459:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"data","nameLocation":"3498:4:7","nodeType":"VariableDeclaration","scope":2098,"src":"3483:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2094,"name":"bytes","nodeType":"ElementaryTypeName","src":"3483:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3387:121:7"},"returnParameters":{"id":2097,"nodeType":"ParameterList","parameters":[],"src":"3517:0:7"},"scope":2115,"src":"3362:156:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"3524:390:7","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":2114,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3928:21:7","nodeType":"FunctionDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"from","nameLocation":"3967:4:7","nodeType":"VariableDeclaration","scope":2114,"src":"3959:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"3959:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"to","nameLocation":"3989:2:7","nodeType":"VariableDeclaration","scope":2114,"src":"3981:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2102,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2106,"mutability":"mutable","name":"ids","nameLocation":"4020:3:7","nodeType":"VariableDeclaration","scope":2114,"src":"4001:22:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"4001:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2105,"nodeType":"ArrayTypeName","src":"4001:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2109,"mutability":"mutable","name":"amounts","nameLocation":"4052:7:7","nodeType":"VariableDeclaration","scope":2114,"src":"4033:26:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"4033:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2108,"nodeType":"ArrayTypeName","src":"4033:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"data","nameLocation":"4084:4:7","nodeType":"VariableDeclaration","scope":2114,"src":"4069:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2110,"name":"bytes","nodeType":"ElementaryTypeName","src":"4069:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3949:145:7"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[],"src":"4103:0:7"},"scope":2115,"src":"3919:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2116,"src":"361:3745:7","usedErrors":[]}],"src":"110:3997:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol","exportedSymbols":{"IERC1155MetadataURIUpgradeable":[2130],"IERC1155Upgradeable":[2115],"IERC165Upgradeable":[2886]},"id":2131,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2117,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol","file":"../IERC1155Upgradeable.sol","id":2118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2131,"sourceUnit":2116,"src":"142:36:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2120,"name":"IERC1155Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"419:19:8"},"id":2121,"nodeType":"InheritanceSpecifier","src":"419:19:8"}],"canonicalName":"IERC1155MetadataURIUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"180:194:8","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":2130,"linearizedBaseContracts":[2130,2115,2886],"name":"IERC1155MetadataURIUpgradeable","nameLocation":"385:30:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"445:192:8","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":2129,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"651:3:8","nodeType":"FunctionDefinition","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"id","nameLocation":"663:2:8","nodeType":"VariableDeclaration","scope":2129,"src":"655:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:12:8"},"returnParameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2129,"src":"690:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2126,"name":"string","nodeType":"ElementaryTypeName","src":"690:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"689:15:8"},"scope":2130,"src":"642:63:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2131,"src":"375:332:8","usedErrors":[]}],"src":"117:591:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ERC1155HolderUpgradeable":[2201],"ERC1155ReceiverUpgradeable":[2255],"ERC165Upgradeable":[2874],"IERC1155ReceiverUpgradeable":[1993],"IERC165Upgradeable":[2886],"Initializable":[580]},"id":2202,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2132,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"121:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol","file":"./ERC1155ReceiverUpgradeable.sol","id":2133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2202,"sourceUnit":2256,"src":"146:42:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2202,"sourceUnit":581,"src":"189:48:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2136,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"548:13:9"},"id":2137,"nodeType":"InheritanceSpecifier","src":"548:13:9"},{"baseName":{"id":2138,"name":"ERC1155ReceiverUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2255,"src":"563:26:9"},"id":2139,"nodeType":"InheritanceSpecifier","src":"563:26:9"}],"canonicalName":"ERC1155HolderUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2135,"nodeType":"StructuredDocumentation","src":"239:271:9","text":" Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n stuck.\n @dev _Available since v3.1._"},"fullyImplemented":true,"id":2201,"linearizedBaseContracts":[2201,2255,1993,2874,2886,580],"name":"ERC1155HolderUpgradeable","nameLocation":"520:24:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":2144,"nodeType":"Block","src":"654:7:9","statements":[]},"id":2145,"implemented":true,"kind":"function","modifiers":[{"id":2142,"kind":"modifierInvocation","modifierName":{"id":2141,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"637:16:9"},"nodeType":"ModifierInvocation","src":"637:16:9"}],"name":"__ERC1155Holder_init","nameLocation":"605:20:9","nodeType":"FunctionDefinition","parameters":{"id":2140,"nodeType":"ParameterList","parameters":[],"src":"625:2:9"},"returnParameters":{"id":2143,"nodeType":"ParameterList","parameters":[],"src":"654:0:9"},"scope":2201,"src":"596:65:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2150,"nodeType":"Block","src":"735:7:9","statements":[]},"id":2151,"implemented":true,"kind":"function","modifiers":[{"id":2148,"kind":"modifierInvocation","modifierName":{"id":2147,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"718:16:9"},"nodeType":"ModifierInvocation","src":"718:16:9"}],"name":"__ERC1155Holder_init_unchained","nameLocation":"676:30:9","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"706:2:9"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[],"src":"735:0:9"},"scope":2201,"src":"667:75:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1974],"body":{"id":2171,"nodeType":"Block","src":"911:55:9","statements":[{"expression":{"expression":{"expression":{"id":2167,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"928:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1155HolderUpgradeable_$2201","typeString":"contract ERC1155HolderUpgradeable"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2172,"src":"928:22:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"928:31:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2166,"id":2170,"nodeType":"Return","src":"921:38:9"}]},"functionSelector":"f23a6e61","id":2172,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"756:17:9","nodeType":"FunctionDefinition","overrides":{"id":2163,"nodeType":"OverrideSpecifier","overrides":[],"src":"885:8:9"},"parameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"783:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2152,"name":"address","nodeType":"ElementaryTypeName","src":"783:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"800:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2154,"name":"address","nodeType":"ElementaryTypeName","src":"800:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"817:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2156,"name":"uint256","nodeType":"ElementaryTypeName","src":"817:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"834:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"851:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2160,"name":"bytes","nodeType":"ElementaryTypeName","src":"851:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"773:96:9"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2172,"src":"903:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2164,"name":"bytes4","nodeType":"ElementaryTypeName","src":"903:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"902:8:9"},"scope":2201,"src":"747:219:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1992],"body":{"id":2194,"nodeType":"Block","src":"1159:60:9","statements":[{"expression":{"expression":{"expression":{"id":2190,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1176:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1155HolderUpgradeable_$2201","typeString":"contract ERC1155HolderUpgradeable"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2195,"src":"1176:27:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1176:36:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2189,"id":2193,"nodeType":"Return","src":"1169:43:9"}]},"functionSelector":"bc197c81","id":2195,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"981:22:9","nodeType":"FunctionDefinition","overrides":{"id":2186,"nodeType":"OverrideSpecifier","overrides":[],"src":"1133:8:9"},"parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1013:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2173,"name":"address","nodeType":"ElementaryTypeName","src":"1013:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1030:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2175,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1047:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1047:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2178,"nodeType":"ArrayTypeName","src":"1047:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1073:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2181,"nodeType":"ArrayTypeName","src":"1073:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1099:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2183,"name":"bytes","nodeType":"ElementaryTypeName","src":"1099:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1003:114:9"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"1151:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2187,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1151:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1150:8:9"},"scope":2201,"src":"972:247:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":2196,"nodeType":"StructuredDocumentation","src":"1225:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2200,"mutability":"mutable","name":"__gap","nameLocation":"1504:5:9","nodeType":"VariableDeclaration","scope":2201,"src":"1484:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"1484:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2199,"length":{"hexValue":"3530","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1492:2:9","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1484:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2202,"src":"511:1001:9","usedErrors":[]}],"src":"121:1392:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ERC1155ReceiverUpgradeable":[2255],"ERC165Upgradeable":[2874],"IERC1155ReceiverUpgradeable":[1993],"IERC165Upgradeable":[2886],"Initializable":[580]},"id":2256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2203,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol","file":"../IERC1155ReceiverUpgradeable.sol","id":2204,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2256,"sourceUnit":1994,"src":"133:44:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../../utils/introspection/ERC165Upgradeable.sol","id":2205,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2256,"sourceUnit":2875,"src":"178:60:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":2206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2256,"sourceUnit":581,"src":"239:48:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2208,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"377:13:10"},"id":2209,"nodeType":"InheritanceSpecifier","src":"377:13:10"},{"baseName":{"id":2210,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"392:17:10"},"id":2211,"nodeType":"InheritanceSpecifier","src":"392:17:10"},{"baseName":{"id":2212,"name":"IERC1155ReceiverUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"411:27:10"},"id":2213,"nodeType":"InheritanceSpecifier","src":"411:27:10"}],"canonicalName":"ERC1155ReceiverUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"289:39:10","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":2255,"linearizedBaseContracts":[2255,1993,2874,2886,580],"name":"ERC1155ReceiverUpgradeable","nameLocation":"347:26:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2218,"nodeType":"Block","src":"505:7:10","statements":[]},"id":2219,"implemented":true,"kind":"function","modifiers":[{"id":2216,"kind":"modifierInvocation","modifierName":{"id":2215,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"488:16:10"},"nodeType":"ModifierInvocation","src":"488:16:10"}],"name":"__ERC1155Receiver_init","nameLocation":"454:22:10","nodeType":"FunctionDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[],"src":"476:2:10"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[],"src":"505:0:10"},"scope":2255,"src":"445:67:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2224,"nodeType":"Block","src":"588:7:10","statements":[]},"id":2225,"implemented":true,"kind":"function","modifiers":[{"id":2222,"kind":"modifierInvocation","modifierName":{"id":2221,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"571:16:10"},"nodeType":"ModifierInvocation","src":"571:16:10"}],"name":"__ERC1155Receiver_init_unchained","nameLocation":"527:32:10","nodeType":"FunctionDefinition","parameters":{"id":2220,"nodeType":"ParameterList","parameters":[],"src":"559:2:10"},"returnParameters":{"id":2223,"nodeType":"ParameterList","parameters":[],"src":"588:0:10"},"scope":2255,"src":"518:77:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2868,2885],"body":{"id":2248,"nodeType":"Block","src":"791:124:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"808:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2238,"name":"IERC1155ReceiverUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"828:27:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155ReceiverUpgradeable_$1993_$","typeString":"type(contract IERC1155ReceiverUpgradeable)"}],"id":2237,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"823:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"823:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155ReceiverUpgradeable_$1993","typeString":"type(contract IERC1155ReceiverUpgradeable)"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"823:45:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"808:60:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2244,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"896:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2242,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"872:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155ReceiverUpgradeable_$2255_$","typeString":"type(contract super ERC1155ReceiverUpgradeable)"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2868,"src":"872:23:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"872:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"808:100:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2235,"id":2247,"nodeType":"Return","src":"801:107:10"}]},"documentation":{"id":2226,"nodeType":"StructuredDocumentation","src":"600:56:10","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2249,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"670:17:10","nodeType":"FunctionDefinition","overrides":{"id":2232,"nodeType":"OverrideSpecifier","overrides":[{"id":2230,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2874,"src":"737:17:10"},{"id":2231,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"756:18:10"}],"src":"728:47:10"},"parameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"interfaceId","nameLocation":"695:11:10","nodeType":"VariableDeclaration","scope":2249,"src":"688:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2227,"name":"bytes4","nodeType":"ElementaryTypeName","src":"688:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"687:20:10"},"returnParameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2249,"src":"785:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2233,"name":"bool","nodeType":"ElementaryTypeName","src":"785:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"784:6:10"},"scope":2255,"src":"661:254:10","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":2250,"nodeType":"StructuredDocumentation","src":"921:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2254,"mutability":"mutable","name":"__gap","nameLocation":"1200:5:10","nodeType":"VariableDeclaration","scope":2255,"src":"1180:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1180:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2253,"length":{"hexValue":"3530","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1188:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1180:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2256,"src":"329:879:10","usedErrors":[]}],"src":"108:1101:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539]},"id":2540,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2257,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"106:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2258,"nodeType":"StructuredDocumentation","src":"131:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2539,"linearizedBaseContracts":[2539],"name":"AddressUpgradeable","nameLocation":"207:18:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2272,"nodeType":"Block","src":"1257:254:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2266,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"1481:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1481:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1481:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1503:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1481:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2265,"id":2271,"nodeType":"Return","src":"1474:30:11"}]},"documentation":{"id":2259,"nodeType":"StructuredDocumentation","src":"232:954:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1200:10:11","nodeType":"FunctionDefinition","parameters":{"id":2262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2261,"mutability":"mutable","name":"account","nameLocation":"1219:7:11","nodeType":"VariableDeclaration","scope":2273,"src":"1211:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2260,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1210:17:11"},"returnParameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2273,"src":"1251:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2263,"name":"bool","nodeType":"ElementaryTypeName","src":"1251:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1250:6:11"},"scope":2539,"src":"1191:320:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2306,"nodeType":"Block","src":"2499:241:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2284,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2525:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2539","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2539","typeString":"library AddressUpgradeable"}],"id":2283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:11","typeDescriptions":{}}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2517:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2287,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"2542:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2517:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2550:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2281,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2509:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2291,"nodeType":"ExpressionStatement","src":"2509:73:11"},{"assignments":[2293,null],"declarations":[{"constant":false,"id":2293,"mutability":"mutable","name":"success","nameLocation":"2599:7:11","nodeType":"VariableDeclaration","scope":2306,"src":"2594:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2292,"name":"bool","nodeType":"ElementaryTypeName","src":"2594:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2300,"initialValue":{"arguments":[{"hexValue":"","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2642:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2294,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"2612:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2612:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2296,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"2634:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2612:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2612:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2593:52:11"},{"expression":{"arguments":[{"id":2302,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"2663:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2672:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2301,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2655:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2655:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2305,"nodeType":"ExpressionStatement","src":"2655:78:11"}]},"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"1517:906:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2307,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2437:9:11","nodeType":"FunctionDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"recipient","nameLocation":"2463:9:11","nodeType":"VariableDeclaration","scope":2307,"src":"2447:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"2447:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"amount","nameLocation":"2482:6:11","nodeType":"VariableDeclaration","scope":2307,"src":"2474:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"2474:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2446:43:11"},"returnParameters":{"id":2280,"nodeType":"ParameterList","parameters":[],"src":"2499:0:11"},"scope":2539,"src":"2428:312:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2324,"nodeType":"Block","src":"3571:96:11","statements":[{"expression":{"arguments":[{"id":2318,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"3610:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2319,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"3618:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3624:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3627:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2317,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2365,2409],"referencedDeclaration":2409,"src":"3588:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3588:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2316,"id":2323,"nodeType":"Return","src":"3581:79:11"}]},"documentation":{"id":2308,"nodeType":"StructuredDocumentation","src":"2746:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2325,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3491:12:11","nodeType":"FunctionDefinition","parameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2310,"mutability":"mutable","name":"target","nameLocation":"3512:6:11","nodeType":"VariableDeclaration","scope":2325,"src":"3504:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2309,"name":"address","nodeType":"ElementaryTypeName","src":"3504:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2312,"mutability":"mutable","name":"data","nameLocation":"3533:4:11","nodeType":"VariableDeclaration","scope":2325,"src":"3520:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2311,"name":"bytes","nodeType":"ElementaryTypeName","src":"3520:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3503:35:11"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2325,"src":"3557:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2314,"name":"bytes","nodeType":"ElementaryTypeName","src":"3557:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3556:14:11"},"scope":2539,"src":"3482:185:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2344,"nodeType":"Block","src":"4036:76:11","statements":[{"expression":{"arguments":[{"id":2338,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"4075:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2339,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"4083:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4089:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2341,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"4092:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2337,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2365,2409],"referencedDeclaration":2409,"src":"4053:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4053:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2336,"id":2343,"nodeType":"Return","src":"4046:59:11"}]},"documentation":{"id":2326,"nodeType":"StructuredDocumentation","src":"3673:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2345,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3898:12:11","nodeType":"FunctionDefinition","parameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"target","nameLocation":"3928:6:11","nodeType":"VariableDeclaration","scope":2345,"src":"3920:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2327,"name":"address","nodeType":"ElementaryTypeName","src":"3920:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2330,"mutability":"mutable","name":"data","nameLocation":"3957:4:11","nodeType":"VariableDeclaration","scope":2345,"src":"3944:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2329,"name":"bytes","nodeType":"ElementaryTypeName","src":"3944:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2332,"mutability":"mutable","name":"errorMessage","nameLocation":"3985:12:11","nodeType":"VariableDeclaration","scope":2345,"src":"3971:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2331,"name":"string","nodeType":"ElementaryTypeName","src":"3971:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3910:93:11"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2345,"src":"4022:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2334,"name":"bytes","nodeType":"ElementaryTypeName","src":"4022:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4021:14:11"},"scope":2539,"src":"3889:223:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2364,"nodeType":"Block","src":"4617:111:11","statements":[{"expression":{"arguments":[{"id":2358,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"4656:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2359,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"4664:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"4670:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4677:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2357,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2365,2409],"referencedDeclaration":2409,"src":"4634:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4634:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2356,"id":2363,"nodeType":"Return","src":"4627:94:11"}]},"documentation":{"id":2346,"nodeType":"StructuredDocumentation","src":"4118:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2365,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4483:21:11","nodeType":"FunctionDefinition","parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2348,"mutability":"mutable","name":"target","nameLocation":"4522:6:11","nodeType":"VariableDeclaration","scope":2365,"src":"4514:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2347,"name":"address","nodeType":"ElementaryTypeName","src":"4514:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"data","nameLocation":"4551:4:11","nodeType":"VariableDeclaration","scope":2365,"src":"4538:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2349,"name":"bytes","nodeType":"ElementaryTypeName","src":"4538:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"value","nameLocation":"4573:5:11","nodeType":"VariableDeclaration","scope":2365,"src":"4565:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2351,"name":"uint256","nodeType":"ElementaryTypeName","src":"4565:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4504:80:11"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2365,"src":"4603:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2354,"name":"bytes","nodeType":"ElementaryTypeName","src":"4603:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4602:14:11"},"scope":2539,"src":"4474:254:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2408,"nodeType":"Block","src":"5155:267:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2382,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5181:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2539","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2539","typeString":"library AddressUpgradeable"}],"id":2381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5173:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2380,"name":"address","nodeType":"ElementaryTypeName","src":"5173:7:11","typeDescriptions":{}}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5173:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5173:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"5198:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5173:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5205:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2379,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5165:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5165:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2389,"nodeType":"ExpressionStatement","src":"5165:81:11"},{"assignments":[2391,2393],"declarations":[{"constant":false,"id":2391,"mutability":"mutable","name":"success","nameLocation":"5262:7:11","nodeType":"VariableDeclaration","scope":2408,"src":"5257:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2390,"name":"bool","nodeType":"ElementaryTypeName","src":"5257:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"returndata","nameLocation":"5284:10:11","nodeType":"VariableDeclaration","scope":2408,"src":"5271:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2392,"name":"bytes","nodeType":"ElementaryTypeName","src":"5271:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2400,"initialValue":{"arguments":[{"id":2398,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"5324:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2394,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5298:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5298:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"5317:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5298:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5298:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5256:73:11"},{"expression":{"arguments":[{"id":2402,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"5373:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2403,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"5381:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2404,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"5390:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2405,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"5402:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2401,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"5346:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5346:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2378,"id":2407,"nodeType":"Return","src":"5339:76:11"}]},"documentation":{"id":2366,"nodeType":"StructuredDocumentation","src":"4734:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2409,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4985:21:11","nodeType":"FunctionDefinition","parameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2368,"mutability":"mutable","name":"target","nameLocation":"5024:6:11","nodeType":"VariableDeclaration","scope":2409,"src":"5016:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2367,"name":"address","nodeType":"ElementaryTypeName","src":"5016:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2370,"mutability":"mutable","name":"data","nameLocation":"5053:4:11","nodeType":"VariableDeclaration","scope":2409,"src":"5040:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2369,"name":"bytes","nodeType":"ElementaryTypeName","src":"5040:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2372,"mutability":"mutable","name":"value","nameLocation":"5075:5:11","nodeType":"VariableDeclaration","scope":2409,"src":"5067:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2371,"name":"uint256","nodeType":"ElementaryTypeName","src":"5067:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"errorMessage","nameLocation":"5104:12:11","nodeType":"VariableDeclaration","scope":2409,"src":"5090:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2373,"name":"string","nodeType":"ElementaryTypeName","src":"5090:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5006:116:11"},"returnParameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2409,"src":"5141:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2376,"name":"bytes","nodeType":"ElementaryTypeName","src":"5141:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5140:14:11"},"scope":2539,"src":"4976:446:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2425,"nodeType":"Block","src":"5699:97:11","statements":[{"expression":{"arguments":[{"id":2420,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"5735:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2421,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"5743:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5749:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2419,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2426,2455],"referencedDeclaration":2455,"src":"5716:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5716:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2418,"id":2424,"nodeType":"Return","src":"5709:80:11"}]},"documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"5428:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2426,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5608:18:11","nodeType":"FunctionDefinition","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"target","nameLocation":"5635:6:11","nodeType":"VariableDeclaration","scope":2426,"src":"5627:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2411,"name":"address","nodeType":"ElementaryTypeName","src":"5627:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2414,"mutability":"mutable","name":"data","nameLocation":"5656:4:11","nodeType":"VariableDeclaration","scope":2426,"src":"5643:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2413,"name":"bytes","nodeType":"ElementaryTypeName","src":"5643:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5626:35:11"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"5685:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2416,"name":"bytes","nodeType":"ElementaryTypeName","src":"5685:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5684:14:11"},"scope":2539,"src":"5599:197:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2454,"nodeType":"Block","src":"6138:168:11","statements":[{"assignments":[2439,2441],"declarations":[{"constant":false,"id":2439,"mutability":"mutable","name":"success","nameLocation":"6154:7:11","nodeType":"VariableDeclaration","scope":2454,"src":"6149:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2438,"name":"bool","nodeType":"ElementaryTypeName","src":"6149:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"returndata","nameLocation":"6176:10:11","nodeType":"VariableDeclaration","scope":2454,"src":"6163:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2440,"name":"bytes","nodeType":"ElementaryTypeName","src":"6163:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2446,"initialValue":{"arguments":[{"id":2444,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"6208:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2442,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"6190:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6190:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6190:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6148:65:11"},{"expression":{"arguments":[{"id":2448,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"6257:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2449,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"6265:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2450,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6274:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2451,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"6286:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2447,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"6230:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6230:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2437,"id":2453,"nodeType":"Return","src":"6223:76:11"}]},"documentation":{"id":2427,"nodeType":"StructuredDocumentation","src":"5802:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2455,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5989:18:11","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"target","nameLocation":"6025:6:11","nodeType":"VariableDeclaration","scope":2455,"src":"6017:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2428,"name":"address","nodeType":"ElementaryTypeName","src":"6017:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2431,"mutability":"mutable","name":"data","nameLocation":"6054:4:11","nodeType":"VariableDeclaration","scope":2455,"src":"6041:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2430,"name":"bytes","nodeType":"ElementaryTypeName","src":"6041:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2433,"mutability":"mutable","name":"errorMessage","nameLocation":"6082:12:11","nodeType":"VariableDeclaration","scope":2455,"src":"6068:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2432,"name":"string","nodeType":"ElementaryTypeName","src":"6068:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6007:93:11"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2455,"src":"6124:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2435,"name":"bytes","nodeType":"ElementaryTypeName","src":"6124:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6123:14:11"},"scope":2539,"src":"5980:326:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2493,"nodeType":"Block","src":"6788:434:11","statements":[{"condition":{"id":2469,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6802:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2491,"nodeType":"Block","src":"7158:58:11","statements":[{"expression":{"arguments":[{"id":2487,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"7180:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2488,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7192:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2486,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"7172:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7172:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2490,"nodeType":"ExpressionStatement","src":"7172:33:11"}]},"id":2492,"nodeType":"IfStatement","src":"6798:418:11","trueBody":{"id":2485,"nodeType":"Block","src":"6811:341:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2470,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6829:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6829:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6850:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6829:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2482,"nodeType":"IfStatement","src":"6825:286:11","trueBody":{"id":2481,"nodeType":"Block","src":"6853:258:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2476,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"7055:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2475,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"7044:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7044:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7064:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2474,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7036:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7036:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2480,"nodeType":"ExpressionStatement","src":"7036:60:11"}]}},{"expression":{"id":2483,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"7131:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2468,"id":2484,"nodeType":"Return","src":"7124:17:11"}]}}]},"documentation":{"id":2456,"nodeType":"StructuredDocumentation","src":"6312:277:11","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2494,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6603:26:11","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2458,"mutability":"mutable","name":"target","nameLocation":"6647:6:11","nodeType":"VariableDeclaration","scope":2494,"src":"6639:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2457,"name":"address","nodeType":"ElementaryTypeName","src":"6639:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2460,"mutability":"mutable","name":"success","nameLocation":"6668:7:11","nodeType":"VariableDeclaration","scope":2494,"src":"6663:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2459,"name":"bool","nodeType":"ElementaryTypeName","src":"6663:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"returndata","nameLocation":"6698:10:11","nodeType":"VariableDeclaration","scope":2494,"src":"6685:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2461,"name":"bytes","nodeType":"ElementaryTypeName","src":"6685:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"errorMessage","nameLocation":"6732:12:11","nodeType":"VariableDeclaration","scope":2494,"src":"6718:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2463,"name":"string","nodeType":"ElementaryTypeName","src":"6718:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6629:121:11"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2494,"src":"6774:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2466,"name":"bytes","nodeType":"ElementaryTypeName","src":"6774:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6773:14:11"},"scope":2539,"src":"6594:628:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2517,"nodeType":"Block","src":"7603:135:11","statements":[{"condition":{"id":2506,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"7617:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2515,"nodeType":"Block","src":"7674:58:11","statements":[{"expression":{"arguments":[{"id":2511,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"7696:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2512,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"7708:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2510,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"7688:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7688:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2514,"nodeType":"ExpressionStatement","src":"7688:33:11"}]},"id":2516,"nodeType":"IfStatement","src":"7613:119:11","trueBody":{"id":2509,"nodeType":"Block","src":"7626:42:11","statements":[{"expression":{"id":2507,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"7647:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2505,"id":2508,"nodeType":"Return","src":"7640:17:11"}]}}]},"documentation":{"id":2495,"nodeType":"StructuredDocumentation","src":"7228:210:11","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2518,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7452:16:11","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"success","nameLocation":"7483:7:11","nodeType":"VariableDeclaration","scope":2518,"src":"7478:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2496,"name":"bool","nodeType":"ElementaryTypeName","src":"7478:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"returndata","nameLocation":"7513:10:11","nodeType":"VariableDeclaration","scope":2518,"src":"7500:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2498,"name":"bytes","nodeType":"ElementaryTypeName","src":"7500:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"errorMessage","nameLocation":"7547:12:11","nodeType":"VariableDeclaration","scope":2518,"src":"7533:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2500,"name":"string","nodeType":"ElementaryTypeName","src":"7533:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7468:97:11"},"returnParameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2518,"src":"7589:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2503,"name":"bytes","nodeType":"ElementaryTypeName","src":"7589:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7588:14:11"},"scope":2539,"src":"7443:295:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2537,"nodeType":"Block","src":"7827:457:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2525,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"7903:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7903:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7923:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7903:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2535,"nodeType":"Block","src":"8233:45:11","statements":[{"expression":{"arguments":[{"id":2532,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"8254:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2531,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8247:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8247:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2534,"nodeType":"ExpressionStatement","src":"8247:20:11"}]},"id":2536,"nodeType":"IfStatement","src":"7899:379:11","trueBody":{"id":2530,"nodeType":"Block","src":"7926:301:11","statements":[{"AST":{"nodeType":"YulBlock","src":"8084:133:11","statements":[{"nodeType":"YulVariableDeclaration","src":"8102:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8131:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8125:5:11"},"nodeType":"YulFunctionCall","src":"8125:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8106:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8170:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8174:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8166:3:11"},"nodeType":"YulFunctionCall","src":"8166:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8187:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8159:6:11"},"nodeType":"YulFunctionCall","src":"8159:44:11"},"nodeType":"YulExpressionStatement","src":"8159:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2520,"isOffset":false,"isSlot":false,"src":"8131:10:11","valueSize":1},{"declaration":2520,"isOffset":false,"isSlot":false,"src":"8174:10:11","valueSize":1}],"id":2529,"nodeType":"InlineAssembly","src":"8075:142:11"}]}}]},"id":2538,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7753:7:11","nodeType":"FunctionDefinition","parameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"returndata","nameLocation":"7774:10:11","nodeType":"VariableDeclaration","scope":2538,"src":"7761:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2519,"name":"bytes","nodeType":"ElementaryTypeName","src":"7761:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"errorMessage","nameLocation":"7800:12:11","nodeType":"VariableDeclaration","scope":2538,"src":"7786:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2521,"name":"string","nodeType":"ElementaryTypeName","src":"7786:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7760:53:11"},"returnParameters":{"id":2524,"nodeType":"ParameterList","parameters":[],"src":"7827:0:11"},"scope":2539,"src":"7744:540:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2540,"src":"199:8087:11","usedErrors":[]}],"src":"106:8181:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ContextUpgradeable":[2581],"Initializable":[580]},"id":2582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2541,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2542,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2582,"sourceUnit":581,"src":"110:42:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2544,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"691:13:12"},"id":2545,"nodeType":"InheritanceSpecifier","src":"691:13:12"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2543,"nodeType":"StructuredDocumentation","src":"154:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2581,"linearizedBaseContracts":[2581,580],"name":"ContextUpgradeable","nameLocation":"669:18:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2550,"nodeType":"Block","src":"763:7:12","statements":[]},"id":2551,"implemented":true,"kind":"function","modifiers":[{"id":2548,"kind":"modifierInvocation","modifierName":{"id":2547,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"746:16:12"},"nodeType":"ModifierInvocation","src":"746:16:12"}],"name":"__Context_init","nameLocation":"720:14:12","nodeType":"FunctionDefinition","parameters":{"id":2546,"nodeType":"ParameterList","parameters":[],"src":"734:2:12"},"returnParameters":{"id":2549,"nodeType":"ParameterList","parameters":[],"src":"763:0:12"},"scope":2581,"src":"711:59:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"838:7:12","statements":[]},"id":2557,"implemented":true,"kind":"function","modifiers":[{"id":2554,"kind":"modifierInvocation","modifierName":{"id":2553,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"821:16:12"},"nodeType":"ModifierInvocation","src":"821:16:12"}],"name":"__Context_init_unchained","nameLocation":"785:24:12","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[],"src":"809:2:12"},"returnParameters":{"id":2555,"nodeType":"ParameterList","parameters":[],"src":"838:0:12"},"scope":2581,"src":"776:69:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2565,"nodeType":"Block","src":"912:34:12","statements":[{"expression":{"expression":{"id":2562,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"929:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2561,"id":2564,"nodeType":"Return","src":"922:17:12"}]},"id":2566,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:12","nodeType":"FunctionDefinition","parameters":{"id":2558,"nodeType":"ParameterList","parameters":[],"src":"869:2:12"},"returnParameters":{"id":2561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"903:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:12"},"scope":2581,"src":"850:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2574,"nodeType":"Block","src":"1019:32:12","statements":[{"expression":{"expression":{"id":2571,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1036:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2570,"id":2573,"nodeType":"Return","src":"1029:15:12"}]},"id":2575,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:12","nodeType":"FunctionDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[],"src":"969:2:12"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2575,"src":"1003:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2568,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:12"},"scope":2581,"src":"952:99:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2576,"nodeType":"StructuredDocumentation","src":"1057:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2580,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:12","nodeType":"VariableDeclaration","scope":2581,"src":"1316:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"length":{"hexValue":"3530","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2582,"src":"651:693:12","usedErrors":[]}],"src":"86:1259:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[2655]},"id":2656,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2583,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"112:311:13","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":2655,"linearizedBaseContracts":[2655],"name":"CountersUpgradeable","nameLocation":"432:19:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":2587,"members":[{"constant":false,"id":2586,"mutability":"mutable","name":"_value","nameLocation":"805:6:13","nodeType":"VariableDeclaration","scope":2587,"src":"797:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:13","nodeType":"StructDefinition","scope":2655,"src":"458:374:13","visibility":"public"},{"body":{"id":2598,"nodeType":"Block","src":"912:38:13","statements":[{"expression":{"expression":{"id":2595,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"929:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"929:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2594,"id":2597,"nodeType":"Return","src":"922:21:13"}]},"id":2599,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:13","nodeType":"FunctionDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2590,"mutability":"mutable","name":"counter","nameLocation":"871:7:13","nodeType":"VariableDeclaration","scope":2599,"src":"855:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2589,"nodeType":"UserDefinedTypeName","pathNode":{"id":2588,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"855:7:13"},"referencedDeclaration":2587,"src":"855:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:13"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2599,"src":"903:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:13"},"scope":2655,"src":"838:112:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2612,"nodeType":"Block","src":"1009:70:13","statements":[{"id":2611,"nodeType":"UncheckedBlock","src":"1019:54:13","statements":[{"expression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2605,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"1043:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2607,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"1043:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2610,"nodeType":"ExpressionStatement","src":"1043:19:13"}]}]},"id":2613,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:13","nodeType":"FunctionDefinition","parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2602,"mutability":"mutable","name":"counter","nameLocation":"991:7:13","nodeType":"VariableDeclaration","scope":2613,"src":"975:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2601,"nodeType":"UserDefinedTypeName","pathNode":{"id":2600,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"975:7:13"},"referencedDeclaration":2587,"src":"975:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:13"},"returnParameters":{"id":2604,"nodeType":"ParameterList","parameters":[],"src":"1009:0:13"},"scope":2655,"src":"956:123:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2640,"nodeType":"Block","src":"1138:176:13","statements":[{"assignments":[2620],"declarations":[{"constant":false,"id":2620,"mutability":"mutable","name":"value","nameLocation":"1156:5:13","nodeType":"VariableDeclaration","scope":2640,"src":"1148:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2623,"initialValue":{"expression":{"id":2621,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1164:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2622,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"1164:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"1196:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":2624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1188:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2630,"nodeType":"ExpressionStatement","src":"1188:49:13"},{"id":2639,"nodeType":"UncheckedBlock","src":"1247:61:13","statements":[{"expression":{"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2631,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1271:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"1271:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"1288:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2638,"nodeType":"ExpressionStatement","src":"1271:26:13"}]}]},"id":2641,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:13","nodeType":"FunctionDefinition","parameters":{"id":2617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2616,"mutability":"mutable","name":"counter","nameLocation":"1120:7:13","nodeType":"VariableDeclaration","scope":2641,"src":"1104:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2615,"nodeType":"UserDefinedTypeName","pathNode":{"id":2614,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"1104:7:13"},"referencedDeclaration":2587,"src":"1104:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:13"},"returnParameters":{"id":2618,"nodeType":"ParameterList","parameters":[],"src":"1138:0:13"},"scope":2655,"src":"1085:229:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2653,"nodeType":"Block","src":"1369:35:13","statements":[{"expression":{"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2647,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"1379:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"1379:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2652,"nodeType":"ExpressionStatement","src":"1379:18:13"}]},"id":2654,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:13","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"counter","nameLocation":"1351:7:13","nodeType":"VariableDeclaration","scope":2654,"src":"1335:23:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2643,"nodeType":"UserDefinedTypeName","pathNode":{"id":2642,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"1335:7:13"},"referencedDeclaration":2587,"src":"1335:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:13"},"returnParameters":{"id":2646,"nodeType":"ParameterList","parameters":[],"src":"1369:0:13"},"scope":2655,"src":"1320:84:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2656,"src":"424:982:13","usedErrors":[]}],"src":"87:1320:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3751],"StringsUpgradeable":[2830]},"id":2831,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2657,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2658,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2831,"sourceUnit":3752,"src":"131:36:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2659,"nodeType":"StructuredDocumentation","src":"169:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":2830,"linearizedBaseContracts":[2830],"name":"StringsUpgradeable","nameLocation":"212:18:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2662,"mutability":"constant","name":"_SYMBOLS","nameLocation":"262:8:14","nodeType":"VariableDeclaration","scope":2830,"src":"237:54:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2660,"name":"bytes16","nodeType":"ElementaryTypeName","src":"237:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"273:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2665,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"320:15:14","nodeType":"VariableDeclaration","scope":2830,"src":"297:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2663,"name":"uint8","nodeType":"ElementaryTypeName","src":"297:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"338:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2712,"nodeType":"Block","src":"513:636:14","statements":[{"id":2711,"nodeType":"UncheckedBlock","src":"523:620:14","statements":[{"assignments":[2674],"declarations":[{"constant":false,"id":2674,"mutability":"mutable","name":"length","nameLocation":"555:6:14","nodeType":"VariableDeclaration","scope":2711,"src":"547:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"547:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2681,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"586:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2675,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"564:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3751_$","typeString":"type(library MathUpgradeable)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"564:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"564:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"595:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"564:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"547:49:14"},{"assignments":[2683],"declarations":[{"constant":false,"id":2683,"mutability":"mutable","name":"buffer","nameLocation":"624:6:14","nodeType":"VariableDeclaration","scope":2711,"src":"610:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2682,"name":"string","nodeType":"ElementaryTypeName","src":"610:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2688,"initialValue":{"arguments":[{"id":2686,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"644:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"633:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2684,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"633:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"610:41:14"},{"assignments":[2690],"declarations":[{"constant":false,"id":2690,"mutability":"mutable","name":"ptr","nameLocation":"673:3:14","nodeType":"VariableDeclaration","scope":2711,"src":"665:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2689,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2691,"nodeType":"VariableDeclarationStatement","src":"665:11:14"},{"AST":{"nodeType":"YulBlock","src":"746:67:14","statements":[{"nodeType":"YulAssignment","src":"764:35:14","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"775:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"787:2:14","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"791:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"783:3:14"},"nodeType":"YulFunctionCall","src":"783:15:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"771:3:14"},"nodeType":"YulFunctionCall","src":"771:28:14"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"764:3:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2683,"isOffset":false,"isSlot":false,"src":"775:6:14","valueSize":1},{"declaration":2674,"isOffset":false,"isSlot":false,"src":"791:6:14","valueSize":1},{"declaration":2690,"isOffset":false,"isSlot":false,"src":"764:3:14","valueSize":1}],"id":2692,"nodeType":"InlineAssembly","src":"737:76:14"},{"body":{"id":2707,"nodeType":"Block","src":"839:267:14","statements":[{"expression":{"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"857:5:14","subExpression":{"id":2694,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"857:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2696,"nodeType":"ExpressionStatement","src":"857:5:14"},{"AST":{"nodeType":"YulBlock","src":"940:84:14","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"970:3:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"984:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"991:2:14","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"980:3:14"},"nodeType":"YulFunctionCall","src":"980:14:14"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"996:8:14"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"975:4:14"},"nodeType":"YulFunctionCall","src":"975:30:14"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"962:7:14"},"nodeType":"YulFunctionCall","src":"962:44:14"},"nodeType":"YulExpressionStatement","src":"962:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2662,"isOffset":false,"isSlot":false,"src":"996:8:14","valueSize":1},{"declaration":2690,"isOffset":false,"isSlot":false,"src":"970:3:14","valueSize":1},{"declaration":2668,"isOffset":false,"isSlot":false,"src":"984:5:14","valueSize":1}],"id":2697,"nodeType":"InlineAssembly","src":"931:93:14"},{"expression":{"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"1041:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1041:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ExpressionStatement","src":"1041:11:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"1074:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1083:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1074:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2706,"nodeType":"IfStatement","src":"1070:21:14","trueBody":{"id":2705,"nodeType":"Break","src":"1086:5:14"}}]},"condition":{"hexValue":"74727565","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"833:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2708,"nodeType":"WhileStatement","src":"826:280:14"},{"expression":{"id":2709,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"1126:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2672,"id":2710,"nodeType":"Return","src":"1119:13:14"}]}]},"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"347:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2713,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"451:8:14","nodeType":"FunctionDefinition","parameters":{"id":2669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2668,"mutability":"mutable","name":"value","nameLocation":"468:5:14","nodeType":"VariableDeclaration","scope":2713,"src":"460:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2667,"name":"uint256","nodeType":"ElementaryTypeName","src":"460:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"459:15:14"},"returnParameters":{"id":2672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2713,"src":"498:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2670,"name":"string","nodeType":"ElementaryTypeName","src":"498:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"497:15:14"},"scope":2830,"src":"442:707:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2732,"nodeType":"Block","src":"1328:111:14","statements":[{"id":2731,"nodeType":"UncheckedBlock","src":"1338:95:14","statements":[{"expression":{"arguments":[{"id":2722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"1381:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"1411:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2723,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"1388:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3751_$","typeString":"type(library MathUpgradeable)"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3711,"src":"1388:22:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1388:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1420:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1388:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2721,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2733,2809,2829],"referencedDeclaration":2809,"src":"1369:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1369:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2720,"id":2730,"nodeType":"Return","src":"1362:60:14"}]}]},"documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"1155:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2733,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1263:11:14","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2716,"mutability":"mutable","name":"value","nameLocation":"1283:5:14","nodeType":"VariableDeclaration","scope":2733,"src":"1275:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"1275:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1274:15:14"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2733,"src":"1313:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2718,"name":"string","nodeType":"ElementaryTypeName","src":"1313:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1312:15:14"},"scope":2830,"src":"1254:185:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2808,"nodeType":"Block","src":"1652:347:14","statements":[{"assignments":[2744],"declarations":[{"constant":false,"id":2744,"mutability":"mutable","name":"buffer","nameLocation":"1675:6:14","nodeType":"VariableDeclaration","scope":2808,"src":"1662:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2743,"name":"bytes","nodeType":"ElementaryTypeName","src":"1662:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2753,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1694:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2748,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2738,"src":"1698:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1694:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1707:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1694:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1684:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2745,"name":"bytes","nodeType":"ElementaryTypeName","src":"1688:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1684:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1662:47:14"},{"expression":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2754,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"1719:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2756,"indexExpression":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1726:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1719:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1731:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1719:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2759,"nodeType":"ExpressionStatement","src":"1719:15:14"},{"expression":{"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2760,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"1744:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2762,"indexExpression":{"hexValue":"31","id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1751:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1744:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1756:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1744:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2765,"nodeType":"ExpressionStatement","src":"1744:15:14"},{"body":{"id":2794,"nodeType":"Block","src":"1814:83:14","statements":[{"expression":{"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2780,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"1828:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2782,"indexExpression":{"id":2781,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"1835:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1828:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2783,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"1840:8:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2787,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2784,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"1849:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1849:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1840:21:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1828:33:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2789,"nodeType":"ExpressionStatement","src":"1828:33:14"},{"expression":{"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"1875:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1885:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1875:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2793,"nodeType":"ExpressionStatement","src":"1875:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2774,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"1802:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1806:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1802:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2795,"initializationExpression":{"assignments":[2767],"declarations":[{"constant":false,"id":2767,"mutability":"mutable","name":"i","nameLocation":"1782:1:14","nodeType":"VariableDeclaration","scope":2795,"src":"1774:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"1774:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2773,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1786:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2769,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2738,"src":"1790:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1786:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1799:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1786:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1774:26:14"},"loopExpression":{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1809:3:14","subExpression":{"id":2777,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"1811:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"1809:3:14"},"nodeType":"ForStatement","src":"1769:128:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"1914:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1923:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1914:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1926:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2796,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1906:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1906:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2802,"nodeType":"ExpressionStatement","src":"1906:55:14"},{"expression":{"arguments":[{"id":2805,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"1985:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1978:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2803,"name":"string","nodeType":"ElementaryTypeName","src":"1978:6:14","typeDescriptions":{}}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1978:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2742,"id":2807,"nodeType":"Return","src":"1971:21:14"}]},"documentation":{"id":2734,"nodeType":"StructuredDocumentation","src":"1445:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2809,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1571:11:14","nodeType":"FunctionDefinition","parameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"value","nameLocation":"1591:5:14","nodeType":"VariableDeclaration","scope":2809,"src":"1583:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2735,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"length","nameLocation":"1606:6:14","nodeType":"VariableDeclaration","scope":2809,"src":"1598:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1598:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1582:31:14"},"returnParameters":{"id":2742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2809,"src":"1637:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2740,"name":"string","nodeType":"ElementaryTypeName","src":"1637:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1636:15:14"},"scope":2830,"src":"1562:437:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2828,"nodeType":"Block","src":"2224:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2822,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"2269:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2261:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2820,"name":"uint160","nodeType":"ElementaryTypeName","src":"2261:7:14","typeDescriptions":{}}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2253:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:14","typeDescriptions":{}}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2253:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2825,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"2277:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2817,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2733,2809,2829],"referencedDeclaration":2809,"src":"2241:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2241:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2816,"id":2827,"nodeType":"Return","src":"2234:59:14"}]},"documentation":{"id":2810,"nodeType":"StructuredDocumentation","src":"2005:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2829,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2160:11:14","nodeType":"FunctionDefinition","parameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"addr","nameLocation":"2180:4:14","nodeType":"VariableDeclaration","scope":2829,"src":"2172:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2811,"name":"address","nodeType":"ElementaryTypeName","src":"2172:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2171:14:14"},"returnParameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2829,"src":"2209:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2814,"name":"string","nodeType":"ElementaryTypeName","src":"2209:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2208:15:14"},"scope":2830,"src":"2151:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2831,"src":"204:2098:14","usedErrors":[]}],"src":"106:2197:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2539],"ERC165Upgradeable":[2874],"IERC165Upgradeable":[2886],"Initializable":[580]},"id":2875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2832,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":2833,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2875,"sourceUnit":2887,"src":"124:34:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2834,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2875,"sourceUnit":581,"src":"159:45:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2836,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"822:13:15"},"id":2837,"nodeType":"InheritanceSpecifier","src":"822:13:15"},{"baseName":{"id":2838,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"837:18:15"},"id":2839,"nodeType":"InheritanceSpecifier","src":"837:18:15"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2835,"nodeType":"StructuredDocumentation","src":"206:576:15","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2874,"linearizedBaseContracts":[2874,2886,580],"name":"ERC165Upgradeable","nameLocation":"801:17:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2844,"nodeType":"Block","src":"913:7:15","statements":[]},"id":2845,"implemented":true,"kind":"function","modifiers":[{"id":2842,"kind":"modifierInvocation","modifierName":{"id":2841,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"896:16:15"},"nodeType":"ModifierInvocation","src":"896:16:15"}],"name":"__ERC165_init","nameLocation":"871:13:15","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[],"src":"884:2:15"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[],"src":"913:0:15"},"scope":2874,"src":"862:58:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2850,"nodeType":"Block","src":"987:7:15","statements":[]},"id":2851,"implemented":true,"kind":"function","modifiers":[{"id":2848,"kind":"modifierInvocation","modifierName":{"id":2847,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":525,"src":"970:16:15"},"nodeType":"ModifierInvocation","src":"970:16:15"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:15","nodeType":"FunctionDefinition","parameters":{"id":2846,"nodeType":"ParameterList","parameters":[],"src":"958:2:15"},"returnParameters":{"id":2849,"nodeType":"ParameterList","parameters":[],"src":"987:0:15"},"scope":2874,"src":"926:68:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2885],"body":{"id":2867,"nodeType":"Block","src":"1151:75:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2860,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"1168:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2862,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"1188:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$2886_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$2886_$","typeString":"type(contract IERC165Upgradeable)"}],"id":2861,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1183:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$2886","typeString":"type(contract IERC165Upgradeable)"}},"id":2864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2859,"id":2866,"nodeType":"Return","src":"1161:58:15"}]},"documentation":{"id":2852,"nodeType":"StructuredDocumentation","src":"999:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2868,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:15","nodeType":"FunctionDefinition","overrides":{"id":2856,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:15"},"parameters":{"id":2855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:15","nodeType":"VariableDeclaration","scope":2868,"src":"1087:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2853,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:15"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2868,"src":"1145:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2857,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:15"},"scope":2874,"src":"1060:166:15","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":2869,"nodeType":"StructuredDocumentation","src":"1232:254:15","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2873,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:15","nodeType":"VariableDeclaration","scope":2874,"src":"1491:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2872,"length":{"hexValue":"3530","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2875,"src":"783:736:15","usedErrors":[]}],"src":"99:1421:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[2886]},"id":2887,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2876,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2877,"nodeType":"StructuredDocumentation","src":"125:279:16","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2886,"linearizedBaseContracts":[2886],"name":"IERC165Upgradeable","nameLocation":"415:18:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"440:340:16","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2885,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:16","nodeType":"FunctionDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2880,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:16","nodeType":"VariableDeclaration","scope":2885,"src":"812:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2879,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:16"},"returnParameters":{"id":2884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2885,"src":"855:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2882,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:16"},"scope":2886,"src":"785:76:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2887,"src":"405:458:16","usedErrors":[]}],"src":"100:764:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3751]},"id":3752,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2888,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2889,"nodeType":"StructuredDocumentation","src":"133:73:17","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3751,"linearizedBaseContracts":[3751],"name":"MathUpgradeable","nameLocation":"215:15:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":2893,"members":[{"id":2890,"name":"Down","nameLocation":"261:4:17","nodeType":"EnumValue","src":"261:4:17"},{"id":2891,"name":"Up","nameLocation":"303:2:17","nodeType":"EnumValue","src":"303:2:17"},{"id":2892,"name":"Zero","nameLocation":"334:4:17","nodeType":"EnumValue","src":"334:4:17"}],"name":"Rounding","nameLocation":"242:8:17","nodeType":"EnumDefinition","src":"237:122:17"},{"body":{"id":2910,"nodeType":"Block","src":"496:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"513:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2904,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"517:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"513:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2907,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"525:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"513:13:17","trueExpression":{"id":2906,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"521:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2902,"id":2909,"nodeType":"Return","src":"506:20:17"}]},"documentation":{"id":2894,"nodeType":"StructuredDocumentation","src":"365:59:17","text":" @dev Returns the largest of two numbers."},"id":2911,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"438:3:17","nodeType":"FunctionDefinition","parameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"a","nameLocation":"450:1:17","nodeType":"VariableDeclaration","scope":2911,"src":"442:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"442:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2898,"mutability":"mutable","name":"b","nameLocation":"461:1:17","nodeType":"VariableDeclaration","scope":2911,"src":"453:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"453:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"441:22:17"},"returnParameters":{"id":2902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"487:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2900,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"486:9:17"},"scope":3751,"src":"429:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2928,"nodeType":"Block","src":"671:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"688:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"692:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"688:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"700:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"688:13:17","trueExpression":{"id":2924,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"696:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2920,"id":2927,"nodeType":"Return","src":"681:20:17"}]},"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"539:60:17","text":" @dev Returns the smallest of two numbers."},"id":2929,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"613:3:17","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"a","nameLocation":"625:1:17","nodeType":"VariableDeclaration","scope":2929,"src":"617:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"617:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"b","nameLocation":"636:1:17","nodeType":"VariableDeclaration","scope":2929,"src":"628:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"628:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"616:22:17"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2929,"src":"662:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"661:9:17"},"scope":3751,"src":"604:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2951,"nodeType":"Block","src":"892:82:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"947:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2940,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"951:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"947:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"946:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"957:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2944,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"961:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"957:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"956:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"966:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"956:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"946:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2938,"id":2950,"nodeType":"Return","src":"939:28:17"}]},"documentation":{"id":2930,"nodeType":"StructuredDocumentation","src":"714:102:17","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2952,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"830:7:17","nodeType":"FunctionDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"a","nameLocation":"846:1:17","nodeType":"VariableDeclaration","scope":2952,"src":"838:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2931,"name":"uint256","nodeType":"ElementaryTypeName","src":"838:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"b","nameLocation":"857:1:17","nodeType":"VariableDeclaration","scope":2952,"src":"849:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"837:22:17"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2952,"src":"883:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"883:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"882:9:17"},"scope":3751,"src":"821:153:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2976,"nodeType":"Block","src":"1244:123:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"1332:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1337:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1332:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2966,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"1346:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1346:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2969,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1345:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2970,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"1355:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1345:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1359:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1345:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1332:28:17","trueExpression":{"hexValue":"30","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1341:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2961,"id":2975,"nodeType":"Return","src":"1325:35:17"}]},"documentation":{"id":2953,"nodeType":"StructuredDocumentation","src":"980:188:17","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2977,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1182:7:17","nodeType":"FunctionDefinition","parameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"a","nameLocation":"1198:1:17","nodeType":"VariableDeclaration","scope":2977,"src":"1190:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1190:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"b","nameLocation":"1209:1:17","nodeType":"VariableDeclaration","scope":2977,"src":"1201:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2956,"name":"uint256","nodeType":"ElementaryTypeName","src":"1201:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1189:22:17"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2977,"src":"1235:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1235:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1234:9:17"},"scope":3751,"src":"1173:194:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3098,"nodeType":"Block","src":"1811:3797:17","statements":[{"id":3097,"nodeType":"UncheckedBlock","src":"1821:3781:17","statements":[{"assignments":[2990],"declarations":[{"constant":false,"id":2990,"mutability":"mutable","name":"prod0","nameLocation":"2150:5:17","nodeType":"VariableDeclaration","scope":3097,"src":"2142:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2991,"nodeType":"VariableDeclarationStatement","src":"2142:13:17"},{"assignments":[2993],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"prod1","nameLocation":"2222:5:17","nodeType":"VariableDeclaration","scope":3097,"src":"2214:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2992,"name":"uint256","nodeType":"ElementaryTypeName","src":"2214:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2994,"nodeType":"VariableDeclarationStatement","src":"2214:13:17"},{"AST":{"nodeType":"YulBlock","src":"2294:157:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2312:30:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2329:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"2332:1:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2339:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2335:3:17"},"nodeType":"YulFunctionCall","src":"2335:6:17"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2322:6:17"},"nodeType":"YulFunctionCall","src":"2322:20:17"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2316:2:17","type":""}]},{"nodeType":"YulAssignment","src":"2359:18:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2372:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"2375:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2368:3:17"},"nodeType":"YulFunctionCall","src":"2368:9:17"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2359:5:17"}]},{"nodeType":"YulAssignment","src":"2394:43:17","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2411:2:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"2415:5:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2407:3:17"},"nodeType":"YulFunctionCall","src":"2407:14:17"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2426:2:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"2430:5:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2423:2:17"},"nodeType":"YulFunctionCall","src":"2423:13:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2403:3:17"},"nodeType":"YulFunctionCall","src":"2403:34:17"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2394:5:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2990,"isOffset":false,"isSlot":false,"src":"2359:5:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"2415:5:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"2430:5:17","valueSize":1},{"declaration":2993,"isOffset":false,"isSlot":false,"src":"2394:5:17","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"2329:1:17","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"2372:1:17","valueSize":1},{"declaration":2982,"isOffset":false,"isSlot":false,"src":"2332:1:17","valueSize":1},{"declaration":2982,"isOffset":false,"isSlot":false,"src":"2375:1:17","valueSize":1}],"id":2995,"nodeType":"InlineAssembly","src":"2285:166:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2996,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2532:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2541:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2532:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3004,"nodeType":"IfStatement","src":"2528:75:17","trueBody":{"id":3003,"nodeType":"Block","src":"2544:59:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2569:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3000,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2577:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2569:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2988,"id":3002,"nodeType":"Return","src":"2562:26:17"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3006,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2713:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3007,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2727:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2713:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2705:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2705:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3010,"nodeType":"ExpressionStatement","src":"2705:28:17"},{"assignments":[3012],"declarations":[{"constant":false,"id":3012,"mutability":"mutable","name":"remainder","nameLocation":"2997:9:17","nodeType":"VariableDeclaration","scope":3097,"src":"2989:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2989:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3013,"nodeType":"VariableDeclarationStatement","src":"2989:17:17"},{"AST":{"nodeType":"YulBlock","src":"3029:291:17","statements":[{"nodeType":"YulAssignment","src":"3098:38:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3118:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"3121:1:17"},{"name":"denominator","nodeType":"YulIdentifier","src":"3124:11:17"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3111:6:17"},"nodeType":"YulFunctionCall","src":"3111:25:17"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3098:9:17"}]},{"nodeType":"YulAssignment","src":"3218:41:17","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3231:5:17"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3241:9:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"3252:5:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3238:2:17"},"nodeType":"YulFunctionCall","src":"3238:20:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3227:3:17"},"nodeType":"YulFunctionCall","src":"3227:32:17"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3218:5:17"}]},{"nodeType":"YulAssignment","src":"3276:30:17","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3289:5:17"},{"name":"remainder","nodeType":"YulIdentifier","src":"3296:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3285:3:17"},"nodeType":"YulFunctionCall","src":"3285:21:17"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3276:5:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3124:11:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"3252:5:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"3276:5:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"3289:5:17","valueSize":1},{"declaration":2993,"isOffset":false,"isSlot":false,"src":"3218:5:17","valueSize":1},{"declaration":2993,"isOffset":false,"isSlot":false,"src":"3231:5:17","valueSize":1},{"declaration":3012,"isOffset":false,"isSlot":false,"src":"3098:9:17","valueSize":1},{"declaration":3012,"isOffset":false,"isSlot":false,"src":"3241:9:17","valueSize":1},{"declaration":3012,"isOffset":false,"isSlot":false,"src":"3296:9:17","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"3118:1:17","valueSize":1},{"declaration":2982,"isOffset":false,"isSlot":false,"src":"3121:1:17","valueSize":1}],"id":3014,"nodeType":"InlineAssembly","src":"3020:300:17"},{"assignments":[3016],"declarations":[{"constant":false,"id":3016,"mutability":"mutable","name":"twos","nameLocation":"3635:4:17","nodeType":"VariableDeclaration","scope":3097,"src":"3627:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3015,"name":"uint256","nodeType":"ElementaryTypeName","src":"3627:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3024,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3017,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"3642:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3657:12:17","subExpression":{"id":3018,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"3658:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3672:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3657:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3656:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3642:32:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3627:47:17"},{"AST":{"nodeType":"YulBlock","src":"3697:362:17","statements":[{"nodeType":"YulAssignment","src":"3762:37:17","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3781:11:17"},{"name":"twos","nodeType":"YulIdentifier","src":"3794:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3777:3:17"},"nodeType":"YulFunctionCall","src":"3777:22:17"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3762:11:17"}]},{"nodeType":"YulAssignment","src":"3866:25:17","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3879:5:17"},{"name":"twos","nodeType":"YulIdentifier","src":"3886:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3875:3:17"},"nodeType":"YulFunctionCall","src":"3875:16:17"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3866:5:17"}]},{"nodeType":"YulAssignment","src":"4006:39:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4026:1:17","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4029:4:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4022:3:17"},"nodeType":"YulFunctionCall","src":"4022:12:17"},{"name":"twos","nodeType":"YulIdentifier","src":"4036:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4018:3:17"},"nodeType":"YulFunctionCall","src":"4018:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4043:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4014:3:17"},"nodeType":"YulFunctionCall","src":"4014:31:17"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4006:4:17"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3762:11:17","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3781:11:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"3866:5:17","valueSize":1},{"declaration":2990,"isOffset":false,"isSlot":false,"src":"3879:5:17","valueSize":1},{"declaration":3016,"isOffset":false,"isSlot":false,"src":"3794:4:17","valueSize":1},{"declaration":3016,"isOffset":false,"isSlot":false,"src":"3886:4:17","valueSize":1},{"declaration":3016,"isOffset":false,"isSlot":false,"src":"4006:4:17","valueSize":1},{"declaration":3016,"isOffset":false,"isSlot":false,"src":"4029:4:17","valueSize":1},{"declaration":3016,"isOffset":false,"isSlot":false,"src":"4036:4:17","valueSize":1}],"id":3025,"nodeType":"InlineAssembly","src":"3688:371:17"},{"expression":{"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3026,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"4125:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"4134:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3028,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"4142:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4134:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4125:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3031,"nodeType":"ExpressionStatement","src":"4125:21:17"},{"assignments":[3033],"declarations":[{"constant":false,"id":3033,"mutability":"mutable","name":"inverse","nameLocation":"4472:7:17","nodeType":"VariableDeclaration","scope":3097,"src":"4464:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3032,"name":"uint256","nodeType":"ElementaryTypeName","src":"4464:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4483:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4487:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3037,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4482:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4502:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4482:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4464:39:17"},{"expression":{"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3041,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4720:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4731:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3043,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4735:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3044,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4749:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4735:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4731:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4720:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3048,"nodeType":"ExpressionStatement","src":"4720:36:17"},{"expression":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3049,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4789:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4800:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3051,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4804:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3052,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4818:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4804:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4800:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4789:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3056,"nodeType":"ExpressionStatement","src":"4789:36:17"},{"expression":{"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3057,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4859:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4870:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3059,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4874:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3060,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4888:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4874:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4870:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4859:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3064,"nodeType":"ExpressionStatement","src":"4859:36:17"},{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3065,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4929:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4940:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3067,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4944:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3068,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4958:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4944:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4940:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4929:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3072,"nodeType":"ExpressionStatement","src":"4929:36:17"},{"expression":{"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3073,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"4999:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5010:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"5014:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3076,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"5028:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5010:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4999:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3080,"nodeType":"ExpressionStatement","src":"4999:36:17"},{"expression":{"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3081,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"5070:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5081:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3083,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"5085:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3084,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"5099:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5085:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5081:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5070:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3088,"nodeType":"ExpressionStatement","src":"5070:36:17"},{"expression":{"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"5540:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3090,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"5549:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3091,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"5557:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5549:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5540:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3094,"nodeType":"ExpressionStatement","src":"5540:24:17"},{"expression":{"id":3095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"5585:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2988,"id":3096,"nodeType":"Return","src":"5578:13:17"}]}]},"documentation":{"id":2978,"nodeType":"StructuredDocumentation","src":"1373:305:17","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3099,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1692:6:17","nodeType":"FunctionDefinition","parameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"x","nameLocation":"1716:1:17","nodeType":"VariableDeclaration","scope":3099,"src":"1708:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"1708:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2982,"mutability":"mutable","name":"y","nameLocation":"1735:1:17","nodeType":"VariableDeclaration","scope":3099,"src":"1727:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1727:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"denominator","nameLocation":"1754:11:17","nodeType":"VariableDeclaration","scope":3099,"src":"1746:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1746:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1698:73:17"},"returnParameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"result","nameLocation":"1803:6:17","nodeType":"VariableDeclaration","scope":3099,"src":"1795:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1795:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1794:16:17"},"scope":3751,"src":"1683:3925:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3142,"nodeType":"Block","src":"5888:189:17","statements":[{"assignments":[3115],"declarations":[{"constant":false,"id":3115,"mutability":"mutable","name":"result","nameLocation":"5906:6:17","nodeType":"VariableDeclaration","scope":3142,"src":"5898:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3114,"name":"uint256","nodeType":"ElementaryTypeName","src":"5898:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3121,"initialValue":{"arguments":[{"id":3117,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5922:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3118,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"5925:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3119,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"5928:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3116,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3099,3143],"referencedDeclaration":3099,"src":"5915:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5915:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5898:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3122,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"5954:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3123,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"5966:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2893_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"5966:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"src":"5954:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3127,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"5988:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3128,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"5991:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3129,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"5994:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3126,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5981:6:17","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5981:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6009:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5981:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5954:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3139,"nodeType":"IfStatement","src":"5950:98:17","trueBody":{"id":3138,"nodeType":"Block","src":"6012:36:17","statements":[{"expression":{"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3134,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"6026:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6036:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6026:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3137,"nodeType":"ExpressionStatement","src":"6026:11:17"}]}},{"expression":{"id":3140,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"6064:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3113,"id":3141,"nodeType":"Return","src":"6057:13:17"}]},"documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"5614:121:17","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3143,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5749:6:17","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3102,"mutability":"mutable","name":"x","nameLocation":"5773:1:17","nodeType":"VariableDeclaration","scope":3143,"src":"5765:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"5765:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3104,"mutability":"mutable","name":"y","nameLocation":"5792:1:17","nodeType":"VariableDeclaration","scope":3143,"src":"5784:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3103,"name":"uint256","nodeType":"ElementaryTypeName","src":"5784:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3106,"mutability":"mutable","name":"denominator","nameLocation":"5811:11:17","nodeType":"VariableDeclaration","scope":3143,"src":"5803:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3105,"name":"uint256","nodeType":"ElementaryTypeName","src":"5803:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3109,"mutability":"mutable","name":"rounding","nameLocation":"5841:8:17","nodeType":"VariableDeclaration","scope":3143,"src":"5832:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3108,"nodeType":"UserDefinedTypeName","pathNode":{"id":3107,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"5832:8:17"},"referencedDeclaration":2893,"src":"5832:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5755:100:17"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3143,"src":"5879:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint256","nodeType":"ElementaryTypeName","src":"5879:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5878:9:17"},"scope":3751,"src":"5740:337:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3254,"nodeType":"Block","src":"6353:1585:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"6367:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6372:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6367:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3157,"nodeType":"IfStatement","src":"6363:45:17","trueBody":{"id":3156,"nodeType":"Block","src":"6375:33:17","statements":[{"expression":{"hexValue":"30","id":3154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6396:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3150,"id":3155,"nodeType":"Return","src":"6389:8:17"}]}},{"assignments":[3159],"declarations":[{"constant":false,"id":3159,"mutability":"mutable","name":"result","nameLocation":"7095:6:17","nodeType":"VariableDeclaration","scope":3254,"src":"7087:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3158,"name":"uint256","nodeType":"ElementaryTypeName","src":"7087:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3168,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7104:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7115:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3161,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3423,3459],"referencedDeclaration":3423,"src":"7110:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7110:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7121:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7110:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7109:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7104:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7087:36:17"},{"id":3253,"nodeType":"UncheckedBlock","src":"7524:408:17","statements":[{"expression":{"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7548:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7558:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7567:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7571:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7567:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7558:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3175,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7557:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7582:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7557:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7548:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3179,"nodeType":"ExpressionStatement","src":"7548:35:17"},{"expression":{"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7597:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7607:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7616:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7620:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7616:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7607:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3186,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7606:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7631:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7606:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7597:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3190,"nodeType":"ExpressionStatement","src":"7597:35:17"},{"expression":{"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7646:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7656:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3193,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7665:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7669:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7665:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7656:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7655:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7680:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7655:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7646:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3201,"nodeType":"ExpressionStatement","src":"7646:35:17"},{"expression":{"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7695:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7705:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3204,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7714:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7718:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7714:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3208,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7704:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7729:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7704:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7695:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3212,"nodeType":"ExpressionStatement","src":"7695:35:17"},{"expression":{"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7744:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7754:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3215,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7763:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7767:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7763:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7754:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3219,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7753:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7778:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7753:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7744:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3223,"nodeType":"ExpressionStatement","src":"7744:35:17"},{"expression":{"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7793:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7803:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7812:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7816:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"nodeType":"ExpressionStatement","src":"7793:35:17"},{"expression":{"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7842:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3236,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7852:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3237,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7861:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7865:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3245,"nodeType":"ExpressionStatement","src":"7842:35:17"},{"expression":{"arguments":[{"id":3247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7902:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3248,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"7910:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3249,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"7914:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3246,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"7898:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7898:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3150,"id":3252,"nodeType":"Return","src":"7891:30:17"}]}]},"documentation":{"id":3144,"nodeType":"StructuredDocumentation","src":"6083:208:17","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3255,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6305:4:17","nodeType":"FunctionDefinition","parameters":{"id":3147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3146,"mutability":"mutable","name":"a","nameLocation":"6318:1:17","nodeType":"VariableDeclaration","scope":3255,"src":"6310:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3145,"name":"uint256","nodeType":"ElementaryTypeName","src":"6310:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6309:11:17"},"returnParameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3255,"src":"6344:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3148,"name":"uint256","nodeType":"ElementaryTypeName","src":"6344:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6343:9:17"},"scope":3751,"src":"6296:1642:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3290,"nodeType":"Block","src":"8114:161:17","statements":[{"id":3289,"nodeType":"UncheckedBlock","src":"8124:145:17","statements":[{"assignments":[3267],"declarations":[{"constant":false,"id":3267,"mutability":"mutable","name":"result","nameLocation":"8156:6:17","nodeType":"VariableDeclaration","scope":3289,"src":"8148:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"8148:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3271,"initialValue":{"arguments":[{"id":3269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"8170:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3268,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3255,3291],"referencedDeclaration":3255,"src":"8165:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8165:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8148:24:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"8193:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"8203:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3274,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"8215:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2893_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"8215:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"src":"8203:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"8230:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"8239:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8230:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"8248:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8230:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8203:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8256:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8203:54:17","trueExpression":{"hexValue":"31","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8252:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3286,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8202:56:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8193:65:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3265,"id":3288,"nodeType":"Return","src":"8186:72:17"}]}]},"documentation":{"id":3256,"nodeType":"StructuredDocumentation","src":"7944:89:17","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3291,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8047:4:17","nodeType":"FunctionDefinition","parameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3258,"mutability":"mutable","name":"a","nameLocation":"8060:1:17","nodeType":"VariableDeclaration","scope":3291,"src":"8052:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3257,"name":"uint256","nodeType":"ElementaryTypeName","src":"8052:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3261,"mutability":"mutable","name":"rounding","nameLocation":"8072:8:17","nodeType":"VariableDeclaration","scope":3291,"src":"8063:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3260,"nodeType":"UserDefinedTypeName","pathNode":{"id":3259,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"8063:8:17"},"referencedDeclaration":2893,"src":"8063:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8051:30:17"},"returnParameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3291,"src":"8105:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"8105:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8104:9:17"},"scope":3751,"src":"8038:237:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3422,"nodeType":"Block","src":"8460:922:17","statements":[{"assignments":[3300],"declarations":[{"constant":false,"id":3300,"mutability":"mutable","name":"result","nameLocation":"8478:6:17","nodeType":"VariableDeclaration","scope":3422,"src":"8470:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3299,"name":"uint256","nodeType":"ElementaryTypeName","src":"8470:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3302,"initialValue":{"hexValue":"30","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8487:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8470:18:17"},{"id":3419,"nodeType":"UncheckedBlock","src":"8498:855:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8526:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8535:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8526:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8541:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8526:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3317,"nodeType":"IfStatement","src":"8522:99:17","trueBody":{"id":3316,"nodeType":"Block","src":"8544:77:17","statements":[{"expression":{"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8562:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8572:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8562:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3311,"nodeType":"ExpressionStatement","src":"8562:13:17"},{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"8593:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8603:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8593:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3315,"nodeType":"ExpressionStatement","src":"8593:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8638:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8638:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8652:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8638:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3332,"nodeType":"IfStatement","src":"8634:96:17","trueBody":{"id":3331,"nodeType":"Block","src":"8655:75:17","statements":[{"expression":{"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8673:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8683:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8673:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3326,"nodeType":"ExpressionStatement","src":"8673:12:17"},{"expression":{"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"8703:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8713:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8703:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3330,"nodeType":"ExpressionStatement","src":"8703:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8747:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8747:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8761:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8747:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3347,"nodeType":"IfStatement","src":"8743:96:17","trueBody":{"id":3346,"nodeType":"Block","src":"8764:75:17","statements":[{"expression":{"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8782:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8792:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8782:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3341,"nodeType":"ExpressionStatement","src":"8782:12:17"},{"expression":{"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3342,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"8812:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8822:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8812:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3345,"nodeType":"ExpressionStatement","src":"8812:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8856:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8856:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8870:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8856:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3362,"nodeType":"IfStatement","src":"8852:96:17","trueBody":{"id":3361,"nodeType":"Block","src":"8873:75:17","statements":[{"expression":{"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8891:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8901:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8891:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3356,"nodeType":"ExpressionStatement","src":"8891:12:17"},{"expression":{"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"8921:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8931:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8921:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3360,"nodeType":"ExpressionStatement","src":"8921:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8965:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8974:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8965:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8978:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8965:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3377,"nodeType":"IfStatement","src":"8961:93:17","trueBody":{"id":3376,"nodeType":"Block","src":"8981:73:17","statements":[{"expression":{"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"8999:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9009:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8999:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3371,"nodeType":"ExpressionStatement","src":"8999:11:17"},{"expression":{"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"9028:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9038:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9028:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3375,"nodeType":"ExpressionStatement","src":"9028:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"9071:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9080:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9071:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9084:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9071:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3392,"nodeType":"IfStatement","src":"9067:93:17","trueBody":{"id":3391,"nodeType":"Block","src":"9087:73:17","statements":[{"expression":{"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"9105:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9105:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3386,"nodeType":"ExpressionStatement","src":"9105:11:17"},{"expression":{"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3387,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"9134:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9144:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9134:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3390,"nodeType":"ExpressionStatement","src":"9134:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"9177:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9186:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9177:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9190:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9177:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3407,"nodeType":"IfStatement","src":"9173:93:17","trueBody":{"id":3406,"nodeType":"Block","src":"9193:73:17","statements":[{"expression":{"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"9211:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9221:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9211:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3401,"nodeType":"ExpressionStatement","src":"9211:11:17"},{"expression":{"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3402,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"9240:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9250:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9240:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3405,"nodeType":"ExpressionStatement","src":"9240:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"9283:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9292:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9283:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9296:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9283:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3418,"nodeType":"IfStatement","src":"9279:64:17","trueBody":{"id":3417,"nodeType":"Block","src":"9299:44:17","statements":[{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"9317:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9317:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ExpressionStatement","src":"9317:11:17"}]}}]},{"expression":{"id":3420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"9369:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3298,"id":3421,"nodeType":"Return","src":"9362:13:17"}]},"documentation":{"id":3292,"nodeType":"StructuredDocumentation","src":"8281:113:17","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8408:4:17","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"value","nameLocation":"8421:5:17","nodeType":"VariableDeclaration","scope":3423,"src":"8413:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3293,"name":"uint256","nodeType":"ElementaryTypeName","src":"8413:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8412:15:17"},"returnParameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3423,"src":"8451:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"8451:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8450:9:17"},"scope":3751,"src":"8399:983:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3458,"nodeType":"Block","src":"9615:165:17","statements":[{"id":3457,"nodeType":"UncheckedBlock","src":"9625:149:17","statements":[{"assignments":[3435],"declarations":[{"constant":false,"id":3435,"mutability":"mutable","name":"result","nameLocation":"9657:6:17","nodeType":"VariableDeclaration","scope":3457,"src":"9649:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3434,"name":"uint256","nodeType":"ElementaryTypeName","src":"9649:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3439,"initialValue":{"arguments":[{"id":3437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"9671:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3436,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3423,3459],"referencedDeclaration":3423,"src":"9666:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9666:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9649:28:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"9698:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3441,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"9708:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3442,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"9720:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2893_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"9720:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"src":"9708:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9735:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"9740:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9735:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"9749:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9735:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9708:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9761:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9708:54:17","trueExpression":{"hexValue":"31","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9757:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3454,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9707:56:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9698:65:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3433,"id":3456,"nodeType":"Return","src":"9691:72:17"}]}]},"documentation":{"id":3424,"nodeType":"StructuredDocumentation","src":"9388:142:17","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3459,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9544:4:17","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"value","nameLocation":"9557:5:17","nodeType":"VariableDeclaration","scope":3459,"src":"9549:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3425,"name":"uint256","nodeType":"ElementaryTypeName","src":"9549:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3429,"mutability":"mutable","name":"rounding","nameLocation":"9573:8:17","nodeType":"VariableDeclaration","scope":3459,"src":"9564:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3428,"nodeType":"UserDefinedTypeName","pathNode":{"id":3427,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"9564:8:17"},"referencedDeclaration":2893,"src":"9564:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9548:34:17"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3459,"src":"9606:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"9606:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9605:9:17"},"scope":3751,"src":"9535:245:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3587,"nodeType":"Block","src":"9967:828:17","statements":[{"assignments":[3468],"declarations":[{"constant":false,"id":3468,"mutability":"mutable","name":"result","nameLocation":"9985:6:17","nodeType":"VariableDeclaration","scope":3587,"src":"9977:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"9977:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3470,"initialValue":{"hexValue":"30","id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9994:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9977:18:17"},{"id":3584,"nodeType":"UncheckedBlock","src":"10005:761:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10033:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10042:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10046:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10042:6:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10033:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3487,"nodeType":"IfStatement","src":"10029:99:17","trueBody":{"id":3486,"nodeType":"Block","src":"10050:78:17","statements":[{"expression":{"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10068:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10077:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10081:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10077:6:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10068:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3481,"nodeType":"ExpressionStatement","src":"10068:15:17"},{"expression":{"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10101:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10111:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10101:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3485,"nodeType":"ExpressionStatement","src":"10101:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10145:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10154:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10158:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10154:6:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10145:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3504,"nodeType":"IfStatement","src":"10141:99:17","trueBody":{"id":3503,"nodeType":"Block","src":"10162:78:17","statements":[{"expression":{"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10180:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10189:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10193:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10189:6:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10180:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3498,"nodeType":"ExpressionStatement","src":"10180:15:17"},{"expression":{"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10213:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10223:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10213:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3502,"nodeType":"ExpressionStatement","src":"10213:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10257:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10266:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10270:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10266:6:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10257:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3521,"nodeType":"IfStatement","src":"10253:99:17","trueBody":{"id":3520,"nodeType":"Block","src":"10274:78:17","statements":[{"expression":{"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10292:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10301:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10305:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10301:6:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10292:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3515,"nodeType":"ExpressionStatement","src":"10292:15:17"},{"expression":{"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10325:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10335:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10325:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3519,"nodeType":"ExpressionStatement","src":"10325:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10369:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10378:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10382:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10378:5:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10369:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3538,"nodeType":"IfStatement","src":"10365:96:17","trueBody":{"id":3537,"nodeType":"Block","src":"10385:76:17","statements":[{"expression":{"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10403:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10412:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10416:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10412:5:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10403:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3532,"nodeType":"ExpressionStatement","src":"10403:14:17"},{"expression":{"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10435:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10445:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10435:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3536,"nodeType":"ExpressionStatement","src":"10435:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10478:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10487:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10491:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10487:5:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10478:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3555,"nodeType":"IfStatement","src":"10474:96:17","trueBody":{"id":3554,"nodeType":"Block","src":"10494:76:17","statements":[{"expression":{"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10512:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10521:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10521:5:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10512:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3549,"nodeType":"ExpressionStatement","src":"10512:14:17"},{"expression":{"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10544:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10554:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10544:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3553,"nodeType":"ExpressionStatement","src":"10544:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10587:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10596:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10600:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10596:5:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10587:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3572,"nodeType":"IfStatement","src":"10583:96:17","trueBody":{"id":3571,"nodeType":"Block","src":"10603:76:17","statements":[{"expression":{"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10621:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10634:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10630:5:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10621:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3566,"nodeType":"ExpressionStatement","src":"10621:14:17"},{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10653:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10663:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10653:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"10653:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"10696:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10705:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10709:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10705:5:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10696:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3583,"nodeType":"IfStatement","src":"10692:64:17","trueBody":{"id":3582,"nodeType":"Block","src":"10712:44:17","statements":[{"expression":{"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10730:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10740:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10730:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3581,"nodeType":"ExpressionStatement","src":"10730:11:17"}]}}]},{"expression":{"id":3585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"10782:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3466,"id":3586,"nodeType":"Return","src":"10775:13:17"}]},"documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"9786:114:17","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3588,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9914:5:17","nodeType":"FunctionDefinition","parameters":{"id":3463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3462,"mutability":"mutable","name":"value","nameLocation":"9928:5:17","nodeType":"VariableDeclaration","scope":3588,"src":"9920:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3461,"name":"uint256","nodeType":"ElementaryTypeName","src":"9920:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9919:15:17"},"returnParameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3588,"src":"9958:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3464,"name":"uint256","nodeType":"ElementaryTypeName","src":"9958:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9957:9:17"},"scope":3751,"src":"9905:890:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3623,"nodeType":"Block","src":"11030:165:17","statements":[{"id":3622,"nodeType":"UncheckedBlock","src":"11040:149:17","statements":[{"assignments":[3600],"declarations":[{"constant":false,"id":3600,"mutability":"mutable","name":"result","nameLocation":"11072:6:17","nodeType":"VariableDeclaration","scope":3622,"src":"11064:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3599,"name":"uint256","nodeType":"ElementaryTypeName","src":"11064:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3604,"initialValue":{"arguments":[{"id":3602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"11087:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3601,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3588,3624],"referencedDeclaration":3588,"src":"11081:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11081:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11064:29:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3605,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"11114:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3606,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"11124:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3607,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"11136:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2893_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"11136:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"src":"11124:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11151:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3611,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"11155:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11151:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"11164:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11151:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11124:45:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11176:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11124:53:17","trueExpression":{"hexValue":"31","id":3616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11172:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11123:55:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11114:64:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3598,"id":3621,"nodeType":"Return","src":"11107:71:17"}]}]},"documentation":{"id":3589,"nodeType":"StructuredDocumentation","src":"10801:143:17","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3624,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10958:5:17","nodeType":"FunctionDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3591,"mutability":"mutable","name":"value","nameLocation":"10972:5:17","nodeType":"VariableDeclaration","scope":3624,"src":"10964:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3590,"name":"uint256","nodeType":"ElementaryTypeName","src":"10964:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3594,"mutability":"mutable","name":"rounding","nameLocation":"10988:8:17","nodeType":"VariableDeclaration","scope":3624,"src":"10979:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3593,"nodeType":"UserDefinedTypeName","pathNode":{"id":3592,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"10979:8:17"},"referencedDeclaration":2893,"src":"10979:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10963:34:17"},"returnParameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3624,"src":"11021:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"11021:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11020:9:17"},"scope":3751,"src":"10949:246:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3710,"nodeType":"Block","src":"11509:600:17","statements":[{"assignments":[3633],"declarations":[{"constant":false,"id":3633,"mutability":"mutable","name":"result","nameLocation":"11527:6:17","nodeType":"VariableDeclaration","scope":3710,"src":"11519:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3632,"name":"uint256","nodeType":"ElementaryTypeName","src":"11519:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3635,"initialValue":{"hexValue":"30","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11536:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11519:18:17"},{"id":3707,"nodeType":"UncheckedBlock","src":"11547:533:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11575:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11584:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11575:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11590:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11575:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3650,"nodeType":"IfStatement","src":"11571:98:17","trueBody":{"id":3649,"nodeType":"Block","src":"11593:76:17","statements":[{"expression":{"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11611:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11621:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11611:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3644,"nodeType":"ExpressionStatement","src":"11611:13:17"},{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"11642:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11652:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11642:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"11642:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11686:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11686:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11700:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11686:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3665,"nodeType":"IfStatement","src":"11682:95:17","trueBody":{"id":3664,"nodeType":"Block","src":"11703:74:17","statements":[{"expression":{"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11721:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11731:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11721:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3659,"nodeType":"ExpressionStatement","src":"11721:12:17"},{"expression":{"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3660,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"11751:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11761:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11751:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3663,"nodeType":"ExpressionStatement","src":"11751:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11794:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11794:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11808:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11794:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3680,"nodeType":"IfStatement","src":"11790:95:17","trueBody":{"id":3679,"nodeType":"Block","src":"11811:74:17","statements":[{"expression":{"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11829:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11839:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11829:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3674,"nodeType":"ExpressionStatement","src":"11829:12:17"},{"expression":{"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3675,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"11859:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11869:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11859:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3678,"nodeType":"ExpressionStatement","src":"11859:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11902:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11902:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11916:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11902:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3695,"nodeType":"IfStatement","src":"11898:95:17","trueBody":{"id":3694,"nodeType":"Block","src":"11919:74:17","statements":[{"expression":{"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"11937:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11947:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11937:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3689,"nodeType":"ExpressionStatement","src":"11937:12:17"},{"expression":{"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3690,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"11967:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11977:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11967:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3693,"nodeType":"ExpressionStatement","src":"11967:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"12010:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12019:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12010:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12010:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3706,"nodeType":"IfStatement","src":"12006:64:17","trueBody":{"id":3705,"nodeType":"Block","src":"12026:44:17","statements":[{"expression":{"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3701,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"12044:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12054:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12044:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3704,"nodeType":"ExpressionStatement","src":"12044:11:17"}]}}]},{"expression":{"id":3708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"12096:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3631,"id":3709,"nodeType":"Return","src":"12089:13:17"}]},"documentation":{"id":3625,"nodeType":"StructuredDocumentation","src":"11201:240:17","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3711,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11455:6:17","nodeType":"FunctionDefinition","parameters":{"id":3628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"value","nameLocation":"11470:5:17","nodeType":"VariableDeclaration","scope":3711,"src":"11462:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3626,"name":"uint256","nodeType":"ElementaryTypeName","src":"11462:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11461:15:17"},"returnParameters":{"id":3631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3711,"src":"11500:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3629,"name":"uint256","nodeType":"ElementaryTypeName","src":"11500:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11499:9:17"},"scope":3751,"src":"11446:663:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3749,"nodeType":"Block","src":"12345:173:17","statements":[{"id":3748,"nodeType":"UncheckedBlock","src":"12355:157:17","statements":[{"assignments":[3723],"declarations":[{"constant":false,"id":3723,"mutability":"mutable","name":"result","nameLocation":"12387:6:17","nodeType":"VariableDeclaration","scope":3748,"src":"12379:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3722,"name":"uint256","nodeType":"ElementaryTypeName","src":"12379:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3727,"initialValue":{"arguments":[{"id":3725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"12403:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3724,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3711,3750],"referencedDeclaration":3711,"src":"12396:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12396:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12379:30:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3728,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12430:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"id":3732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3729,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"12440:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3730,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"12452:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2893_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"12452:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"src":"12440:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3734,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"12473:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12482:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12473:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3737,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12472:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12467:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"12487:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12467:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12440:52:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12499:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12440:60:17","trueExpression":{"hexValue":"31","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12495:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3745,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12439:62:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12430:71:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3721,"id":3747,"nodeType":"Return","src":"12423:78:17"}]}]},"documentation":{"id":3712,"nodeType":"StructuredDocumentation","src":"12115:143:17","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3750,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12272:6:17","nodeType":"FunctionDefinition","parameters":{"id":3718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"value","nameLocation":"12287:5:17","nodeType":"VariableDeclaration","scope":3750,"src":"12279:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3713,"name":"uint256","nodeType":"ElementaryTypeName","src":"12279:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3717,"mutability":"mutable","name":"rounding","nameLocation":"12303:8:17","nodeType":"VariableDeclaration","scope":3750,"src":"12294:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3716,"nodeType":"UserDefinedTypeName","pathNode":{"id":3715,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2893,"src":"12294:8:17"},"referencedDeclaration":2893,"src":"12294:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2893","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12278:34:17"},"returnParameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3750,"src":"12336:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3719,"name":"uint256","nodeType":"ElementaryTypeName","src":"12336:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12335:9:17"},"scope":3751,"src":"12263:255:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3752,"src":"207:12313:17","usedErrors":[]}],"src":"108:12413:17"},"id":17},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[3832]},"id":3755,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3753,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:18"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":3754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3755,"sourceUnit":3833,"src":"58:35:18","symbolAliases":[],"unitAlias":""}],"src":"33:61:18"},"id":18},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3832]},"id":3833,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3756,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3757,"nodeType":"StructuredDocumentation","src":"58:70:19","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3832,"linearizedBaseContracts":[3832],"name":"IERC20","nameLocation":"139:6:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3758,"nodeType":"StructuredDocumentation","src":"152:66:19","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3763,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"232:11:19","nodeType":"FunctionDefinition","parameters":{"id":3759,"nodeType":"ParameterList","parameters":[],"src":"243:2:19"},"returnParameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3763,"src":"269:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3760,"name":"uint256","nodeType":"ElementaryTypeName","src":"269:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"268:9:19"},"scope":3832,"src":"223:55:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3764,"nodeType":"StructuredDocumentation","src":"284:72:19","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3771,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"370:9:19","nodeType":"FunctionDefinition","parameters":{"id":3767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3766,"mutability":"mutable","name":"account","nameLocation":"388:7:19","nodeType":"VariableDeclaration","scope":3771,"src":"380:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3765,"name":"address","nodeType":"ElementaryTypeName","src":"380:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"379:17:19"},"returnParameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3771,"src":"420:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3768,"name":"uint256","nodeType":"ElementaryTypeName","src":"420:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"419:9:19"},"scope":3832,"src":"361:68:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"435:209:19","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3781,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"658:8:19","nodeType":"FunctionDefinition","parameters":{"id":3777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3774,"mutability":"mutable","name":"recipient","nameLocation":"675:9:19","nodeType":"VariableDeclaration","scope":3781,"src":"667:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3773,"name":"address","nodeType":"ElementaryTypeName","src":"667:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3776,"mutability":"mutable","name":"amount","nameLocation":"694:6:19","nodeType":"VariableDeclaration","scope":3781,"src":"686:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3775,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"666:35:19"},"returnParameters":{"id":3780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3781,"src":"720:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3778,"name":"bool","nodeType":"ElementaryTypeName","src":"720:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"719:6:19"},"scope":3832,"src":"649:77:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3782,"nodeType":"StructuredDocumentation","src":"732:264:19","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3791,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1010:9:19","nodeType":"FunctionDefinition","parameters":{"id":3787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3784,"mutability":"mutable","name":"owner","nameLocation":"1028:5:19","nodeType":"VariableDeclaration","scope":3791,"src":"1020:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3783,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3786,"mutability":"mutable","name":"spender","nameLocation":"1043:7:19","nodeType":"VariableDeclaration","scope":3791,"src":"1035:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3785,"name":"address","nodeType":"ElementaryTypeName","src":"1035:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1019:32:19"},"returnParameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"1075:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1074:9:19"},"scope":3832,"src":"1001:83:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3792,"nodeType":"StructuredDocumentation","src":"1090:642:19","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3801,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1746:7:19","nodeType":"FunctionDefinition","parameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"spender","nameLocation":"1762:7:19","nodeType":"VariableDeclaration","scope":3801,"src":"1754:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3793,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3796,"mutability":"mutable","name":"amount","nameLocation":"1779:6:19","nodeType":"VariableDeclaration","scope":3801,"src":"1771:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:33:19"},"returnParameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3801,"src":"1805:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3798,"name":"bool","nodeType":"ElementaryTypeName","src":"1805:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1804:6:19"},"scope":3832,"src":"1737:74:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3802,"nodeType":"StructuredDocumentation","src":"1817:296:19","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3813,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2127:12:19","nodeType":"FunctionDefinition","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"mutability":"mutable","name":"sender","nameLocation":"2157:6:19","nodeType":"VariableDeclaration","scope":3813,"src":"2149:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3803,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3806,"mutability":"mutable","name":"recipient","nameLocation":"2181:9:19","nodeType":"VariableDeclaration","scope":3813,"src":"2173:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3805,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3808,"mutability":"mutable","name":"amount","nameLocation":"2208:6:19","nodeType":"VariableDeclaration","scope":3813,"src":"2200:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3807,"name":"uint256","nodeType":"ElementaryTypeName","src":"2200:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2139:81:19"},"returnParameters":{"id":3812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3813,"src":"2239:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3810,"name":"bool","nodeType":"ElementaryTypeName","src":"2239:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2238:6:19"},"scope":3832,"src":"2118:127:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3814,"nodeType":"StructuredDocumentation","src":"2251:158:19","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":3822,"name":"Transfer","nameLocation":"2420:8:19","nodeType":"EventDefinition","parameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3816,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2445:4:19","nodeType":"VariableDeclaration","scope":3822,"src":"2429:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3815,"name":"address","nodeType":"ElementaryTypeName","src":"2429:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3818,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2467:2:19","nodeType":"VariableDeclaration","scope":3822,"src":"2451:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3817,"name":"address","nodeType":"ElementaryTypeName","src":"2451:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3820,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2479:5:19","nodeType":"VariableDeclaration","scope":3822,"src":"2471:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"2471:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2428:57:19"},"src":"2414:72:19"},{"anonymous":false,"documentation":{"id":3823,"nodeType":"StructuredDocumentation","src":"2492:148:19","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":3831,"name":"Approval","nameLocation":"2651:8:19","nodeType":"EventDefinition","parameters":{"id":3830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2676:5:19","nodeType":"VariableDeclaration","scope":3831,"src":"2660:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3824,"name":"address","nodeType":"ElementaryTypeName","src":"2660:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3827,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2699:7:19","nodeType":"VariableDeclaration","scope":3831,"src":"2683:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3826,"name":"address","nodeType":"ElementaryTypeName","src":"2683:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3829,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2716:5:19","nodeType":"VariableDeclaration","scope":3831,"src":"2708:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3828,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2659:63:19"},"src":"2645:78:19"}],"scope":3833,"src":"129:2596:19","usedErrors":[]}],"src":"33:2693:19"},"id":19},"contracts/DwellaReit.sol":{"ast":{"absolutePath":"contracts/DwellaReit.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2539],"ContextUpgradeable":[2581],"CountersUpgradeable":[2655],"DR":[4349],"ERC1155HolderUpgradeable":[2201],"ERC1155ReceiverUpgradeable":[2255],"ERC1155Upgradeable":[1952],"ERC165Upgradeable":[2874],"IAccessControlUpgradeable":[408],"IERC1155MetadataURIUpgradeable":[2130],"IERC1155ReceiverUpgradeable":[1993],"IERC1155Upgradeable":[2115],"IERC165Upgradeable":[2886],"IERC20":[3832],"Initializable":[580],"MathUpgradeable":[3751],"PausableUpgradeable":[707],"StringsUpgradeable":[2830]},"id":4350,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3834,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"33:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":3835,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":581,"src":"58:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","id":3836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":1953,"src":"134:82:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol","id":3837,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":2202,"src":"217:94:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","id":3838,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":2656,"src":"312:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol","id":3839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":412,"src":"388:79:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol","id":3840,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":2256,"src":"468:96:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":3841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":336,"src":"565:81:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":3842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":708,"src":"647:78:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":3843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4350,"sourceUnit":3755,"src":"726:55:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3844,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":580,"src":"798:13:20"},"id":3845,"nodeType":"InheritanceSpecifier","src":"798:13:20"},{"baseName":{"id":3846,"name":"AccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":335,"src":"813:24:20"},"id":3847,"nodeType":"InheritanceSpecifier","src":"813:24:20"},{"baseName":{"id":3848,"name":"PausableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":707,"src":"839:19:20"},"id":3849,"nodeType":"InheritanceSpecifier","src":"839:19:20"},{"baseName":{"id":3850,"name":"ERC1155Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1952,"src":"860:18:20"},"id":3851,"nodeType":"InheritanceSpecifier","src":"860:18:20"},{"baseName":{"id":3852,"name":"ERC1155HolderUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2201,"src":"880:24:20"},"id":3853,"nodeType":"InheritanceSpecifier","src":"880:24:20"}],"canonicalName":"DR","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4349,"linearizedBaseContracts":[4349,2201,2255,1993,1952,2130,2115,707,335,2874,2886,408,2581,580],"name":"DR","nameLocation":"792:2:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"912:452:20","text":" @dev Declaration of variables.\n 1. `MODERATOR` - Group of addresses possessing moderator authorization for AccessControl contract\n 2. `ADMIN_ROLE` - Group of addresses possessing admin authorization\n 3. `MINTER_ROLE` - Group of addresses possessing minting authorization\n 4. `_legalContracts` - Mapping of Token ID to Legal Contract File Hash\n 5. `platform_address` - Main address for the platform owner"},"functionSelector":"34b4e625","id":3859,"mutability":"constant","name":"MODERATOR","nameLocation":"1393:9:20","nodeType":"VariableDeclaration","scope":4349,"src":"1369:58:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1369:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d4f44455241544f52","id":3857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1415:11:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_58c8e11deab7910e89bf18a1168c6e6ef28748f00fd3094549459f01cec5e0aa","typeString":"literal_string \"MODERATOR\""},"value":"MODERATOR"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_58c8e11deab7910e89bf18a1168c6e6ef28748f00fd3094549459f01cec5e0aa","typeString":"literal_string \"MODERATOR\""}],"id":3856,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1405:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1405:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"75b238fc","id":3864,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1457:10:20","nodeType":"VariableDeclaration","scope":4349,"src":"1433:60:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1433:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1480:12:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":3861,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1470:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1470:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"d5391393","id":3869,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"1523:11:20","nodeType":"VariableDeclaration","scope":4349,"src":"1499:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1499:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":3867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1547:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":3866,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1537:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1537:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":3873,"mutability":"mutable","name":"_legalContracts","nameLocation":"1595:15:20","nodeType":"VariableDeclaration","scope":4349,"src":"1567:43:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":3872,"keyType":{"id":3870,"name":"string","nodeType":"ElementaryTypeName","src":"1576:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"1567:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueType":{"id":3871,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"functionSelector":"34cd58dd","id":3875,"mutability":"mutable","name":"platform_address","nameLocation":"1631:16:20","nodeType":"VariableDeclaration","scope":4349,"src":"1616:31:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3874,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":3888,"nodeType":"Block","src":"1762:110:20","statements":[{"expression":{"arguments":[{"arguments":[{"id":3880,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1788:10:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3881,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1800:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1800:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3879,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1780:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1780:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4163636573732044656e6965643a2043616c6c6572206973206e6f74207468652041646d696e","id":3884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1813:40:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e765cf6582a2dd38fa7894df72e944eee1df0925da551b1c939c1fa84bbe840f","typeString":"literal_string \"Access Denied: Caller is not the Admin\""},"value":"Access Denied: Caller is not the Admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e765cf6582a2dd38fa7894df72e944eee1df0925da551b1c939c1fa84bbe840f","typeString":"literal_string \"Access Denied: Caller is not the Admin\""}],"id":3878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1772:82:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3886,"nodeType":"ExpressionStatement","src":"1772:82:20"},{"id":3887,"nodeType":"PlaceholderStatement","src":"1864:1:20"}]},"documentation":{"id":3876,"nodeType":"StructuredDocumentation","src":"1654:82:20","text":" @dev Throws if called by any account without ADMIN_ROLE access."},"id":3889,"name":"onlyAdmin","nameLocation":"1750:9:20","nodeType":"ModifierDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[],"src":"1759:2:20"},"src":"1741:131:20","virtual":false,"visibility":"internal"},{"id":3893,"libraryName":{"id":3890,"name":"CountersUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2655,"src":"1989:19:20"},"nodeType":"UsingForDirective","src":"1983:58:20","typeName":{"id":3892,"nodeType":"UserDefinedTypeName","pathNode":{"id":3891,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"2013:27:20"},"referencedDeclaration":2587,"src":"2013:27:20","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":3896,"mutability":"mutable","name":"_tokenIds","nameLocation":"2083:9:20","nodeType":"VariableDeclaration","scope":4349,"src":"2046:46:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":3895,"nodeType":"UserDefinedTypeName","pathNode":{"id":3894,"name":"CountersUpgradeable.Counter","nodeType":"IdentifierPath","referencedDeclaration":2587,"src":"2046:27:20"},"referencedDeclaration":2587,"src":"2046:27:20","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"},{"constant":false,"functionSelector":"ad0cdd89","id":3898,"mutability":"mutable","name":"_tokenID","nameLocation":"2113:8:20","nodeType":"VariableDeclaration","scope":4349,"src":"2098:23:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3897,"name":"uint256","nodeType":"ElementaryTypeName","src":"2098:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"canonicalName":"DR.DRToken","id":3911,"members":[{"constant":false,"id":3900,"mutability":"mutable","name":"totalSupply","nameLocation":"2288:11:20","nodeType":"VariableDeclaration","scope":3911,"src":"2280:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3899,"name":"uint256","nodeType":"ElementaryTypeName","src":"2280:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"owner","nameLocation":"2317:5:20","nodeType":"VariableDeclaration","scope":3911,"src":"2309:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"2309:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"valuationReport","nameLocation":"2339:15:20","nodeType":"VariableDeclaration","scope":3911,"src":"2332:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3903,"name":"string","nodeType":"ElementaryTypeName","src":"2332:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"legalContract","nameLocation":"2371:13:20","nodeType":"VariableDeclaration","scope":3911,"src":"2364:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3905,"name":"string","nodeType":"ElementaryTypeName","src":"2364:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"fee","nameLocation":"2402:3:20","nodeType":"VariableDeclaration","scope":3911,"src":"2394:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"2394:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"rate","nameLocation":"2423:4:20","nodeType":"VariableDeclaration","scope":3911,"src":"2415:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2415:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"DRToken","nameLocation":"2262:7:20","nodeType":"StructDefinition","scope":4349,"src":"2255:179:20","visibility":"public"},{"constant":false,"id":3916,"mutability":"mutable","name":"drToken","nameLocation":"2468:7:20","nodeType":"VariableDeclaration","scope":4349,"src":"2439:36:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken)"},"typeName":{"id":3915,"keyType":{"id":3912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2448:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2439:28:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken)"},"valueType":{"id":3914,"nodeType":"UserDefinedTypeName","pathNode":{"id":3913,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"2459:7:20"},"referencedDeclaration":3911,"src":"2459:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":3917,"nodeType":"StructuredDocumentation","src":"2483:414:20","text":" @dev Declaration of new Event to record created token details for DRToken\n @param timestamp - Time Stamp of Event\n @param id - Unique token ID\n @param totalSupply - Number of tokens for unique token ID\n @param owner - Asset Owner wallet address\n @param valuationReport - File Hash of Valuation Report\n @param legalContract - File Hash of Legal Contract"},"id":3933,"name":"DRTokenID","nameLocation":"2908:9:20","nodeType":"EventDefinition","parameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3919,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"2926:9:20","nodeType":"VariableDeclaration","scope":3933,"src":"2918:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2918:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3921,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"2953:2:20","nodeType":"VariableDeclaration","scope":3933,"src":"2937:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"2937:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3923,"indexed":true,"mutability":"mutable","name":"totalSupply","nameLocation":"2973:11:20","nodeType":"VariableDeclaration","scope":3933,"src":"2957:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2957:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3925,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3002:5:20","nodeType":"VariableDeclaration","scope":3933,"src":"2986:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3924,"name":"address","nodeType":"ElementaryTypeName","src":"2986:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3927,"indexed":false,"mutability":"mutable","name":"valuationReport","nameLocation":"3016:15:20","nodeType":"VariableDeclaration","scope":3933,"src":"3009:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3926,"name":"string","nodeType":"ElementaryTypeName","src":"3009:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3929,"indexed":false,"mutability":"mutable","name":"legalContract","nameLocation":"3040:13:20","nodeType":"VariableDeclaration","scope":3933,"src":"3033:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3928,"name":"string","nodeType":"ElementaryTypeName","src":"3033:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3931,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"3063:4:20","nodeType":"VariableDeclaration","scope":3933,"src":"3055:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3930,"name":"uint256","nodeType":"ElementaryTypeName","src":"3055:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2917:151:20"},"src":"2902:167:20"},{"anonymous":false,"documentation":{"id":3934,"nodeType":"StructuredDocumentation","src":"3076:328:20","text":" @dev Declaration of new Event to record ERC20 token withdraw\n @param timestamp - Time Stamp of Event\n @param initiator - Wallet Address that invoked the withdrawal process\n @param recipient - Wallet address which received the USDT\n @param amount - Total amount of USDT withdrawn"},"id":3944,"name":"TokenWithdrawn","nameLocation":"3415:14:20","nodeType":"EventDefinition","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"3438:9:20","nodeType":"VariableDeclaration","scope":3944,"src":"3430:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3935,"name":"uint256","nodeType":"ElementaryTypeName","src":"3430:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3938,"indexed":false,"mutability":"mutable","name":"initiator","nameLocation":"3457:9:20","nodeType":"VariableDeclaration","scope":3944,"src":"3449:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3937,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3940,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"3476:9:20","nodeType":"VariableDeclaration","scope":3944,"src":"3468:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"3468:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3942,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3495:6:20","nodeType":"VariableDeclaration","scope":3944,"src":"3487:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3941,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3429:73:20"},"src":"3409:94:20"},{"body":{"id":3960,"nodeType":"Block","src":"3775:116:20","statements":[{"expression":{"arguments":[{"hexValue":"68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69647d2e6a736f6e","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3800:36:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ec884005926e7014d3c77574bc6bff7970c7c17a859b212d9b39ba93bdc6860","typeString":"literal_string \"https://token-cdn-domain/{id}.json\""},"value":"https://token-cdn-domain/{id}.json"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7ec884005926e7014d3c77574bc6bff7970c7c17a859b212d9b39ba93bdc6860","typeString":"literal_string \"https://token-cdn-domain/{id}.json\""}],"id":3952,"name":"__ERC1155_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"3785:14:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3785:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3955,"nodeType":"ExpressionStatement","src":"3785:52:20"},{"expression":{"arguments":[{"id":3957,"name":"_platformAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"3867:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3956,"name":"__DR_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"3847:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3847:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3959,"nodeType":"ExpressionStatement","src":"3847:37:20"}]},"documentation":{"id":3945,"nodeType":"StructuredDocumentation","src":"3509:195:20","text":" @dev Functions for ERC1155 Token\n 1. __ERC1155_init - Construct the ERC1155 token with URI\n 2. incrementTokenId() - Increase `tokenID` by 1 before minting new token"},"functionSelector":"ecb1b769","id":3961,"implemented":true,"kind":"function","modifiers":[{"id":3950,"kind":"modifierInvocation","modifierName":{"id":3949,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":482,"src":"3754:11:20"},"nodeType":"ModifierInvocation","src":"3754:11:20"}],"name":"__DR_init","nameLocation":"3718:9:20","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3947,"mutability":"mutable","name":"_platformAddress","nameLocation":"3736:16:20","nodeType":"VariableDeclaration","scope":3961,"src":"3728:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3946,"name":"address","nodeType":"ElementaryTypeName","src":"3728:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3727:26:20"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[],"src":"3775:0:20"},"scope":4349,"src":"3709:182:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3978,"nodeType":"Block","src":"3973:92:20","statements":[{"expression":{"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3968,"name":"platform_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"3983:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3969,"name":"_platformAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3963,"src":"4002:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3983:35:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3971,"nodeType":"ExpressionStatement","src":"3983:35:20"},{"expression":{"id":3976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3972,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"4028:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3973,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"4039:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":3974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"4039:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2587_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2587_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4039:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4028:30:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3977,"nodeType":"ExpressionStatement","src":"4028:30:20"}]},"id":3979,"implemented":true,"kind":"function","modifiers":[{"id":3966,"kind":"modifierInvocation","modifierName":{"id":3965,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":482,"src":"3952:11:20"},"nodeType":"ModifierInvocation","src":"3952:11:20"}],"name":"__DR_init_unchained","nameLocation":"3906:19:20","nodeType":"FunctionDefinition","parameters":{"id":3964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"_platformAddress","nameLocation":"3934:16:20","nodeType":"VariableDeclaration","scope":3979,"src":"3926:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3962,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3925:26:20"},"returnParameters":{"id":3967,"nodeType":"ParameterList","parameters":[],"src":"3973:0:20"},"scope":4349,"src":"3897:168:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3993,"nodeType":"Block","src":"4108:78:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3982,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"4118:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":3984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"4118:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2587_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2587_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4118:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3986,"nodeType":"ExpressionStatement","src":"4118:21:20"},{"expression":{"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3987,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"4149:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3988,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"4160:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2587_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":3989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2599,"src":"4160:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2587_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2587_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4160:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4149:30:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3992,"nodeType":"ExpressionStatement","src":"4149:30:20"}]},"id":3994,"implemented":true,"kind":"function","modifiers":[],"name":"incrementTokenId","nameLocation":"4080:16:20","nodeType":"FunctionDefinition","parameters":{"id":3980,"nodeType":"ParameterList","parameters":[],"src":"4096:2:20"},"returnParameters":{"id":3981,"nodeType":"ParameterList","parameters":[],"src":"4108:0:20"},"scope":4349,"src":"4071:115:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[75,800,2249],"body":{"id":4010,"nodeType":"Block","src":"4349:60:20","statements":[{"expression":{"arguments":[{"id":4007,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"4390:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4005,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4366:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DR_$4349_$","typeString":"type(contract super DR)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2249,"src":"4366:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4366:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4004,"id":4009,"nodeType":"Return","src":"4359:43:20"}]},"functionSelector":"01ffc9a7","id":4011,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"4201:17:20","nodeType":"FunctionDefinition","overrides":{"id":4001,"nodeType":"OverrideSpecifier","overrides":[{"id":3998,"name":"AccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":335,"src":"4260:24:20"},{"id":3999,"name":"ERC1155ReceiverUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2255,"src":"4286:26:20"},{"id":4000,"name":"ERC1155Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1952,"src":"4314:18:20"}],"src":"4251:82:20"},"parameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3996,"mutability":"mutable","name":"interfaceId","nameLocation":"4226:11:20","nodeType":"VariableDeclaration","scope":4011,"src":"4219:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3995,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4219:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4218:20:20"},"returnParameters":{"id":4004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4011,"src":"4343:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4002,"name":"bool","nodeType":"ElementaryTypeName","src":"4343:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4342:6:20"},"scope":4349,"src":"4192:217:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4029,"nodeType":"Block","src":"4729:90:20","statements":[{"assignments":[4021],"declarations":[{"constant":false,"id":4021,"mutability":"mutable","name":"token","nameLocation":"4754:5:20","nodeType":"VariableDeclaration","scope":4029,"src":"4739:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4020,"nodeType":"UserDefinedTypeName","pathNode":{"id":4019,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"4739:7:20"},"referencedDeclaration":3911,"src":"4739:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4025,"initialValue":{"baseExpression":{"id":4022,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4762:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4024,"indexExpression":{"id":4023,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"4770:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4762:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4739:39:20"},{"expression":{"expression":{"id":4026,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"4795:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"4795:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4018,"id":4028,"nodeType":"Return","src":"4788:24:20"}]},"documentation":{"id":4012,"nodeType":"StructuredDocumentation","src":"4415:236:20","text":" @dev Series of functions to retrieve token details from `DRToken` struct, including\n Total Supply, Owner, Valuation Report, Legal Contract and Service Fee.\n @param tokenId - Unique token id of token"},"functionSelector":"92ab723e","id":4030,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalSupply","nameLocation":"4665:14:20","nodeType":"FunctionDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"mutability":"mutable","name":"tokenId","nameLocation":"4688:7:20","nodeType":"VariableDeclaration","scope":4030,"src":"4680:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4013,"name":"uint256","nodeType":"ElementaryTypeName","src":"4680:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4679:17:20"},"returnParameters":{"id":4018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4030,"src":"4720:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4720:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4719:9:20"},"scope":4349,"src":"4656:163:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4047,"nodeType":"Block","src":"4892:84:20","statements":[{"assignments":[4039],"declarations":[{"constant":false,"id":4039,"mutability":"mutable","name":"token","nameLocation":"4917:5:20","nodeType":"VariableDeclaration","scope":4047,"src":"4902:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4038,"nodeType":"UserDefinedTypeName","pathNode":{"id":4037,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"4902:7:20"},"referencedDeclaration":3911,"src":"4902:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4043,"initialValue":{"baseExpression":{"id":4040,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4925:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4042,"indexExpression":{"id":4041,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4032,"src":"4933:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4925:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4902:39:20"},{"expression":{"expression":{"id":4044,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"4958:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4045,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3902,"src":"4958:11:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4036,"id":4046,"nodeType":"Return","src":"4951:18:20"}]},"functionSelector":"c41a360a","id":4048,"implemented":true,"kind":"function","modifiers":[],"name":"getOwner","nameLocation":"4834:8:20","nodeType":"FunctionDefinition","parameters":{"id":4033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4032,"mutability":"mutable","name":"tokenId","nameLocation":"4851:7:20","nodeType":"VariableDeclaration","scope":4048,"src":"4843:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4031,"name":"uint256","nodeType":"ElementaryTypeName","src":"4843:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4842:17:20"},"returnParameters":{"id":4036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4048,"src":"4883:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4034,"name":"address","nodeType":"ElementaryTypeName","src":"4883:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4882:9:20"},"scope":4349,"src":"4825:151:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4065,"nodeType":"Block","src":"5062:94:20","statements":[{"assignments":[4057],"declarations":[{"constant":false,"id":4057,"mutability":"mutable","name":"token","nameLocation":"5087:5:20","nodeType":"VariableDeclaration","scope":4065,"src":"5072:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4056,"nodeType":"UserDefinedTypeName","pathNode":{"id":4055,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"5072:7:20"},"referencedDeclaration":3911,"src":"5072:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4061,"initialValue":{"baseExpression":{"id":4058,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5095:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4060,"indexExpression":{"id":4059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"5103:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5095:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5072:39:20"},{"expression":{"expression":{"id":4062,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"5128:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"valuationReport","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"5128:21:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4054,"id":4064,"nodeType":"Return","src":"5121:28:20"}]},"functionSelector":"4aa10a80","id":4066,"implemented":true,"kind":"function","modifiers":[],"name":"getValuationRpt","nameLocation":"4991:15:20","nodeType":"FunctionDefinition","parameters":{"id":4051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4050,"mutability":"mutable","name":"tokenId","nameLocation":"5015:7:20","nodeType":"VariableDeclaration","scope":4066,"src":"5007:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4049,"name":"uint256","nodeType":"ElementaryTypeName","src":"5007:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5006:17:20"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4066,"src":"5047:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4052,"name":"string","nodeType":"ElementaryTypeName","src":"5047:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5046:15:20"},"scope":4349,"src":"4982:174:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4083,"nodeType":"Block","src":"5240:92:20","statements":[{"assignments":[4075],"declarations":[{"constant":false,"id":4075,"mutability":"mutable","name":"token","nameLocation":"5265:5:20","nodeType":"VariableDeclaration","scope":4083,"src":"5250:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4074,"nodeType":"UserDefinedTypeName","pathNode":{"id":4073,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"5250:7:20"},"referencedDeclaration":3911,"src":"5250:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4079,"initialValue":{"baseExpression":{"id":4076,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5273:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4078,"indexExpression":{"id":4077,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4068,"src":"5281:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5273:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5250:39:20"},{"expression":{"expression":{"id":4080,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"5306:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"legalContract","nodeType":"MemberAccess","referencedDeclaration":3906,"src":"5306:19:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4072,"id":4082,"nodeType":"Return","src":"5299:26:20"}]},"functionSelector":"308ff127","id":4084,"implemented":true,"kind":"function","modifiers":[],"name":"getLegalContr","nameLocation":"5171:13:20","nodeType":"FunctionDefinition","parameters":{"id":4069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"tokenId","nameLocation":"5193:7:20","nodeType":"VariableDeclaration","scope":4084,"src":"5185:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4067,"name":"uint256","nodeType":"ElementaryTypeName","src":"5185:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5184:17:20"},"returnParameters":{"id":4072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4071,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4084,"src":"5225:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4070,"name":"string","nodeType":"ElementaryTypeName","src":"5225:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5224:15:20"},"scope":4349,"src":"5162:170:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4101,"nodeType":"Block","src":"5401:82:20","statements":[{"assignments":[4093],"declarations":[{"constant":false,"id":4093,"mutability":"mutable","name":"token","nameLocation":"5426:5:20","nodeType":"VariableDeclaration","scope":4101,"src":"5411:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4092,"nodeType":"UserDefinedTypeName","pathNode":{"id":4091,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"5411:7:20"},"referencedDeclaration":3911,"src":"5411:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4097,"initialValue":{"baseExpression":{"id":4094,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5434:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4096,"indexExpression":{"id":4095,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"5442:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5434:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5411:39:20"},{"expression":{"expression":{"id":4098,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4093,"src":"5467:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3908,"src":"5467:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4090,"id":4100,"nodeType":"Return","src":"5460:16:20"}]},"functionSelector":"fcee45f4","id":4102,"implemented":true,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"5347:6:20","nodeType":"FunctionDefinition","parameters":{"id":4087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"tokenId","nameLocation":"5362:7:20","nodeType":"VariableDeclaration","scope":4102,"src":"5354:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4085,"name":"uint256","nodeType":"ElementaryTypeName","src":"5354:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5353:17:20"},"returnParameters":{"id":4090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4102,"src":"5392:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4088,"name":"uint256","nodeType":"ElementaryTypeName","src":"5392:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5391:9:20"},"scope":4349,"src":"5338:145:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4119,"nodeType":"Block","src":"5553:83:20","statements":[{"assignments":[4111],"declarations":[{"constant":false,"id":4111,"mutability":"mutable","name":"token","nameLocation":"5578:5:20","nodeType":"VariableDeclaration","scope":4119,"src":"5563:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4110,"nodeType":"UserDefinedTypeName","pathNode":{"id":4109,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"5563:7:20"},"referencedDeclaration":3911,"src":"5563:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4115,"initialValue":{"baseExpression":{"id":4112,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"5586:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4114,"indexExpression":{"id":4113,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5594:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5586:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5563:39:20"},{"expression":{"expression":{"id":4116,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5619:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rate","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"5619:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4108,"id":4118,"nodeType":"Return","src":"5612:17:20"}]},"functionSelector":"57764094","id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"getRate","nameLocation":"5498:7:20","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4104,"mutability":"mutable","name":"tokenId","nameLocation":"5514:7:20","nodeType":"VariableDeclaration","scope":4120,"src":"5506:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4103,"name":"uint256","nodeType":"ElementaryTypeName","src":"5506:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5505:17:20"},"returnParameters":{"id":4108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4120,"src":"5544:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4106,"name":"uint256","nodeType":"ElementaryTypeName","src":"5544:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5543:9:20"},"scope":4349,"src":"5489:147:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4230,"nodeType":"Block","src":"6535:792:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4141,"name":"_legalContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"6553:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":4143,"indexExpression":{"id":4142,"name":"legalContr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"6569:10:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6553:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6584:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6553:32:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546869732061737365742068617320616c7265616479206265656e20746f6b656e697a65642e","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6587:40:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_048d1d55885f31d97d9e91ff9218b71d61cbd9c58fe78fffe2a74206bc0fcd71","typeString":"literal_string \"This asset has already been tokenized.\""},"value":"This asset has already been tokenized."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_048d1d55885f31d97d9e91ff9218b71d61cbd9c58fe78fffe2a74206bc0fcd71","typeString":"literal_string \"This asset has already been tokenized.\""}],"id":4140,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6545:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6545:83:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4148,"nodeType":"ExpressionStatement","src":"6545:83:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4150,"name":"totalAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"6646:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3530","id":4151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6658:2:20","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"6646:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e74732065786365656473206c696d6974","id":4153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6662:23:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_245b480e3b3571387aeccc24a0e30729b808c7ff4317e4407c32bec09b406d5e","typeString":"literal_string \"Amounts exceeds limit\""},"value":"Amounts exceeds limit"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245b480e3b3571387aeccc24a0e30729b808c7ff4317e4407c32bec09b406d5e","typeString":"literal_string \"Amounts exceeds limit\""}],"id":4149,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6638:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6638:48:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4155,"nodeType":"ExpressionStatement","src":"6638:48:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4156,"name":"incrementTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"6697:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6697:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4158,"nodeType":"ExpressionStatement","src":"6697:18:20"},{"assignments":[4160],"declarations":[{"constant":false,"id":4160,"mutability":"mutable","name":"newTokenId","nameLocation":"6742:10:20","nodeType":"VariableDeclaration","scope":4230,"src":"6734:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4159,"name":"uint256","nodeType":"ElementaryTypeName","src":"6734:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4162,"initialValue":{"id":4161,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"6755:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6734:29:20"},{"eventCall":{"arguments":[{"expression":{"id":4164,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6789:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"6789:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4166,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"6806:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4167,"name":"totalAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"6818:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4168,"name":"assetOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"6828:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4169,"name":"valueRpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"6840:8:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4170,"name":"legalContr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"6850:10:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4171,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"6862:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4163,"name":"DRTokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"6779:9:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,address,string memory,string memory,uint256)"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6779:88:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4173,"nodeType":"EmitStatement","src":"6774:93:20"},{"assignments":[4176],"declarations":[{"constant":false,"id":4176,"mutability":"mutable","name":"token","nameLocation":"6978:5:20","nodeType":"VariableDeclaration","scope":4230,"src":"6962:21:20","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4175,"nodeType":"UserDefinedTypeName","pathNode":{"id":4174,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"6962:7:20"},"referencedDeclaration":3911,"src":"6962:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4180,"initialValue":{"baseExpression":{"id":4177,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"6986:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4179,"indexExpression":{"id":4178,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"6994:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6986:17:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6962:41:20"},{"expression":{"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4181,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7013:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"7013:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4184,"name":"totalAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"7033:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7013:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4186,"nodeType":"ExpressionStatement","src":"7013:28:20"},{"expression":{"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4187,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7051:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3902,"src":"7051:11:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4190,"name":"assetOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"7065:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7051:24:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4192,"nodeType":"ExpressionStatement","src":"7051:24:20"},{"expression":{"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4193,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7085:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"valuationReport","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"7085:21:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4196,"name":"valueRpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"7109:8:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"7085:32:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4198,"nodeType":"ExpressionStatement","src":"7085:32:20"},{"expression":{"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4199,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7127:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4201,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"legalContract","nodeType":"MemberAccess","referencedDeclaration":3906,"src":"7127:19:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4202,"name":"legalContr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"7149:10:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"7127:32:20","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4204,"nodeType":"ExpressionStatement","src":"7127:32:20"},{"expression":{"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4205,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7169:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3908,"src":"7169:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4208,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"7181:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7169:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4210,"nodeType":"ExpressionStatement","src":"7169:15:20"},{"expression":{"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4211,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"7194:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken storage pointer"}},"id":4213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rate","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"7194:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4214,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"7207:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7194:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4216,"nodeType":"ExpressionStatement","src":"7194:17:20"},{"expression":{"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4217,"name":"_legalContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"7222:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":4219,"indexExpression":{"id":4218,"name":"legalContr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"7238:10:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7222:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4220,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"7252:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7222:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4222,"nodeType":"ExpressionStatement","src":"7222:38:20"},{"expression":{"arguments":[{"id":4224,"name":"platform_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"7277:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4225,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"7295:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4226,"name":"totalAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"7307:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":4227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7317:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4223,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"7271:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7271:49:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4229,"nodeType":"ExpressionStatement","src":"7271:49:20"}]},"documentation":{"id":4121,"nodeType":"StructuredDocumentation","src":"5642:721:20","text":" @dev Creates `totalAmt` tokens of token type `newTokenId`, by calling ERC1155 _mint function.\n Can only be called by the current admin.\n \n Emits a {DRTokenID} event.\n Emits {TransferSingle} event via ERC1155 library.\n Requirements:\n - `legalContr` must not have been used for another token ID.\n @param assetOwner - Asset Owner wallet address\n @param totalAmt - Total number of tokens for unique token ID\n @param valueRpt - File Hash of Valuation Report\n @param legalContr - File Hash of Legal Contract\n @param fee - Fees to be paid to platform owner for sale proceedings\n @param rate - token rate for the sale"},"functionSelector":"b521b133","id":4231,"implemented":true,"kind":"function","modifiers":[{"id":4136,"kind":"modifierInvocation","modifierName":{"id":4135,"name":"onlyAdmin","nodeType":"IdentifierPath","referencedDeclaration":3889,"src":"6511:9:20"},"nodeType":"ModifierInvocation","src":"6511:9:20"},{"id":4138,"kind":"modifierInvocation","modifierName":{"id":4137,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":629,"src":"6521:13:20"},"nodeType":"ModifierInvocation","src":"6521:13:20"}],"name":"mintToken","nameLocation":"6377:9:20","nodeType":"FunctionDefinition","parameters":{"id":4134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4123,"mutability":"mutable","name":"assetOwner","nameLocation":"6395:10:20","nodeType":"VariableDeclaration","scope":4231,"src":"6387:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4122,"name":"address","nodeType":"ElementaryTypeName","src":"6387:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"totalAmt","nameLocation":"6415:8:20","nodeType":"VariableDeclaration","scope":4231,"src":"6407:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint256","nodeType":"ElementaryTypeName","src":"6407:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4127,"mutability":"mutable","name":"valueRpt","nameLocation":"6439:8:20","nodeType":"VariableDeclaration","scope":4231,"src":"6425:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4126,"name":"string","nodeType":"ElementaryTypeName","src":"6425:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4129,"mutability":"mutable","name":"legalContr","nameLocation":"6463:10:20","nodeType":"VariableDeclaration","scope":4231,"src":"6449:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4128,"name":"string","nodeType":"ElementaryTypeName","src":"6449:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4131,"mutability":"mutable","name":"fee","nameLocation":"6483:3:20","nodeType":"VariableDeclaration","scope":4231,"src":"6475:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4130,"name":"uint256","nodeType":"ElementaryTypeName","src":"6475:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4133,"mutability":"mutable","name":"rate","nameLocation":"6496:4:20","nodeType":"VariableDeclaration","scope":4231,"src":"6488:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4132,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6386:115:20"},"returnParameters":{"id":4139,"nodeType":"ParameterList","parameters":[],"src":"6535:0:20"},"scope":4349,"src":"6368:959:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4283,"nodeType":"Block","src":"7787:420:20","statements":[{"assignments":[4245],"declarations":[{"constant":false,"id":4245,"mutability":"mutable","name":"tokenContract","nameLocation":"7805:13:20","nodeType":"VariableDeclaration","scope":4283,"src":"7798:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3832","typeString":"contract IERC20"},"typeName":{"id":4244,"nodeType":"UserDefinedTypeName","pathNode":{"id":4243,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":3832,"src":"7798:6:20"},"referencedDeclaration":3832,"src":"7798:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3832","typeString":"contract IERC20"}},"visibility":"internal"}],"id":4249,"initialValue":{"arguments":[{"id":4247,"name":"_contract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"7828:9:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4246,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"7821:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3832_$","typeString":"type(contract IERC20)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7821:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3832","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"7798:40:20"},{"assignments":[4251],"declarations":[{"constant":false,"id":4251,"mutability":"mutable","name":"balance","nameLocation":"7920:7:20","nodeType":"VariableDeclaration","scope":4283,"src":"7912:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4250,"name":"uint256","nodeType":"ElementaryTypeName","src":"7912:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4259,"initialValue":{"arguments":[{"arguments":[{"id":4256,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7962:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_DR_$4349","typeString":"contract DR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DR_$4349","typeString":"contract DR"}],"id":4255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7954:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4254,"name":"address","nodeType":"ElementaryTypeName","src":"7954:7:20","typeDescriptions":{}}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7954:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4252,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"7930:13:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3832","typeString":"contract IERC20"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3771,"src":"7930:23:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7930:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7912:56:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4261,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"7986:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4262,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"7997:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7986:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e74206f6620746f6b656e2077697468647261776e206578636565642062616c616e63652e","id":4264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8006:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_17dae8a879ae2b2f13bfae8beec1dde541d158682b83c46e12bf6eb43ecd3e8f","typeString":"literal_string \"Amount of token withdrawn exceed balance.\""},"value":"Amount of token withdrawn exceed balance."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17dae8a879ae2b2f13bfae8beec1dde541d158682b83c46e12bf6eb43ecd3e8f","typeString":"literal_string \"Amount of token withdrawn exceed balance.\""}],"id":4260,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7978:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7978:72:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4266,"nodeType":"ExpressionStatement","src":"7978:72:20"},{"eventCall":{"arguments":[{"expression":{"id":4268,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8089:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"8089:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4270,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8106:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8106:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4272,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8118:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4273,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"8130:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4267,"name":"TokenWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"8074:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256)"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8074:64:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4275,"nodeType":"EmitStatement","src":"8069:69:20"},{"expression":{"arguments":[{"id":4279,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8180:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4280,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"8192:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4276,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"8157:13:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3832","typeString":"contract IERC20"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3781,"src":"8157:22:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8157:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4282,"nodeType":"ExpressionStatement","src":"8157:43:20"}]},"documentation":{"id":4232,"nodeType":"StructuredDocumentation","src":"7337:347:20","text":" @dev Withdraws any ERC20 from Contract\n Can only be called by the current admin.\n \n Emits a {TokenWithdrawn} event.\n @param _contract - token contact address to withdraw\n @param _recipient - Wallet address to withdraw token to\n @param _amount - Amount of ERC20 token to withdraw"},"functionSelector":"01e33667","id":4284,"implemented":true,"kind":"function","modifiers":[{"id":4241,"kind":"modifierInvocation","modifierName":{"id":4240,"name":"onlyAdmin","nodeType":"IdentifierPath","referencedDeclaration":3889,"src":"7777:9:20"},"nodeType":"ModifierInvocation","src":"7777:9:20"}],"name":"withdrawToken","nameLocation":"7698:13:20","nodeType":"FunctionDefinition","parameters":{"id":4239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4234,"mutability":"mutable","name":"_contract","nameLocation":"7720:9:20","nodeType":"VariableDeclaration","scope":4284,"src":"7712:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4233,"name":"address","nodeType":"ElementaryTypeName","src":"7712:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4236,"mutability":"mutable","name":"_recipient","nameLocation":"7739:10:20","nodeType":"VariableDeclaration","scope":4284,"src":"7731:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4235,"name":"address","nodeType":"ElementaryTypeName","src":"7731:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4238,"mutability":"mutable","name":"_amount","nameLocation":"7759:7:20","nodeType":"VariableDeclaration","scope":4284,"src":"7751:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4237,"name":"uint256","nodeType":"ElementaryTypeName","src":"7751:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7711:56:20"},"returnParameters":{"id":4242,"nodeType":"ParameterList","parameters":[],"src":"7787:0:20"},"scope":4349,"src":"7689:518:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4347,"nodeType":"Block","src":"9005:428:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4295,"name":"_tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"9023:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4296,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"9035:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9023:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e20494420646f65736e27742065786973742e","id":4298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9039:25:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_85cf8b9f8561e0d6e218c757218c60912bfc149fb4d146030b0e05ffd2e40325","typeString":"literal_string \"Token ID doesn't exist.\""},"value":"Token ID doesn't exist."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_85cf8b9f8561e0d6e218c757218c60912bfc149fb4d146030b0e05ffd2e40325","typeString":"literal_string \"Token ID doesn't exist.\""}],"id":4294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9015:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9015:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4300,"nodeType":"ExpressionStatement","src":"9015:50:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4305,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9101:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_DR_$4349","typeString":"contract DR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DR_$4349","typeString":"contract DR"}],"id":4304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9093:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4303,"name":"address","nodeType":"ElementaryTypeName","src":"9093:7:20","typeDescriptions":{}}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9093:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4307,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"9108:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4302,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"9083:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9083:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4309,"name":"tokenAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"9115:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9083:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e756d626572206f6620746f6b656e73207075726368617365642065786365656420746f6b656e7320617661696c61626c652e","id":4311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:53:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_525088f24019467d21944c4a5381b76afb629a87758f322f4600e8d76a9df151","typeString":"literal_string \"Number of tokens purchased exceed tokens available.\""},"value":"Number of tokens purchased exceed tokens available."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_525088f24019467d21944c4a5381b76afb629a87758f322f4600e8d76a9df151","typeString":"literal_string \"Number of tokens purchased exceed tokens available.\""}],"id":4301,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9075:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9075:104:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4313,"nodeType":"ExpressionStatement","src":"9075:104:20"},{"assignments":[4316],"declarations":[{"constant":false,"id":4316,"mutability":"mutable","name":"token","nameLocation":"9205:5:20","nodeType":"VariableDeclaration","scope":4347,"src":"9190:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken"},"typeName":{"id":4315,"nodeType":"UserDefinedTypeName","pathNode":{"id":4314,"name":"DRToken","nodeType":"IdentifierPath","referencedDeclaration":3911,"src":"9190:7:20"},"referencedDeclaration":3911,"src":"9190:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage_ptr","typeString":"struct DR.DRToken"}},"visibility":"internal"}],"id":4320,"initialValue":{"baseExpression":{"id":4317,"name":"drToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"9213:7:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_DRToken_$3911_storage_$","typeString":"mapping(uint256 => struct DR.DRToken storage ref)"}},"id":4319,"indexExpression":{"id":4318,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"9221:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9213:11:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_storage","typeString":"struct DR.DRToken storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9190:34:20"},{"assignments":[4322],"declarations":[{"constant":false,"id":4322,"mutability":"mutable","name":"rate","nameLocation":"9251:4:20","nodeType":"VariableDeclaration","scope":4347,"src":"9243:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4321,"name":"uint256","nodeType":"ElementaryTypeName","src":"9243:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4325,"initialValue":{"expression":{"id":4323,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"9258:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_DRToken_$3911_memory_ptr","typeString":"struct DR.DRToken memory"}},"id":4324,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rate","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"9258:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9243:25:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4327,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9287:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"9287:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4329,"name":"tokenAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"9300:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4330,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"9309:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9300:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9287:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420455448","id":4333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9315:18:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1","typeString":"literal_string \"Insufficient ETH\""},"value":"Insufficient ETH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1","typeString":"literal_string \"Insufficient ETH\""}],"id":4326,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9279:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9279:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4335,"nodeType":"ExpressionStatement","src":"9279:55:20"},{"expression":{"arguments":[{"id":4339,"name":"platform_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"9376:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4340,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9394:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9394:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4342,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"9406:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4343,"name":"tokenAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"9410:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"307830","id":4344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9420:5:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810","typeString":"literal_string \"0x0\""},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810","typeString":"literal_string \"0x0\""}],"expression":{"id":4336,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"9353:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DR_$4349_$","typeString":"type(contract super DR)"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":977,"src":"9353:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9353:73:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4346,"nodeType":"ExpressionStatement","src":"9353:73:20"}]},"documentation":{"id":4285,"nodeType":"StructuredDocumentation","src":"8213:708:20","text":" @dev Transfers `tokenAmt` tokens of token type `id` from `platform_address` to `investor`\n by calling ERC1155 safeTransferFrom function.\n Emits a {TransferSingle} event via ERC1155 library.\n \n Requirements:\n - `id` must be equal or less than current Token ID.\n - `tokenAmt` must be equal or less than balance of Proxy Contract\n Transfers the payable amount of ETH equivalent to amount of tokens multiplied by the token rate.\n \n Requirements:\n - Paid ETH amount must be equal or more than `tokenAmt` multiplied by the token rate.\n @param id - Token ID\n @param tokenAmt - Number of tokens purchased"},"functionSelector":"057466ea","id":4348,"implemented":true,"kind":"function","modifiers":[{"id":4292,"kind":"modifierInvocation","modifierName":{"id":4291,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":629,"src":"8991:13:20"},"nodeType":"ModifierInvocation","src":"8991:13:20"}],"name":"buyToken","nameLocation":"8935:8:20","nodeType":"FunctionDefinition","parameters":{"id":4290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4287,"mutability":"mutable","name":"id","nameLocation":"8952:2:20","nodeType":"VariableDeclaration","scope":4348,"src":"8944:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4286,"name":"uint256","nodeType":"ElementaryTypeName","src":"8944:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"tokenAmt","nameLocation":"8964:8:20","nodeType":"VariableDeclaration","scope":4348,"src":"8956:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4288,"name":"uint256","nodeType":"ElementaryTypeName","src":"8956:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8943:30:20"},"returnParameters":{"id":4293,"nodeType":"ParameterList","parameters":[],"src":"9005:0:20"},"scope":4349,"src":"8926:507:20","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4350,"src":"783:8653:20","usedErrors":[]}],"src":"33:9403:20"},"id":20}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd25b5dd88ee621810335aa7272faeeb2a4c4151b19ce4ac0d7ce75a347bb53b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2580,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2873,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2580,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611561806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610e3c565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610e7f565b610237565b60405190151581526020016100a9565b6100e86100e3366004610ea3565b6102d4565b6040516100a99190610f09565b610108610103366004611068565b610368565b005b61011d610118366004611112565b61040a565b6040516100a99190611218565b61010861013836600461122b565b610548565b6100c561014b366004611267565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61010861018736600461129a565b610557565b60006001600160a01b03831661020f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061029a57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806102ce57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6060606780546102e3906112ff565b80601f016020809104026020016040519081016040528092919081815260200182805461030f906112ff565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103845750610384853361014b565b6103f65760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610206565b61040385858585856105f2565b5050505050565b606081518351146104835760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610206565b6000835167ffffffffffffffff81111561049f5761049f610f1c565b6040519080825280602002602001820160405280156104c8578160200160208202803683370190505b50905060005b8451811015610540576105138582815181106104ec576104ec61133a565b60200260200101518583815181106105065761050661133a565b602002602001015161018c565b8282815181106105255761052561133a565b602090810291909101015261053981611366565b90506104ce565b509392505050565b610553338383610868565b5050565b6001600160a01b0385163314806105735750610573853361014b565b6105e55760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610206565b610403858585858561095d565b81518351146106695760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610206565b6001600160a01b0384166106cd5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610206565b3360005b84518110156107fa5760008582815181106106ee576106ee61133a565b60200260200101519050600085838151811061070c5761070c61133a565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156107a05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610206565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906107df908490611381565b92505081905550505050806107f390611366565b90506106d1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161084a929190611399565b60405180910390a4610860818787878787610b0c565b505050505050565b816001600160a01b0316836001600160a01b031614156108f05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610206565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166109c15760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610206565b3360006109cd85610cca565b905060006109da85610cca565b905060008681526065602090815260408083206001600160a01b038c16845290915290205485811015610a625760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610206565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610aa1908490611381565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b01848a8a8a8a8a610d15565b505050505050505050565b6001600160a01b0384163b156108605760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610b5090899089908890889088906004016113c7565b602060405180830381600087803b158015610b6a57600080fd5b505af1925050508015610b9a575060408051601f3d908101601f19168201909252610b9791810190611425565b60015b610c5057610ba6611442565b806308c379a01415610be05750610bbb61145e565b80610bc65750610be2565b8060405162461bcd60e51b81526004016102069190610f09565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610206565b6001600160e01b0319811663bc197c8160e01b14610cc15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610206565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610d0457610d0461133a565b602090810291909101015292915050565b6001600160a01b0384163b156108605760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610d5990899089908890889088906004016114e8565b602060405180830381600087803b158015610d7357600080fd5b505af1925050508015610da3575060408051601f3d908101601f19168201909252610da091810190611425565b60015b610daf57610ba6611442565b6001600160e01b0319811663f23a6e6160e01b14610cc15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610206565b80356001600160a01b0381168114610e3757600080fd5b919050565b60008060408385031215610e4f57600080fd5b610e5883610e20565b946020939093013593505050565b6001600160e01b031981168114610e7c57600080fd5b50565b600060208284031215610e9157600080fd5b8135610e9c81610e66565b9392505050565b600060208284031215610eb557600080fd5b5035919050565b6000815180845260005b81811015610ee257602081850181015186830182015201610ec6565b81811115610ef4576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e9c6020830184610ebc565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610f5857610f58610f1c565b6040525050565b600067ffffffffffffffff821115610f7957610f79610f1c565b5060051b60200190565b600082601f830112610f9457600080fd5b81356020610fa182610f5f565b604051610fae8282610f32565b83815260059390931b8501820192828101915086841115610fce57600080fd5b8286015b84811015610fe95780358352918301918301610fd2565b509695505050505050565b600082601f83011261100557600080fd5b813567ffffffffffffffff81111561101f5761101f610f1c565b604051611036601f8301601f191660200182610f32565b81815284602083860101111561104b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561108057600080fd5b61108986610e20565b945061109760208701610e20565b9350604086013567ffffffffffffffff808211156110b457600080fd5b6110c089838a01610f83565b945060608801359150808211156110d657600080fd5b6110e289838a01610f83565b935060808801359150808211156110f857600080fd5b5061110588828901610ff4565b9150509295509295909350565b6000806040838503121561112557600080fd5b823567ffffffffffffffff8082111561113d57600080fd5b818501915085601f83011261115157600080fd5b8135602061115e82610f5f565b60405161116b8282610f32565b83815260059390931b850182019282810191508984111561118b57600080fd5b948201945b838610156111b0576111a186610e20565b82529482019490820190611190565b965050860135925050808211156111c657600080fd5b506111d385828601610f83565b9150509250929050565b600081518084526020808501945080840160005b8381101561120d578151875295820195908201906001016111f1565b509495945050505050565b602081526000610e9c60208301846111dd565b6000806040838503121561123e57600080fd5b61124783610e20565b91506020830135801515811461125c57600080fd5b809150509250929050565b6000806040838503121561127a57600080fd5b61128383610e20565b915061129160208401610e20565b90509250929050565b600080600080600060a086880312156112b257600080fd5b6112bb86610e20565b94506112c960208701610e20565b93506040860135925060608601359150608086013567ffffffffffffffff8111156112f357600080fd5b61110588828901610ff4565b600181811c9082168061131357607f821691505b6020821081141561133457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561137a5761137a611350565b5060010190565b6000821982111561139457611394611350565b500190565b6040815260006113ac60408301856111dd565b82810360208401526113be81856111dd565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526113f360a08301866111dd565b828103606084015261140581866111dd565b905082810360808401526114198185610ebc565b98975050505050505050565b60006020828403121561143757600080fd5b8151610e9c81610e66565b600060033d111561145b5760046000803e5060005160e01c5b90565b600060443d101561146c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561149c57505050505090565b82850191508151818111156114b45750505050505090565b843d87010160208285010111156114ce5750505050505090565b6114dd60208286010187610f32565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261152060a0830184610ebc565b97965050505050505056fea26469706673582212202759b202cd371efd4de5e9567bebd9a419ea176577926b9ae5a32f51f3a902a664736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1561 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xE3C JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7F JUMP JUMPDEST PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1218 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x548 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x129A JUMP JUMPDEST PUSH2 0x557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x20F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x29A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2CE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x2E3 SWAP1 PUSH2 0x12FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x30F SWAP1 PUSH2 0x12FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x384 JUMPI POP PUSH2 0x384 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x3F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH2 0x403 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x5F2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x483 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x540 JUMPI PUSH2 0x513 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EC JUMPI PUSH2 0x4EC PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH2 0x506 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x525 JUMPI PUSH2 0x525 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x539 DUP2 PUSH2 0x1366 JUMP JUMPDEST SWAP1 POP PUSH2 0x4CE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x553 CALLER DUP4 DUP4 PUSH2 0x868 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x573 JUMPI POP PUSH2 0x573 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x5E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH2 0x403 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x95D JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x6CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x70C JUMPI PUSH2 0x70C PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7DF SWAP1 DUP5 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x7F3 SWAP1 PUSH2 0x1366 JUMP JUMPDEST SWAP1 POP PUSH2 0x6D1 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x84A SWAP3 SWAP2 SWAP1 PUSH2 0x1399 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x860 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB0C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x9CD DUP6 PUSH2 0xCCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9DA DUP6 PUSH2 0xCCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xA62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xAA1 SWAP1 DUP5 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xB01 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xD15 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x860 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xB50 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x13C7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB9A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB97 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC50 JUMPI PUSH2 0xBA6 PUSH2 0x1442 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 EQ ISZERO PUSH2 0xBE0 JUMPI POP PUSH2 0xBBB PUSH2 0x145E JUMP JUMPDEST DUP1 PUSH2 0xBC6 JUMPI POP PUSH2 0xBE2 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0xF09 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xCC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD04 JUMPI PUSH2 0xD04 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x860 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xD59 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x14E8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xDA3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDA0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDAF JUMPI PUSH2 0xBA6 PUSH2 0x1442 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xCC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE58 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xE7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE9C DUP2 PUSH2 0xE66 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEE2 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xEC6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xE9C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEBC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF58 JUMPI PUSH2 0xF58 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF79 PUSH2 0xF1C JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xFA1 DUP3 PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFAE DUP3 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xFCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xFE9 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xFD2 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x101F JUMPI PUSH2 0x101F PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1036 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x104B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1080 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1089 DUP7 PUSH2 0xE20 JUMP JUMPDEST SWAP5 POP PUSH2 0x1097 PUSH1 0x20 DUP8 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10C0 DUP10 DUP4 DUP11 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E2 DUP10 DUP4 DUP11 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1105 DUP9 DUP3 DUP10 ADD PUSH2 0xFF4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x113D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x115E DUP3 PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116B DUP3 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x118B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x11B0 JUMPI PUSH2 0x11A1 DUP7 PUSH2 0xE20 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1190 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x11C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D3 DUP6 DUP3 DUP7 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11F1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xE9C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x123E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1247 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1283 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP2 POP PUSH2 0x1291 PUSH1 0x20 DUP5 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12BB DUP7 PUSH2 0xE20 JUMP JUMPDEST SWAP5 POP PUSH2 0x12C9 PUSH1 0x20 DUP8 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1105 DUP9 DUP3 DUP10 ADD PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1313 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1334 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x137A JUMPI PUSH2 0x137A PUSH2 0x1350 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1394 JUMPI PUSH2 0x1394 PUSH2 0x1350 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13AC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x11DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x13BE DUP2 DUP6 PUSH2 0x11DD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x13F3 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x11DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1405 DUP2 DUP7 PUSH2 0x11DD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1419 DUP2 DUP6 PUSH2 0xEBC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE9C DUP2 PUSH2 0xE66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x145B JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x146C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x149C JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x14B4 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14CE JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x14DD PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xF32 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1520 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xEBC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 MSIZE 0xB2 MUL 0xCD CALLDATACOPY 0x1E REVERT 0x4D 0xE5 0xE9 JUMP PUSH28 0xEBD9A419EA176577926B9AE5A32F51F3A902A664736F6C6343000809 STOP CALLER ","sourceMap":"687:17320:5:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1790":{"entryPoint":null,"id":1790,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1946":{"entryPoint":3274,"id":1946,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1771":{"entryPoint":null,"id":1771,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1918":{"entryPoint":2828,"id":1918,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1853":{"entryPoint":3349,"id":1853,"parameterSlots":6,"returnSlots":0},"@_msgSender_2566":{"entryPoint":null,"id":2566,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_1269":{"entryPoint":1522,"id":1269,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1134":{"entryPoint":2397,"id":1134,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1752":{"entryPoint":2152,"id":1752,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_904":{"entryPoint":1034,"id":904,"parameterSlots":2,"returnSlots":1},"@balanceOf_840":{"entryPoint":396,"id":840,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_939":{"entryPoint":null,"id":939,"parameterSlots":2,"returnSlots":1},"@isContract_2273":{"entryPoint":null,"id":2273,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_1017":{"entryPoint":872,"id":1017,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_977":{"entryPoint":1367,"id":977,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_921":{"entryPoint":1352,"id":921,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2868":{"entryPoint":null,"id":2868,"parameterSlots":1,"returnSlots":1},"@supportsInterface_800":{"entryPoint":567,"id":800,"parameterSlots":1,"returnSlots":1},"@uri_812":{"entryPoint":724,"id":812,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":3616,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4711,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":4200,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":4762,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":4651,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3644,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4370,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3711,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":5157,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3747,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":4573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5063,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5352,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4632,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5017,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":3935,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4993,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4863,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3890,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":4966,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4944,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4922,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3868,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":5186,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":5214,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":3686,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:16255:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:21","statements":[{"nodeType":"YulAssignment","src":"73:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:21"},"nodeType":"YulFunctionCall","src":"82:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:21"}]},{"body":{"nodeType":"YulBlock","src":"188:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:21"},"nodeType":"YulFunctionCall","src":"190:12:21"},"nodeType":"YulExpressionStatement","src":"190:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:21"},"nodeType":"YulFunctionCall","src":"131:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:21"},"nodeType":"YulFunctionCall","src":"121:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:21"},"nodeType":"YulFunctionCall","src":"114:73:21"},"nodeType":"YulIf","src":"111:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:21","type":""}],"src":"14:196:21"},{"body":{"nodeType":"YulBlock","src":"302:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:21"},"nodeType":"YulFunctionCall","src":"350:12:21"},"nodeType":"YulExpressionStatement","src":"350:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"323:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"332:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:21"},"nodeType":"YulFunctionCall","src":"319:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"344:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"315:3:21"},"nodeType":"YulFunctionCall","src":"315:32:21"},"nodeType":"YulIf","src":"312:52:21"},{"nodeType":"YulAssignment","src":"373:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"383:18:21"},"nodeType":"YulFunctionCall","src":"383:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"373:6:21"}]},{"nodeType":"YulAssignment","src":"421:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:21"},"nodeType":"YulFunctionCall","src":"444:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"431:12:21"},"nodeType":"YulFunctionCall","src":"431:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"421:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"271:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"283:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"291:6:21","type":""}],"src":"215:254:21"},{"body":{"nodeType":"YulBlock","src":"575:76:21","statements":[{"nodeType":"YulAssignment","src":"585:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"608:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"593:3:21"},"nodeType":"YulFunctionCall","src":"593:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"585:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"627:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"638:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:21"},"nodeType":"YulFunctionCall","src":"620:25:21"},"nodeType":"YulExpressionStatement","src":"620:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"544:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"555:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"566:4:21","type":""}],"src":"474:177:21"},{"body":{"nodeType":"YulBlock","src":"700:133:21","statements":[{"body":{"nodeType":"YulBlock","src":"811:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"820:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"823:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"813:6:21"},"nodeType":"YulFunctionCall","src":"813:12:21"},"nodeType":"YulExpressionStatement","src":"813:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"723:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"734:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"741:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"730:3:21"},"nodeType":"YulFunctionCall","src":"730:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"720:2:21"},"nodeType":"YulFunctionCall","src":"720:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"713:6:21"},"nodeType":"YulFunctionCall","src":"713:97:21"},"nodeType":"YulIf","src":"710:117:21"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"689:5:21","type":""}],"src":"656:177:21"},{"body":{"nodeType":"YulBlock","src":"907:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"953:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"962:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"965:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"955:6:21"},"nodeType":"YulFunctionCall","src":"955:12:21"},"nodeType":"YulExpressionStatement","src":"955:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"928:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"924:3:21"},"nodeType":"YulFunctionCall","src":"924:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"949:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"920:3:21"},"nodeType":"YulFunctionCall","src":"920:32:21"},"nodeType":"YulIf","src":"917:52:21"},{"nodeType":"YulVariableDeclaration","src":"978:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1004:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"991:12:21"},"nodeType":"YulFunctionCall","src":"991:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"982:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1047:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"1023:23:21"},"nodeType":"YulFunctionCall","src":"1023:30:21"},"nodeType":"YulExpressionStatement","src":"1023:30:21"},{"nodeType":"YulAssignment","src":"1062:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1072:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1062:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"873:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"884:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"896:6:21","type":""}],"src":"838:245:21"},{"body":{"nodeType":"YulBlock","src":"1183:92:21","statements":[{"nodeType":"YulAssignment","src":"1193:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1216:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:21"},"nodeType":"YulFunctionCall","src":"1201:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1235:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1260:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1253:6:21"},"nodeType":"YulFunctionCall","src":"1253:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1246:6:21"},"nodeType":"YulFunctionCall","src":"1246:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1228:6:21"},"nodeType":"YulFunctionCall","src":"1228:41:21"},"nodeType":"YulExpressionStatement","src":"1228:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1152:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1163:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1174:4:21","type":""}],"src":"1088:187:21"},{"body":{"nodeType":"YulBlock","src":"1350:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"1396:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1405:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1408:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1398:6:21"},"nodeType":"YulFunctionCall","src":"1398:12:21"},"nodeType":"YulExpressionStatement","src":"1398:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1371:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1380:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1367:3:21"},"nodeType":"YulFunctionCall","src":"1367:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1392:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1363:3:21"},"nodeType":"YulFunctionCall","src":"1363:32:21"},"nodeType":"YulIf","src":"1360:52:21"},{"nodeType":"YulAssignment","src":"1421:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1444:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1431:12:21"},"nodeType":"YulFunctionCall","src":"1431:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1421:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1316:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1327:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1339:6:21","type":""}],"src":"1280:180:21"},{"body":{"nodeType":"YulBlock","src":"1515:422:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1525:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1545:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1539:5:21"},"nodeType":"YulFunctionCall","src":"1539:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1529:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1567:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"1572:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1560:6:21"},"nodeType":"YulFunctionCall","src":"1560:19:21"},"nodeType":"YulExpressionStatement","src":"1560:19:21"},{"nodeType":"YulVariableDeclaration","src":"1588:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1597:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1592:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1659:110:21","statements":[{"nodeType":"YulVariableDeclaration","src":"1673:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1683:4:21","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1677:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1715:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"1720:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1711:3:21"},"nodeType":"YulFunctionCall","src":"1711:11:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1724:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1707:3:21"},"nodeType":"YulFunctionCall","src":"1707:20:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1743:5:21"},{"name":"i","nodeType":"YulIdentifier","src":"1750:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1739:3:21"},"nodeType":"YulFunctionCall","src":"1739:13:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1754:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1735:3:21"},"nodeType":"YulFunctionCall","src":"1735:22:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1729:5:21"},"nodeType":"YulFunctionCall","src":"1729:29:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1700:6:21"},"nodeType":"YulFunctionCall","src":"1700:59:21"},"nodeType":"YulExpressionStatement","src":"1700:59:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1618:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"1621:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1615:2:21"},"nodeType":"YulFunctionCall","src":"1615:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1629:21:21","statements":[{"nodeType":"YulAssignment","src":"1631:17:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1640:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"1643:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1636:3:21"},"nodeType":"YulFunctionCall","src":"1636:12:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1631:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"1611:3:21","statements":[]},"src":"1607:162:21"},{"body":{"nodeType":"YulBlock","src":"1803:62:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1832:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"1837:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1828:3:21"},"nodeType":"YulFunctionCall","src":"1828:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"1846:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1824:3:21"},"nodeType":"YulFunctionCall","src":"1824:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"1853:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1817:6:21"},"nodeType":"YulFunctionCall","src":"1817:38:21"},"nodeType":"YulExpressionStatement","src":"1817:38:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1784:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"1787:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1781:2:21"},"nodeType":"YulFunctionCall","src":"1781:13:21"},"nodeType":"YulIf","src":"1778:87:21"},{"nodeType":"YulAssignment","src":"1874:57:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1889:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1902:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1910:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1898:3:21"},"nodeType":"YulFunctionCall","src":"1898:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1919:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1915:3:21"},"nodeType":"YulFunctionCall","src":"1915:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1894:3:21"},"nodeType":"YulFunctionCall","src":"1894:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1885:3:21"},"nodeType":"YulFunctionCall","src":"1885:39:21"},{"kind":"number","nodeType":"YulLiteral","src":"1926:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:21"},"nodeType":"YulFunctionCall","src":"1881:50:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1874:3:21"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1492:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1499:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1507:3:21","type":""}],"src":"1465:472:21"},{"body":{"nodeType":"YulBlock","src":"2063:99:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2080:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2091:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2073:6:21"},"nodeType":"YulFunctionCall","src":"2073:21:21"},"nodeType":"YulExpressionStatement","src":"2073:21:21"},{"nodeType":"YulAssignment","src":"2103:53:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2129:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2141:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2152:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2137:3:21"},"nodeType":"YulFunctionCall","src":"2137:18:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2111:17:21"},"nodeType":"YulFunctionCall","src":"2111:45:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2103:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2032:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2043:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2054:4:21","type":""}],"src":"1942:220:21"},{"body":{"nodeType":"YulBlock","src":"2199:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2216:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2219:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2209:6:21"},"nodeType":"YulFunctionCall","src":"2209:88:21"},"nodeType":"YulExpressionStatement","src":"2209:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2313:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2316:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2306:6:21"},"nodeType":"YulFunctionCall","src":"2306:15:21"},"nodeType":"YulExpressionStatement","src":"2306:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2340:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:21"},"nodeType":"YulFunctionCall","src":"2330:15:21"},"nodeType":"YulExpressionStatement","src":"2330:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2167:184:21"},{"body":{"nodeType":"YulBlock","src":"2403:202:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2413:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2435:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2451:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2457:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2447:3:21"},"nodeType":"YulFunctionCall","src":"2447:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2466:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2462:3:21"},"nodeType":"YulFunctionCall","src":"2462:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2443:3:21"},"nodeType":"YulFunctionCall","src":"2443:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2431:3:21"},"nodeType":"YulFunctionCall","src":"2431:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2417:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2546:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2548:16:21"},"nodeType":"YulFunctionCall","src":"2548:18:21"},"nodeType":"YulExpressionStatement","src":"2548:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2489:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2501:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2486:2:21"},"nodeType":"YulFunctionCall","src":"2486:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2525:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2537:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2522:2:21"},"nodeType":"YulFunctionCall","src":"2522:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2483:2:21"},"nodeType":"YulFunctionCall","src":"2483:62:21"},"nodeType":"YulIf","src":"2480:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2584:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2588:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2577:6:21"},"nodeType":"YulFunctionCall","src":"2577:22:21"},"nodeType":"YulExpressionStatement","src":"2577:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2385:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"2393:4:21","type":""}],"src":"2356:249:21"},{"body":{"nodeType":"YulBlock","src":"2679:114:21","statements":[{"body":{"nodeType":"YulBlock","src":"2723:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2725:16:21"},"nodeType":"YulFunctionCall","src":"2725:18:21"},"nodeType":"YulExpressionStatement","src":"2725:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2695:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2703:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2692:2:21"},"nodeType":"YulFunctionCall","src":"2692:30:21"},"nodeType":"YulIf","src":"2689:56:21"},{"nodeType":"YulAssignment","src":"2754:33:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2770:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2773:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2766:3:21"},"nodeType":"YulFunctionCall","src":"2766:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"2782:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2762:3:21"},"nodeType":"YulFunctionCall","src":"2762:25:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2754:4:21"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2659:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2670:4:21","type":""}],"src":"2610:183:21"},{"body":{"nodeType":"YulBlock","src":"2862:660:21","statements":[{"body":{"nodeType":"YulBlock","src":"2911:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2920:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2923:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2913:6:21"},"nodeType":"YulFunctionCall","src":"2913:12:21"},"nodeType":"YulExpressionStatement","src":"2913:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2890:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2898:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2886:3:21"},"nodeType":"YulFunctionCall","src":"2886:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"2905:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2882:3:21"},"nodeType":"YulFunctionCall","src":"2882:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2875:6:21"},"nodeType":"YulFunctionCall","src":"2875:35:21"},"nodeType":"YulIf","src":"2872:55:21"},{"nodeType":"YulVariableDeclaration","src":"2936:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2959:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2946:12:21"},"nodeType":"YulFunctionCall","src":"2946:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2940:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2975:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2985:4:21","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2979:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2998:53:21","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3048:2:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"3008:39:21"},"nodeType":"YulFunctionCall","src":"3008:43:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3002:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3060:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3080:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3074:5:21"},"nodeType":"YulFunctionCall","src":"3074:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3064:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3112:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"3120:2:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3092:19:21"},"nodeType":"YulFunctionCall","src":"3092:31:21"},"nodeType":"YulExpressionStatement","src":"3092:31:21"},{"nodeType":"YulVariableDeclaration","src":"3132:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3143:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3136:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3165:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3173:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3158:6:21"},"nodeType":"YulFunctionCall","src":"3158:18:21"},"nodeType":"YulExpressionStatement","src":"3158:18:21"},{"nodeType":"YulAssignment","src":"3185:22:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3196:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"3204:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3192:3:21"},"nodeType":"YulFunctionCall","src":"3192:15:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3185:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"3216:46:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3238:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3250:1:21","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3253:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3246:3:21"},"nodeType":"YulFunctionCall","src":"3246:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3234:3:21"},"nodeType":"YulFunctionCall","src":"3234:23:21"},{"name":"_2","nodeType":"YulIdentifier","src":"3259:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3230:3:21"},"nodeType":"YulFunctionCall","src":"3230:32:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3220:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3290:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3299:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3302:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3292:6:21"},"nodeType":"YulFunctionCall","src":"3292:12:21"},"nodeType":"YulExpressionStatement","src":"3292:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3277:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"3285:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3274:2:21"},"nodeType":"YulFunctionCall","src":"3274:15:21"},"nodeType":"YulIf","src":"3271:35:21"},{"nodeType":"YulVariableDeclaration","src":"3315:26:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3330:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"3338:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3326:3:21"},"nodeType":"YulFunctionCall","src":"3326:15:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3319:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3406:86:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3427:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3445:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3432:12:21"},"nodeType":"YulFunctionCall","src":"3432:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3420:6:21"},"nodeType":"YulFunctionCall","src":"3420:30:21"},"nodeType":"YulExpressionStatement","src":"3420:30:21"},{"nodeType":"YulAssignment","src":"3463:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3474:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"3479:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3470:3:21"},"nodeType":"YulFunctionCall","src":"3470:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3463:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3361:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3366:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3358:2:21"},"nodeType":"YulFunctionCall","src":"3358:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3374:23:21","statements":[{"nodeType":"YulAssignment","src":"3376:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3387:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"3392:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3383:3:21"},"nodeType":"YulFunctionCall","src":"3383:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3376:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3354:3:21","statements":[]},"src":"3350:142:21"},{"nodeType":"YulAssignment","src":"3501:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3510:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3501:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2836:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2844:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2852:5:21","type":""}],"src":"2798:724:21"},{"body":{"nodeType":"YulBlock","src":"3579:503:21","statements":[{"body":{"nodeType":"YulBlock","src":"3628:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3637:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3640:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3630:6:21"},"nodeType":"YulFunctionCall","src":"3630:12:21"},"nodeType":"YulExpressionStatement","src":"3630:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3607:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3615:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3603:3:21"},"nodeType":"YulFunctionCall","src":"3603:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3622:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3599:3:21"},"nodeType":"YulFunctionCall","src":"3599:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3592:6:21"},"nodeType":"YulFunctionCall","src":"3592:35:21"},"nodeType":"YulIf","src":"3589:55:21"},{"nodeType":"YulVariableDeclaration","src":"3653:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3676:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3663:12:21"},"nodeType":"YulFunctionCall","src":"3663:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3657:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3722:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3724:16:21"},"nodeType":"YulFunctionCall","src":"3724:18:21"},"nodeType":"YulExpressionStatement","src":"3724:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3698:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"3702:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3695:2:21"},"nodeType":"YulFunctionCall","src":"3695:26:21"},"nodeType":"YulIf","src":"3692:52:21"},{"nodeType":"YulVariableDeclaration","src":"3753:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3773:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3767:5:21"},"nodeType":"YulFunctionCall","src":"3767:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3757:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3805:6:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3825:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"3829:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3821:3:21"},"nodeType":"YulFunctionCall","src":"3821:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3840:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3836:3:21"},"nodeType":"YulFunctionCall","src":"3836:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3817:3:21"},"nodeType":"YulFunctionCall","src":"3817:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"3846:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:21"},"nodeType":"YulFunctionCall","src":"3813:38:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3785:19:21"},"nodeType":"YulFunctionCall","src":"3785:67:21"},"nodeType":"YulExpressionStatement","src":"3785:67:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3868:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3876:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3861:6:21"},"nodeType":"YulFunctionCall","src":"3861:18:21"},"nodeType":"YulExpressionStatement","src":"3861:18:21"},{"body":{"nodeType":"YulBlock","src":"3927:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3936:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3939:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3929:6:21"},"nodeType":"YulFunctionCall","src":"3929:12:21"},"nodeType":"YulExpressionStatement","src":"3929:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3902:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3910:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3898:3:21"},"nodeType":"YulFunctionCall","src":"3898:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"3915:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3894:3:21"},"nodeType":"YulFunctionCall","src":"3894:26:21"},{"name":"end","nodeType":"YulIdentifier","src":"3922:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3891:2:21"},"nodeType":"YulFunctionCall","src":"3891:35:21"},"nodeType":"YulIf","src":"3888:55:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3969:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3977:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3965:3:21"},"nodeType":"YulFunctionCall","src":"3965:17:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3988:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3996:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3984:3:21"},"nodeType":"YulFunctionCall","src":"3984:17:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4003:2:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3952:12:21"},"nodeType":"YulFunctionCall","src":"3952:54:21"},"nodeType":"YulExpressionStatement","src":"3952:54:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4030:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4038:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4026:3:21"},"nodeType":"YulFunctionCall","src":"4026:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"4043:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4022:3:21"},"nodeType":"YulFunctionCall","src":"4022:26:21"},{"kind":"number","nodeType":"YulLiteral","src":"4050:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4015:6:21"},"nodeType":"YulFunctionCall","src":"4015:37:21"},"nodeType":"YulExpressionStatement","src":"4015:37:21"},{"nodeType":"YulAssignment","src":"4061:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4070:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4061:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3553:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3561:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3569:5:21","type":""}],"src":"3527:555:21"},{"body":{"nodeType":"YulBlock","src":"4284:746:21","statements":[{"body":{"nodeType":"YulBlock","src":"4331:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4340:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4343:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4333:6:21"},"nodeType":"YulFunctionCall","src":"4333:12:21"},"nodeType":"YulExpressionStatement","src":"4333:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4305:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4314:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4301:3:21"},"nodeType":"YulFunctionCall","src":"4301:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4326:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4297:3:21"},"nodeType":"YulFunctionCall","src":"4297:33:21"},"nodeType":"YulIf","src":"4294:53:21"},{"nodeType":"YulAssignment","src":"4356:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4385:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4366:18:21"},"nodeType":"YulFunctionCall","src":"4366:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4356:6:21"}]},{"nodeType":"YulAssignment","src":"4404:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4437:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4448:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4433:3:21"},"nodeType":"YulFunctionCall","src":"4433:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4414:18:21"},"nodeType":"YulFunctionCall","src":"4414:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4404:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4461:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4492:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4503:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4488:3:21"},"nodeType":"YulFunctionCall","src":"4488:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4475:12:21"},"nodeType":"YulFunctionCall","src":"4475:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4465:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4516:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4526:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4520:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4571:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4580:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4583:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4573:6:21"},"nodeType":"YulFunctionCall","src":"4573:12:21"},"nodeType":"YulExpressionStatement","src":"4573:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4559:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4567:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4556:2:21"},"nodeType":"YulFunctionCall","src":"4556:14:21"},"nodeType":"YulIf","src":"4553:34:21"},{"nodeType":"YulAssignment","src":"4596:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4639:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4650:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4635:3:21"},"nodeType":"YulFunctionCall","src":"4635:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4659:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4606:28:21"},"nodeType":"YulFunctionCall","src":"4606:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4596:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4676:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4709:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4720:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4705:3:21"},"nodeType":"YulFunctionCall","src":"4705:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4692:12:21"},"nodeType":"YulFunctionCall","src":"4692:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4680:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4753:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4762:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4765:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4755:6:21"},"nodeType":"YulFunctionCall","src":"4755:12:21"},"nodeType":"YulExpressionStatement","src":"4755:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4739:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4749:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4736:2:21"},"nodeType":"YulFunctionCall","src":"4736:16:21"},"nodeType":"YulIf","src":"4733:36:21"},{"nodeType":"YulAssignment","src":"4778:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4821:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4832:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4817:3:21"},"nodeType":"YulFunctionCall","src":"4817:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4843:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4788:28:21"},"nodeType":"YulFunctionCall","src":"4788:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4778:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4860:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4893:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4904:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4889:3:21"},"nodeType":"YulFunctionCall","src":"4889:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4876:12:21"},"nodeType":"YulFunctionCall","src":"4876:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4864:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4938:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4947:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4950:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4940:6:21"},"nodeType":"YulFunctionCall","src":"4940:12:21"},"nodeType":"YulExpressionStatement","src":"4940:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4924:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4934:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4921:2:21"},"nodeType":"YulFunctionCall","src":"4921:16:21"},"nodeType":"YulIf","src":"4918:36:21"},{"nodeType":"YulAssignment","src":"4963:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4994:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5005:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4990:3:21"},"nodeType":"YulFunctionCall","src":"4990:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5016:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4973:16:21"},"nodeType":"YulFunctionCall","src":"4973:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4963:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4218:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4229:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4241:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4249:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4257:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4265:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4273:6:21","type":""}],"src":"4087:943:21"},{"body":{"nodeType":"YulBlock","src":"5172:1071:21","statements":[{"body":{"nodeType":"YulBlock","src":"5218:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5227:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5230:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5220:6:21"},"nodeType":"YulFunctionCall","src":"5220:12:21"},"nodeType":"YulExpressionStatement","src":"5220:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5193:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5202:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5189:3:21"},"nodeType":"YulFunctionCall","src":"5189:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5214:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5185:3:21"},"nodeType":"YulFunctionCall","src":"5185:32:21"},"nodeType":"YulIf","src":"5182:52:21"},{"nodeType":"YulVariableDeclaration","src":"5243:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5270:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5257:12:21"},"nodeType":"YulFunctionCall","src":"5257:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5247:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5289:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5299:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5293:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5344:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5353:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5356:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5346:6:21"},"nodeType":"YulFunctionCall","src":"5346:12:21"},"nodeType":"YulExpressionStatement","src":"5346:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5332:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5340:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5329:2:21"},"nodeType":"YulFunctionCall","src":"5329:14:21"},"nodeType":"YulIf","src":"5326:34:21"},{"nodeType":"YulVariableDeclaration","src":"5369:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5383:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5394:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5379:3:21"},"nodeType":"YulFunctionCall","src":"5379:22:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5373:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5449:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5458:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5461:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5451:6:21"},"nodeType":"YulFunctionCall","src":"5451:12:21"},"nodeType":"YulExpressionStatement","src":"5451:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5428:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"5432:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5424:3:21"},"nodeType":"YulFunctionCall","src":"5424:13:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5439:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5420:3:21"},"nodeType":"YulFunctionCall","src":"5420:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5413:6:21"},"nodeType":"YulFunctionCall","src":"5413:35:21"},"nodeType":"YulIf","src":"5410:55:21"},{"nodeType":"YulVariableDeclaration","src":"5474:26:21","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5497:2:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5484:12:21"},"nodeType":"YulFunctionCall","src":"5484:16:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5478:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5509:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5519:4:21","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5513:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5532:53:21","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5582:2:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5542:39:21"},"nodeType":"YulFunctionCall","src":"5542:43:21"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5536:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5594:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5614:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5608:5:21"},"nodeType":"YulFunctionCall","src":"5608:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5598:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5646:6:21"},{"name":"_5","nodeType":"YulIdentifier","src":"5654:2:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5626:19:21"},"nodeType":"YulFunctionCall","src":"5626:31:21"},"nodeType":"YulExpressionStatement","src":"5626:31:21"},{"nodeType":"YulVariableDeclaration","src":"5666:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5677:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5670:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5699:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"5707:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5692:6:21"},"nodeType":"YulFunctionCall","src":"5692:18:21"},"nodeType":"YulExpressionStatement","src":"5692:18:21"},{"nodeType":"YulAssignment","src":"5719:22:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5730:6:21"},{"name":"_4","nodeType":"YulIdentifier","src":"5738:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5726:3:21"},"nodeType":"YulFunctionCall","src":"5726:15:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5719:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"5750:42:21","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5772:2:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5780:1:21","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5783:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5776:3:21"},"nodeType":"YulFunctionCall","src":"5776:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:21"},"nodeType":"YulFunctionCall","src":"5768:19:21"},{"name":"_4","nodeType":"YulIdentifier","src":"5789:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5764:3:21"},"nodeType":"YulFunctionCall","src":"5764:28:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5754:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5824:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5833:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5836:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5826:6:21"},"nodeType":"YulFunctionCall","src":"5826:12:21"},"nodeType":"YulExpressionStatement","src":"5826:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5807:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5815:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5804:2:21"},"nodeType":"YulFunctionCall","src":"5804:19:21"},"nodeType":"YulIf","src":"5801:39:21"},{"nodeType":"YulVariableDeclaration","src":"5849:22:21","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5864:2:21"},{"name":"_4","nodeType":"YulIdentifier","src":"5868:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5860:3:21"},"nodeType":"YulFunctionCall","src":"5860:11:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5853:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5936:92:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5957:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5981:3:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5962:18:21"},"nodeType":"YulFunctionCall","src":"5962:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5950:6:21"},"nodeType":"YulFunctionCall","src":"5950:36:21"},"nodeType":"YulExpressionStatement","src":"5950:36:21"},{"nodeType":"YulAssignment","src":"5999:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6010:3:21"},{"name":"_4","nodeType":"YulIdentifier","src":"6015:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6006:3:21"},"nodeType":"YulFunctionCall","src":"6006:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5999:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5891:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5896:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5888:2:21"},"nodeType":"YulFunctionCall","src":"5888:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5904:23:21","statements":[{"nodeType":"YulAssignment","src":"5906:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5917:3:21"},{"name":"_4","nodeType":"YulIdentifier","src":"5922:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5913:3:21"},"nodeType":"YulFunctionCall","src":"5913:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5906:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"5884:3:21","statements":[]},"src":"5880:148:21"},{"nodeType":"YulAssignment","src":"6037:16:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6047:6:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6037:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"6062:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6095:9:21"},{"name":"_4","nodeType":"YulIdentifier","src":"6106:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6091:3:21"},"nodeType":"YulFunctionCall","src":"6091:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6078:12:21"},"nodeType":"YulFunctionCall","src":"6078:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6066:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6139:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6148:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6151:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6141:6:21"},"nodeType":"YulFunctionCall","src":"6141:12:21"},"nodeType":"YulExpressionStatement","src":"6141:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6125:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6135:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6122:2:21"},"nodeType":"YulFunctionCall","src":"6122:16:21"},"nodeType":"YulIf","src":"6119:36:21"},{"nodeType":"YulAssignment","src":"6164:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6207:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6218:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6203:3:21"},"nodeType":"YulFunctionCall","src":"6203:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6229:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6174:28:21"},"nodeType":"YulFunctionCall","src":"6174:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6164:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5130:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5141:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5153:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5161:6:21","type":""}],"src":"5035:1208:21"},{"body":{"nodeType":"YulBlock","src":"6309:374:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6319:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6339:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6333:5:21"},"nodeType":"YulFunctionCall","src":"6333:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6323:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6361:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6366:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6354:6:21"},"nodeType":"YulFunctionCall","src":"6354:19:21"},"nodeType":"YulExpressionStatement","src":"6354:19:21"},{"nodeType":"YulVariableDeclaration","src":"6382:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6392:4:21","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6386:2:21","type":""}]},{"nodeType":"YulAssignment","src":"6405:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6416:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6421:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6412:3:21"},"nodeType":"YulFunctionCall","src":"6412:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6405:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"6433:28:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6451:5:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6458:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6447:3:21"},"nodeType":"YulFunctionCall","src":"6447:14:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6437:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6470:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6479:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6474:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6538:120:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6559:3:21"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6570:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6564:5:21"},"nodeType":"YulFunctionCall","src":"6564:13:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6552:6:21"},"nodeType":"YulFunctionCall","src":"6552:26:21"},"nodeType":"YulExpressionStatement","src":"6552:26:21"},{"nodeType":"YulAssignment","src":"6591:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6602:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6607:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6598:3:21"},"nodeType":"YulFunctionCall","src":"6598:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6591:3:21"}]},{"nodeType":"YulAssignment","src":"6623:25:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6637:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6645:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6633:3:21"},"nodeType":"YulFunctionCall","src":"6633:15:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6623:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6500:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"6503:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6497:2:21"},"nodeType":"YulFunctionCall","src":"6497:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6511:18:21","statements":[{"nodeType":"YulAssignment","src":"6513:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6522:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"6525:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:21"},"nodeType":"YulFunctionCall","src":"6518:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6513:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6493:3:21","statements":[]},"src":"6489:169:21"},{"nodeType":"YulAssignment","src":"6667:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"6674:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6667:3:21"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6286:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6293:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6301:3:21","type":""}],"src":"6248:435:21"},{"body":{"nodeType":"YulBlock","src":"6839:110:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6856:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6867:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6849:6:21"},"nodeType":"YulFunctionCall","src":"6849:21:21"},"nodeType":"YulExpressionStatement","src":"6849:21:21"},{"nodeType":"YulAssignment","src":"6879:64:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6916:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6928:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6939:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6924:3:21"},"nodeType":"YulFunctionCall","src":"6924:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6887:28:21"},"nodeType":"YulFunctionCall","src":"6887:56:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6879:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6808:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6819:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6830:4:21","type":""}],"src":"6688:261:21"},{"body":{"nodeType":"YulBlock","src":"7038:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"7084:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7093:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7096:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7086:6:21"},"nodeType":"YulFunctionCall","src":"7086:12:21"},"nodeType":"YulExpressionStatement","src":"7086:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7059:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7068:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7055:3:21"},"nodeType":"YulFunctionCall","src":"7055:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7080:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7051:3:21"},"nodeType":"YulFunctionCall","src":"7051:32:21"},"nodeType":"YulIf","src":"7048:52:21"},{"nodeType":"YulAssignment","src":"7109:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7138:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7119:18:21"},"nodeType":"YulFunctionCall","src":"7119:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7109:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7157:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7187:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7198:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7183:3:21"},"nodeType":"YulFunctionCall","src":"7183:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7170:12:21"},"nodeType":"YulFunctionCall","src":"7170:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7161:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7255:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7264:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7267:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7257:6:21"},"nodeType":"YulFunctionCall","src":"7257:12:21"},"nodeType":"YulExpressionStatement","src":"7257:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7224:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7245:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7238:6:21"},"nodeType":"YulFunctionCall","src":"7238:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7231:6:21"},"nodeType":"YulFunctionCall","src":"7231:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7221:2:21"},"nodeType":"YulFunctionCall","src":"7221:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7214:6:21"},"nodeType":"YulFunctionCall","src":"7214:40:21"},"nodeType":"YulIf","src":"7211:60:21"},{"nodeType":"YulAssignment","src":"7280:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"7290:5:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7280:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6996:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7007:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7019:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7027:6:21","type":""}],"src":"6954:347:21"},{"body":{"nodeType":"YulBlock","src":"7393:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"7439:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7448:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7451:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7441:6:21"},"nodeType":"YulFunctionCall","src":"7441:12:21"},"nodeType":"YulExpressionStatement","src":"7441:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7414:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7423:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7410:3:21"},"nodeType":"YulFunctionCall","src":"7410:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7435:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7406:3:21"},"nodeType":"YulFunctionCall","src":"7406:32:21"},"nodeType":"YulIf","src":"7403:52:21"},{"nodeType":"YulAssignment","src":"7464:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7493:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7474:18:21"},"nodeType":"YulFunctionCall","src":"7474:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7464:6:21"}]},{"nodeType":"YulAssignment","src":"7512:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7545:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7556:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7541:3:21"},"nodeType":"YulFunctionCall","src":"7541:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7522:18:21"},"nodeType":"YulFunctionCall","src":"7522:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7512:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7351:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7362:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7374:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7382:6:21","type":""}],"src":"7306:260:21"},{"body":{"nodeType":"YulBlock","src":"7718:459:21","statements":[{"body":{"nodeType":"YulBlock","src":"7765:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7774:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7777:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7767:6:21"},"nodeType":"YulFunctionCall","src":"7767:12:21"},"nodeType":"YulExpressionStatement","src":"7767:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7739:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"7748:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7735:3:21"},"nodeType":"YulFunctionCall","src":"7735:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"7760:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7731:3:21"},"nodeType":"YulFunctionCall","src":"7731:33:21"},"nodeType":"YulIf","src":"7728:53:21"},{"nodeType":"YulAssignment","src":"7790:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7819:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7800:18:21"},"nodeType":"YulFunctionCall","src":"7800:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7790:6:21"}]},{"nodeType":"YulAssignment","src":"7838:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7871:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7882:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7867:3:21"},"nodeType":"YulFunctionCall","src":"7867:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7848:18:21"},"nodeType":"YulFunctionCall","src":"7848:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7838:6:21"}]},{"nodeType":"YulAssignment","src":"7895:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7922:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7933:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7918:3:21"},"nodeType":"YulFunctionCall","src":"7918:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7905:12:21"},"nodeType":"YulFunctionCall","src":"7905:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7895:6:21"}]},{"nodeType":"YulAssignment","src":"7946:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7973:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7984:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7969:3:21"},"nodeType":"YulFunctionCall","src":"7969:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7956:12:21"},"nodeType":"YulFunctionCall","src":"7956:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7946:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7997:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8028:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8039:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8024:3:21"},"nodeType":"YulFunctionCall","src":"8024:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8011:12:21"},"nodeType":"YulFunctionCall","src":"8011:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8001:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8087:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8096:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8099:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8089:6:21"},"nodeType":"YulFunctionCall","src":"8089:12:21"},"nodeType":"YulExpressionStatement","src":"8089:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8059:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8067:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8056:2:21"},"nodeType":"YulFunctionCall","src":"8056:30:21"},"nodeType":"YulIf","src":"8053:50:21"},{"nodeType":"YulAssignment","src":"8112:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8143:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"8154:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8139:3:21"},"nodeType":"YulFunctionCall","src":"8139:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8163:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8122:16:21"},"nodeType":"YulFunctionCall","src":"8122:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8112:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7652:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7663:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7675:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7683:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7691:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7699:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7707:6:21","type":""}],"src":"7571:606:21"},{"body":{"nodeType":"YulBlock","src":"8356:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8373:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8384:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8366:6:21"},"nodeType":"YulFunctionCall","src":"8366:21:21"},"nodeType":"YulExpressionStatement","src":"8366:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8407:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8418:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8403:3:21"},"nodeType":"YulFunctionCall","src":"8403:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"8423:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8396:6:21"},"nodeType":"YulFunctionCall","src":"8396:30:21"},"nodeType":"YulExpressionStatement","src":"8396:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8446:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8457:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8442:3:21"},"nodeType":"YulFunctionCall","src":"8442:18:21"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8462:34:21","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8435:6:21"},"nodeType":"YulFunctionCall","src":"8435:62:21"},"nodeType":"YulExpressionStatement","src":"8435:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8517:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8528:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8513:3:21"},"nodeType":"YulFunctionCall","src":"8513:18:21"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8533:12:21","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8506:6:21"},"nodeType":"YulFunctionCall","src":"8506:40:21"},"nodeType":"YulExpressionStatement","src":"8506:40:21"},{"nodeType":"YulAssignment","src":"8555:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8567:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8578:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8563:3:21"},"nodeType":"YulFunctionCall","src":"8563:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8555:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8333:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8347:4:21","type":""}],"src":"8182:406:21"},{"body":{"nodeType":"YulBlock","src":"8648:382:21","statements":[{"nodeType":"YulAssignment","src":"8658:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8672:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8675:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8668:3:21"},"nodeType":"YulFunctionCall","src":"8668:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8658:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8689:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8719:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"8725:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8715:3:21"},"nodeType":"YulFunctionCall","src":"8715:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8693:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8766:31:21","statements":[{"nodeType":"YulAssignment","src":"8768:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8782:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8790:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8778:3:21"},"nodeType":"YulFunctionCall","src":"8778:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8768:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8746:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8739:6:21"},"nodeType":"YulFunctionCall","src":"8739:26:21"},"nodeType":"YulIf","src":"8736:61:21"},{"body":{"nodeType":"YulBlock","src":"8856:168:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8877:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8880:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8870:6:21"},"nodeType":"YulFunctionCall","src":"8870:88:21"},"nodeType":"YulExpressionStatement","src":"8870:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8978:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8981:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8971:6:21"},"nodeType":"YulFunctionCall","src":"8971:15:21"},"nodeType":"YulExpressionStatement","src":"8971:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9006:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9009:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8999:6:21"},"nodeType":"YulFunctionCall","src":"8999:15:21"},"nodeType":"YulExpressionStatement","src":"8999:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8812:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8835:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"8843:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8832:2:21"},"nodeType":"YulFunctionCall","src":"8832:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8809:2:21"},"nodeType":"YulFunctionCall","src":"8809:38:21"},"nodeType":"YulIf","src":"8806:218:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8628:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8637:6:21","type":""}],"src":"8593:437:21"},{"body":{"nodeType":"YulBlock","src":"9209:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9226:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9237:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:21"},"nodeType":"YulFunctionCall","src":"9219:21:21"},"nodeType":"YulExpressionStatement","src":"9219:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9260:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9271:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9256:3:21"},"nodeType":"YulFunctionCall","src":"9256:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9276:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9249:6:21"},"nodeType":"YulFunctionCall","src":"9249:30:21"},"nodeType":"YulExpressionStatement","src":"9249:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9299:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9310:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9295:3:21"},"nodeType":"YulFunctionCall","src":"9295:18:21"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9315:34:21","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9288:6:21"},"nodeType":"YulFunctionCall","src":"9288:62:21"},"nodeType":"YulExpressionStatement","src":"9288:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9370:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9381:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9366:3:21"},"nodeType":"YulFunctionCall","src":"9366:18:21"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9386:16:21","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9359:6:21"},"nodeType":"YulFunctionCall","src":"9359:44:21"},"nodeType":"YulExpressionStatement","src":"9359:44:21"},{"nodeType":"YulAssignment","src":"9412:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9424:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9435:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9420:3:21"},"nodeType":"YulFunctionCall","src":"9420:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9412:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9186:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9200:4:21","type":""}],"src":"9035:410:21"},{"body":{"nodeType":"YulBlock","src":"9624:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9641:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9652:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9634:6:21"},"nodeType":"YulFunctionCall","src":"9634:21:21"},"nodeType":"YulExpressionStatement","src":"9634:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9675:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9686:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9671:3:21"},"nodeType":"YulFunctionCall","src":"9671:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9691:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9664:6:21"},"nodeType":"YulFunctionCall","src":"9664:30:21"},"nodeType":"YulExpressionStatement","src":"9664:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9714:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9725:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9710:3:21"},"nodeType":"YulFunctionCall","src":"9710:18:21"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"9730:34:21","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9703:6:21"},"nodeType":"YulFunctionCall","src":"9703:62:21"},"nodeType":"YulExpressionStatement","src":"9703:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9785:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9796:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9781:3:21"},"nodeType":"YulFunctionCall","src":"9781:18:21"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"9801:11:21","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9774:6:21"},"nodeType":"YulFunctionCall","src":"9774:39:21"},"nodeType":"YulExpressionStatement","src":"9774:39:21"},{"nodeType":"YulAssignment","src":"9822:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9834:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9845:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9830:3:21"},"nodeType":"YulFunctionCall","src":"9830:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9822:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9601:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9615:4:21","type":""}],"src":"9450:405:21"},{"body":{"nodeType":"YulBlock","src":"9892:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9909:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9912:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9902:6:21"},"nodeType":"YulFunctionCall","src":"9902:88:21"},"nodeType":"YulExpressionStatement","src":"9902:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10006:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10009:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9999:6:21"},"nodeType":"YulFunctionCall","src":"9999:15:21"},"nodeType":"YulExpressionStatement","src":"9999:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10030:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10033:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10023:6:21"},"nodeType":"YulFunctionCall","src":"10023:15:21"},"nodeType":"YulExpressionStatement","src":"10023:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9860:184:21"},{"body":{"nodeType":"YulBlock","src":"10081:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10098:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10101:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10091:6:21"},"nodeType":"YulFunctionCall","src":"10091:88:21"},"nodeType":"YulExpressionStatement","src":"10091:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10195:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10198:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10188:6:21"},"nodeType":"YulFunctionCall","src":"10188:15:21"},"nodeType":"YulExpressionStatement","src":"10188:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10219:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10222:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10212:6:21"},"nodeType":"YulFunctionCall","src":"10212:15:21"},"nodeType":"YulExpressionStatement","src":"10212:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10049:184:21"},{"body":{"nodeType":"YulBlock","src":"10285:88:21","statements":[{"body":{"nodeType":"YulBlock","src":"10316:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10318:16:21"},"nodeType":"YulFunctionCall","src":"10318:18:21"},"nodeType":"YulExpressionStatement","src":"10318:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10301:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10312:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10308:3:21"},"nodeType":"YulFunctionCall","src":"10308:6:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10298:2:21"},"nodeType":"YulFunctionCall","src":"10298:17:21"},"nodeType":"YulIf","src":"10295:43:21"},{"nodeType":"YulAssignment","src":"10347:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10358:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"10365:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10354:3:21"},"nodeType":"YulFunctionCall","src":"10354:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10347:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10267:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10277:3:21","type":""}],"src":"10238:135:21"},{"body":{"nodeType":"YulBlock","src":"10552:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10569:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10580:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10562:6:21"},"nodeType":"YulFunctionCall","src":"10562:21:21"},"nodeType":"YulExpressionStatement","src":"10562:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10603:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10614:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10599:3:21"},"nodeType":"YulFunctionCall","src":"10599:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10619:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10592:6:21"},"nodeType":"YulFunctionCall","src":"10592:30:21"},"nodeType":"YulExpressionStatement","src":"10592:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10642:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10653:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10638:3:21"},"nodeType":"YulFunctionCall","src":"10638:18:21"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"10658:34:21","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10631:6:21"},"nodeType":"YulFunctionCall","src":"10631:62:21"},"nodeType":"YulExpressionStatement","src":"10631:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10713:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10724:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10709:3:21"},"nodeType":"YulFunctionCall","src":"10709:18:21"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10729:10:21","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10702:6:21"},"nodeType":"YulFunctionCall","src":"10702:38:21"},"nodeType":"YulExpressionStatement","src":"10702:38:21"},{"nodeType":"YulAssignment","src":"10749:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10761:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10772:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10757:3:21"},"nodeType":"YulFunctionCall","src":"10757:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10749:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10529:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10543:4:21","type":""}],"src":"10378:404:21"},{"body":{"nodeType":"YulBlock","src":"10961:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10978:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10989:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10971:6:21"},"nodeType":"YulFunctionCall","src":"10971:21:21"},"nodeType":"YulExpressionStatement","src":"10971:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11012:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11023:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11008:3:21"},"nodeType":"YulFunctionCall","src":"11008:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11028:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11001:6:21"},"nodeType":"YulFunctionCall","src":"11001:30:21"},"nodeType":"YulExpressionStatement","src":"11001:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11051:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11062:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11047:3:21"},"nodeType":"YulFunctionCall","src":"11047:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"11067:34:21","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11040:6:21"},"nodeType":"YulFunctionCall","src":"11040:62:21"},"nodeType":"YulExpressionStatement","src":"11040:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11122:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11133:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11118:3:21"},"nodeType":"YulFunctionCall","src":"11118:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"11138:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11111:6:21"},"nodeType":"YulFunctionCall","src":"11111:35:21"},"nodeType":"YulExpressionStatement","src":"11111:35:21"},{"nodeType":"YulAssignment","src":"11155:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11167:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11178:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11163:3:21"},"nodeType":"YulFunctionCall","src":"11163:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11155:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10938:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10952:4:21","type":""}],"src":"10787:401:21"},{"body":{"nodeType":"YulBlock","src":"11367:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11384:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11395:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11377:6:21"},"nodeType":"YulFunctionCall","src":"11377:21:21"},"nodeType":"YulExpressionStatement","src":"11377:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11418:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11429:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:21"},"nodeType":"YulFunctionCall","src":"11414:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11434:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11407:6:21"},"nodeType":"YulFunctionCall","src":"11407:30:21"},"nodeType":"YulExpressionStatement","src":"11407:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11457:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11468:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11453:3:21"},"nodeType":"YulFunctionCall","src":"11453:18:21"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"11473:34:21","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11446:6:21"},"nodeType":"YulFunctionCall","src":"11446:62:21"},"nodeType":"YulExpressionStatement","src":"11446:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11528:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11539:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11524:3:21"},"nodeType":"YulFunctionCall","src":"11524:18:21"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"11544:12:21","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11517:6:21"},"nodeType":"YulFunctionCall","src":"11517:40:21"},"nodeType":"YulExpressionStatement","src":"11517:40:21"},{"nodeType":"YulAssignment","src":"11566:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11578:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11589:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11574:3:21"},"nodeType":"YulFunctionCall","src":"11574:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11566:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11344:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11358:4:21","type":""}],"src":"11193:406:21"},{"body":{"nodeType":"YulBlock","src":"11652:80:21","statements":[{"body":{"nodeType":"YulBlock","src":"11679:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11681:16:21"},"nodeType":"YulFunctionCall","src":"11681:18:21"},"nodeType":"YulExpressionStatement","src":"11681:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11668:1:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11675:1:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11671:3:21"},"nodeType":"YulFunctionCall","src":"11671:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11665:2:21"},"nodeType":"YulFunctionCall","src":"11665:13:21"},"nodeType":"YulIf","src":"11662:39:21"},{"nodeType":"YulAssignment","src":"11710:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11721:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"11724:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:21"},"nodeType":"YulFunctionCall","src":"11717:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11710:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11635:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"11638:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11644:3:21","type":""}],"src":"11604:128:21"},{"body":{"nodeType":"YulBlock","src":"11966:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11983:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11994:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11976:6:21"},"nodeType":"YulFunctionCall","src":"11976:21:21"},"nodeType":"YulExpressionStatement","src":"11976:21:21"},{"nodeType":"YulVariableDeclaration","src":"12006:70:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12049:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12061:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12072:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12057:3:21"},"nodeType":"YulFunctionCall","src":"12057:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12020:28:21"},"nodeType":"YulFunctionCall","src":"12020:56:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12010:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12096:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12107:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12092:3:21"},"nodeType":"YulFunctionCall","src":"12092:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12116:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"12124:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12112:3:21"},"nodeType":"YulFunctionCall","src":"12112:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12085:6:21"},"nodeType":"YulFunctionCall","src":"12085:50:21"},"nodeType":"YulExpressionStatement","src":"12085:50:21"},{"nodeType":"YulAssignment","src":"12144:52:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12181:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12189:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"12152:28:21"},"nodeType":"YulFunctionCall","src":"12152:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12144:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11927:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11938:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11946:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11957:4:21","type":""}],"src":"11737:465:21"},{"body":{"nodeType":"YulBlock","src":"12381:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12398:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12409:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12391:6:21"},"nodeType":"YulFunctionCall","src":"12391:21:21"},"nodeType":"YulExpressionStatement","src":"12391:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12432:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12443:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12428:3:21"},"nodeType":"YulFunctionCall","src":"12428:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12448:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12421:6:21"},"nodeType":"YulFunctionCall","src":"12421:30:21"},"nodeType":"YulExpressionStatement","src":"12421:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12471:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12482:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12467:3:21"},"nodeType":"YulFunctionCall","src":"12467:18:21"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"12487:34:21","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12460:6:21"},"nodeType":"YulFunctionCall","src":"12460:62:21"},"nodeType":"YulExpressionStatement","src":"12460:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12542:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12553:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12538:3:21"},"nodeType":"YulFunctionCall","src":"12538:18:21"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"12558:11:21","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12531:6:21"},"nodeType":"YulFunctionCall","src":"12531:39:21"},"nodeType":"YulExpressionStatement","src":"12531:39:21"},{"nodeType":"YulAssignment","src":"12579:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12591:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12602:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12587:3:21"},"nodeType":"YulFunctionCall","src":"12587:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12579:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12358:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12372:4:21","type":""}],"src":"12207:405:21"},{"body":{"nodeType":"YulBlock","src":"12746:119:21","statements":[{"nodeType":"YulAssignment","src":"12756:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12768:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12779:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12764:3:21"},"nodeType":"YulFunctionCall","src":"12764:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12756:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12798:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"12809:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12791:6:21"},"nodeType":"YulFunctionCall","src":"12791:25:21"},"nodeType":"YulExpressionStatement","src":"12791:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12836:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12847:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12832:3:21"},"nodeType":"YulFunctionCall","src":"12832:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"12852:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12825:6:21"},"nodeType":"YulFunctionCall","src":"12825:34:21"},"nodeType":"YulExpressionStatement","src":"12825:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12707:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12718:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12726:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12737:4:21","type":""}],"src":"12617:248:21"},{"body":{"nodeType":"YulBlock","src":"13201:519:21","statements":[{"nodeType":"YulVariableDeclaration","src":"13211:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"13221:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13215:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13279:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13294:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13302:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13290:3:21"},"nodeType":"YulFunctionCall","src":"13290:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13272:6:21"},"nodeType":"YulFunctionCall","src":"13272:34:21"},"nodeType":"YulExpressionStatement","src":"13272:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13326:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13337:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13322:3:21"},"nodeType":"YulFunctionCall","src":"13322:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13346:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13354:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13342:3:21"},"nodeType":"YulFunctionCall","src":"13342:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13315:6:21"},"nodeType":"YulFunctionCall","src":"13315:43:21"},"nodeType":"YulExpressionStatement","src":"13315:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13378:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13389:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13374:3:21"},"nodeType":"YulFunctionCall","src":"13374:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13394:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13367:6:21"},"nodeType":"YulFunctionCall","src":"13367:31:21"},"nodeType":"YulExpressionStatement","src":"13367:31:21"},{"nodeType":"YulVariableDeclaration","src":"13407:71:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13450:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13462:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13473:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13458:3:21"},"nodeType":"YulFunctionCall","src":"13458:19:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13421:28:21"},"nodeType":"YulFunctionCall","src":"13421:57:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13411:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13498:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13509:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13494:3:21"},"nodeType":"YulFunctionCall","src":"13494:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13518:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13526:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13514:3:21"},"nodeType":"YulFunctionCall","src":"13514:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13487:6:21"},"nodeType":"YulFunctionCall","src":"13487:50:21"},"nodeType":"YulExpressionStatement","src":"13487:50:21"},{"nodeType":"YulVariableDeclaration","src":"13546:58:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13589:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"13597:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13560:28:21"},"nodeType":"YulFunctionCall","src":"13560:44:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13550:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13624:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13635:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13620:3:21"},"nodeType":"YulFunctionCall","src":"13620:19:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13645:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13653:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13641:3:21"},"nodeType":"YulFunctionCall","src":"13641:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13613:6:21"},"nodeType":"YulFunctionCall","src":"13613:51:21"},"nodeType":"YulExpressionStatement","src":"13613:51:21"},{"nodeType":"YulAssignment","src":"13673:41:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13699:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13707:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13681:17:21"},"nodeType":"YulFunctionCall","src":"13681:33:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13673:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13138:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13149:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13157:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13165:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13173:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13181:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13192:4:21","type":""}],"src":"12870:850:21"},{"body":{"nodeType":"YulBlock","src":"13805:169:21","statements":[{"body":{"nodeType":"YulBlock","src":"13851:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13860:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13863:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13853:6:21"},"nodeType":"YulFunctionCall","src":"13853:12:21"},"nodeType":"YulExpressionStatement","src":"13853:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13826:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13835:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13822:3:21"},"nodeType":"YulFunctionCall","src":"13822:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"13847:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13818:3:21"},"nodeType":"YulFunctionCall","src":"13818:32:21"},"nodeType":"YulIf","src":"13815:52:21"},{"nodeType":"YulVariableDeclaration","src":"13876:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13889:5:21"},"nodeType":"YulFunctionCall","src":"13889:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13880:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13938:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13914:23:21"},"nodeType":"YulFunctionCall","src":"13914:30:21"},"nodeType":"YulExpressionStatement","src":"13914:30:21"},{"nodeType":"YulAssignment","src":"13953:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"13963:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13953:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13771:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13782:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13794:6:21","type":""}],"src":"13725:249:21"},{"body":{"nodeType":"YulBlock","src":"14022:136:21","statements":[{"body":{"nodeType":"YulBlock","src":"14067:85:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14096:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14099:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14102:1:21","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"14081:14:21"},"nodeType":"YulFunctionCall","src":"14081:23:21"},"nodeType":"YulExpressionStatement","src":"14081:23:21"},{"nodeType":"YulAssignment","src":"14117:25:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14128:3:21","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14139:1:21","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14133:5:21"},"nodeType":"YulFunctionCall","src":"14133:8:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14124:3:21"},"nodeType":"YulFunctionCall","src":"14124:18:21"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"14117:3:21"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14038:14:21"},"nodeType":"YulFunctionCall","src":"14038:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"14056:1:21","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14035:2:21"},"nodeType":"YulFunctionCall","src":"14035:23:21"},"nodeType":"YulIf","src":"14032:120:21"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"14014:3:21","type":""}],"src":"13979:179:21"},{"body":{"nodeType":"YulBlock","src":"14210:624:21","statements":[{"body":{"nodeType":"YulBlock","src":"14250:9:21","statements":[{"nodeType":"YulLeave","src":"14252:5:21"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14226:14:21"},"nodeType":"YulFunctionCall","src":"14226:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"14244:4:21","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14223:2:21"},"nodeType":"YulFunctionCall","src":"14223:26:21"},"nodeType":"YulIf","src":"14220:39:21"},{"nodeType":"YulVariableDeclaration","src":"14268:21:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14286:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14280:5:21"},"nodeType":"YulFunctionCall","src":"14280:9:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"14272:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14298:16:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14312:1:21","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14308:3:21"},"nodeType":"YulFunctionCall","src":"14308:6:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14302:2:21","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14338:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"14344:1:21","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14351:14:21"},"nodeType":"YulFunctionCall","src":"14351:16:21"},{"name":"_1","nodeType":"YulIdentifier","src":"14369:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14347:3:21"},"nodeType":"YulFunctionCall","src":"14347:25:21"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"14323:14:21"},"nodeType":"YulFunctionCall","src":"14323:50:21"},"nodeType":"YulExpressionStatement","src":"14323:50:21"},{"nodeType":"YulVariableDeclaration","src":"14382:25:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14402:4:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14396:5:21"},"nodeType":"YulFunctionCall","src":"14396:11:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14386:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14416:26:21","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14426:14:21"},"nodeType":"YulFunctionCall","src":"14426:16:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14420:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14451:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"14461:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14455:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"14537:9:21","statements":[{"nodeType":"YulLeave","src":"14539:5:21"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14497:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"14505:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14494:2:21"},"nodeType":"YulFunctionCall","src":"14494:14:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14517:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14525:4:21","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14513:3:21"},"nodeType":"YulFunctionCall","src":"14513:17:21"},{"name":"_2","nodeType":"YulIdentifier","src":"14532:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14510:2:21"},"nodeType":"YulFunctionCall","src":"14510:25:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14491:2:21"},"nodeType":"YulFunctionCall","src":"14491:45:21"},"nodeType":"YulIf","src":"14488:58:21"},{"nodeType":"YulVariableDeclaration","src":"14555:28:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14570:4:21"},{"name":"offset","nodeType":"YulIdentifier","src":"14576:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14566:3:21"},"nodeType":"YulFunctionCall","src":"14566:17:21"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"14559:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14592:24:21","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14612:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14606:5:21"},"nodeType":"YulFunctionCall","src":"14606:10:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14596:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"14643:9:21","statements":[{"nodeType":"YulLeave","src":"14645:5:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14631:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"14639:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14628:2:21"},"nodeType":"YulFunctionCall","src":"14628:14:21"},"nodeType":"YulIf","src":"14625:27:21"},{"body":{"nodeType":"YulBlock","src":"14734:9:21","statements":[{"nodeType":"YulLeave","src":"14736:5:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14675:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"14680:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14671:3:21"},"nodeType":"YulFunctionCall","src":"14671:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"14689:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14667:3:21"},"nodeType":"YulFunctionCall","src":"14667:27:21"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14704:4:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14710:14:21"},"nodeType":"YulFunctionCall","src":"14710:16:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14700:3:21"},"nodeType":"YulFunctionCall","src":"14700:27:21"},{"name":"_1","nodeType":"YulIdentifier","src":"14729:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14696:3:21"},"nodeType":"YulFunctionCall","src":"14696:36:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14664:2:21"},"nodeType":"YulFunctionCall","src":"14664:69:21"},"nodeType":"YulIf","src":"14661:82:21"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14772:4:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14786:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"14794:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14782:3:21"},"nodeType":"YulFunctionCall","src":"14782:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"14803:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14778:3:21"},"nodeType":"YulFunctionCall","src":"14778:30:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"14752:19:21"},"nodeType":"YulFunctionCall","src":"14752:57:21"},"nodeType":"YulExpressionStatement","src":"14752:57:21"},{"nodeType":"YulAssignment","src":"14818:10:21","value":{"name":"msg","nodeType":"YulIdentifier","src":"14825:3:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14818:3:21"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14202:3:21","type":""}],"src":"14163:671:21"},{"body":{"nodeType":"YulBlock","src":"15013:242:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15030:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15041:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15023:6:21"},"nodeType":"YulFunctionCall","src":"15023:21:21"},"nodeType":"YulExpressionStatement","src":"15023:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15064:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15075:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15060:3:21"},"nodeType":"YulFunctionCall","src":"15060:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15080:2:21","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15053:6:21"},"nodeType":"YulFunctionCall","src":"15053:30:21"},"nodeType":"YulExpressionStatement","src":"15053:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15103:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15114:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15099:3:21"},"nodeType":"YulFunctionCall","src":"15099:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"15119:34:21","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15092:6:21"},"nodeType":"YulFunctionCall","src":"15092:62:21"},"nodeType":"YulExpressionStatement","src":"15092:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15174:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15185:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15170:3:21"},"nodeType":"YulFunctionCall","src":"15170:18:21"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"15190:22:21","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15163:6:21"},"nodeType":"YulFunctionCall","src":"15163:50:21"},"nodeType":"YulExpressionStatement","src":"15163:50:21"},{"nodeType":"YulAssignment","src":"15222:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15234:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15245:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15230:3:21"},"nodeType":"YulFunctionCall","src":"15230:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15222:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14990:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15004:4:21","type":""}],"src":"14839:416:21"},{"body":{"nodeType":"YulBlock","src":"15434:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15451:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15462:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15444:6:21"},"nodeType":"YulFunctionCall","src":"15444:21:21"},"nodeType":"YulExpressionStatement","src":"15444:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15485:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15496:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15481:3:21"},"nodeType":"YulFunctionCall","src":"15481:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15501:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15474:6:21"},"nodeType":"YulFunctionCall","src":"15474:30:21"},"nodeType":"YulExpressionStatement","src":"15474:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15524:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15535:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15520:3:21"},"nodeType":"YulFunctionCall","src":"15520:18:21"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"15540:34:21","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15513:6:21"},"nodeType":"YulFunctionCall","src":"15513:62:21"},"nodeType":"YulExpressionStatement","src":"15513:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15595:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15606:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15591:3:21"},"nodeType":"YulFunctionCall","src":"15591:18:21"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"15611:10:21","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15584:6:21"},"nodeType":"YulFunctionCall","src":"15584:38:21"},"nodeType":"YulExpressionStatement","src":"15584:38:21"},{"nodeType":"YulAssignment","src":"15631:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15643:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15654:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15639:3:21"},"nodeType":"YulFunctionCall","src":"15639:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15631:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15411:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15425:4:21","type":""}],"src":"15260:404:21"},{"body":{"nodeType":"YulBlock","src":"15900:353:21","statements":[{"nodeType":"YulVariableDeclaration","src":"15910:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"15920:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15914:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15978:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15993:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"16001:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15989:3:21"},"nodeType":"YulFunctionCall","src":"15989:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15971:6:21"},"nodeType":"YulFunctionCall","src":"15971:34:21"},"nodeType":"YulExpressionStatement","src":"15971:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16025:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16036:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16021:3:21"},"nodeType":"YulFunctionCall","src":"16021:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16045:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"16053:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16041:3:21"},"nodeType":"YulFunctionCall","src":"16041:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16014:6:21"},"nodeType":"YulFunctionCall","src":"16014:43:21"},"nodeType":"YulExpressionStatement","src":"16014:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16077:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16088:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16073:3:21"},"nodeType":"YulFunctionCall","src":"16073:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"16093:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16066:6:21"},"nodeType":"YulFunctionCall","src":"16066:34:21"},"nodeType":"YulExpressionStatement","src":"16066:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16120:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16131:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16116:3:21"},"nodeType":"YulFunctionCall","src":"16116:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"16136:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16109:6:21"},"nodeType":"YulFunctionCall","src":"16109:34:21"},"nodeType":"YulExpressionStatement","src":"16109:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16163:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16174:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16159:3:21"},"nodeType":"YulFunctionCall","src":"16159:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"16180:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16152:6:21"},"nodeType":"YulFunctionCall","src":"16152:32:21"},"nodeType":"YulExpressionStatement","src":"16152:32:21"},{"nodeType":"YulAssignment","src":"16193:54:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"16219:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16231:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16242:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16227:3:21"},"nodeType":"YulFunctionCall","src":"16227:19:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"16201:17:21"},"nodeType":"YulFunctionCall","src":"16201:46:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16193:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15837:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15848:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15856:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15864:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15872:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15880:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15891:4:21","type":""}],"src":"15669:584:21"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), 0)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xE3C JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7F JUMP JUMPDEST PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x1068 JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0x1112 JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1218 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x548 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x129A JUMP JUMPDEST PUSH2 0x557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x20F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x29A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2CE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x67 DUP1 SLOAD PUSH2 0x2E3 SWAP1 PUSH2 0x12FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x30F SWAP1 PUSH2 0x12FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x384 JUMPI POP PUSH2 0x384 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x3F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH2 0x403 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x5F2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x483 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x540 JUMPI PUSH2 0x513 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EC JUMPI PUSH2 0x4EC PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH2 0x506 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x525 JUMPI PUSH2 0x525 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x539 DUP2 PUSH2 0x1366 JUMP JUMPDEST SWAP1 POP PUSH2 0x4CE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x553 CALLER DUP4 DUP4 PUSH2 0x868 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x573 JUMPI POP PUSH2 0x573 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x5E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH2 0x403 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x95D JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x6CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x70C JUMPI PUSH2 0x70C PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x65 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7DF SWAP1 DUP5 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x7F3 SWAP1 PUSH2 0x1366 JUMP JUMPDEST SWAP1 POP PUSH2 0x6D1 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x84A SWAP3 SWAP2 SWAP1 PUSH2 0x1399 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x860 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB0C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x66 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x9CD DUP6 PUSH2 0xCCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9DA DUP6 PUSH2 0xCCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xA62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xAA1 SWAP1 DUP5 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xB01 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xD15 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x860 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0xB50 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x13C7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB9A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB97 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xC50 JUMPI PUSH2 0xBA6 PUSH2 0x1442 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 EQ ISZERO PUSH2 0xBE0 JUMPI POP PUSH2 0xBBB PUSH2 0x145E JUMP JUMPDEST DUP1 PUSH2 0xBC6 JUMPI POP PUSH2 0xBE2 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x206 SWAP2 SWAP1 PUSH2 0xF09 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xCC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD04 JUMPI PUSH2 0xD04 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x860 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xD59 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x14E8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xDA3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDA0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDAF JUMPI PUSH2 0xBA6 PUSH2 0x1442 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xCC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x206 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE58 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xE7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE9C DUP2 PUSH2 0xE66 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEE2 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xEC6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xE9C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEBC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF58 JUMPI PUSH2 0xF58 PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF79 JUMPI PUSH2 0xF79 PUSH2 0xF1C JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xFA1 DUP3 PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFAE DUP3 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xFCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xFE9 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xFD2 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x101F JUMPI PUSH2 0x101F PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1036 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x104B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1080 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1089 DUP7 PUSH2 0xE20 JUMP JUMPDEST SWAP5 POP PUSH2 0x1097 PUSH1 0x20 DUP8 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10C0 DUP10 DUP4 DUP11 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E2 DUP10 DUP4 DUP11 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1105 DUP9 DUP3 DUP10 ADD PUSH2 0xFF4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x113D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x115E DUP3 PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116B DUP3 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x118B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x11B0 JUMPI PUSH2 0x11A1 DUP7 PUSH2 0xE20 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1190 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x11C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D3 DUP6 DUP3 DUP7 ADD PUSH2 0xF83 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x120D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11F1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xE9C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x123E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1247 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1283 DUP4 PUSH2 0xE20 JUMP JUMPDEST SWAP2 POP PUSH2 0x1291 PUSH1 0x20 DUP5 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12BB DUP7 PUSH2 0xE20 JUMP JUMPDEST SWAP5 POP PUSH2 0x12C9 PUSH1 0x20 DUP8 ADD PUSH2 0xE20 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1105 DUP9 DUP3 DUP10 ADD PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1313 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1334 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x137A JUMPI PUSH2 0x137A PUSH2 0x1350 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1394 JUMPI PUSH2 0x1394 PUSH2 0x1350 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13AC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x11DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x13BE DUP2 DUP6 PUSH2 0x11DD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x13F3 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x11DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1405 DUP2 DUP7 PUSH2 0x11DD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1419 DUP2 DUP6 PUSH2 0xEBC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE9C DUP2 PUSH2 0xE66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x145B JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x146C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x149C JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x14B4 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14CE JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x14DD PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xF32 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1520 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xEBC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 MSIZE 0xB2 MUL 0xCD CALLDATACOPY 0x1E REVERT 0x4D 0xE5 0xE9 JUMP PUSH28 0xEBD9A419EA176577926B9AE5A32F51F3A902A664736F6C6343000809 STOP CALLER ","sourceMap":"687:17320:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2598:227;;;;;;:::i;:::-;;:::i;:::-;;;620:25:21;;;608:2;593:18;2598:227:5;;;;;;;;1605:349;;;;;;:::i;:::-;;:::i;:::-;;;1253:14:21;;1246:22;1228:41;;1216:2;1201:18;1605:349:5;1088:187:21;2353:103:5;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4477:426::-;;;;;;:::i;:::-;;:::i;:::-;;2982:508;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3558:153::-;;;;;;:::i;:::-;;:::i;3778:166::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3900:27:5;;;3877:4;3900:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3778:166;4011:394;;;;;;:::i;:::-;;:::i;2598:227::-;2684:7;-1:-1:-1;;;;;2711:21:5;;2703:76;;;;-1:-1:-1;;;2703:76:5;;8384:2:21;2703:76:5;;;8366:21:21;8423:2;8403:18;;;8396:30;8462:34;8442:18;;;8435:62;8533:12;8513:18;;;8506:40;8563:19;;2703:76:5;;;;;;;;;-1:-1:-1;2796:13:5;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;2796:22:5;;;;;;;;;;;;2598:227::o;1605:349::-;1729:4;-1:-1:-1;;;;;;1764:52:5;;1779:37;1764:52;;:131;;-1:-1:-1;;;;;;;1832:63:5;;1847:48;1832:63;1764:131;:183;;;-1:-1:-1;1183:36:15;-1:-1:-1;;;;;;1168:51:15;;;1911:36:5;1745:202;1605:349;-1:-1:-1;;1605:349:5:o;2353:103::-;2413:13;2445:4;2438:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2353:103;;;:::o;4477:426::-;-1:-1:-1;;;;;4702:20:5;;929:10:12;4702:20:5;;:60;;-1:-1:-1;4726:36:5;4743:4;929:10:12;3778:166:5;:::i;4726:36::-;4681:153;;;;-1:-1:-1;;;4681:153:5;;9237:2:21;4681:153:5;;;9219:21:21;9276:2;9256:18;;;9249:30;9315:34;9295:18;;;9288:62;9386:16;9366:18;;;9359:44;9420:19;;4681:153:5;9035:410:21;4681:153:5;4844:52;4867:4;4873:2;4877:3;4882:7;4891:4;4844:22;:52::i;:::-;4477:426;;;;;:::o;2982:508::-;3133:16;3192:3;:10;3173:8;:15;:29;3165:83;;;;-1:-1:-1;;;3165:83:5;;9652:2:21;3165:83:5;;;9634:21:21;9691:2;9671:18;;;9664:30;9730:34;9710:18;;;9703:62;9801:11;9781:18;;;9774:39;9830:19;;3165:83:5;9450:405:21;3165:83:5;3259:30;3306:8;:15;3292:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3292:30:5;;3259:63;;3338:9;3333:120;3357:8;:15;3353:1;:19;3333:120;;;3412:30;3422:8;3431:1;3422:11;;;;;;;;:::i;:::-;;;;;;;3435:3;3439:1;3435:6;;;;;;;;:::i;:::-;;;;;;;3412:9;:30::i;:::-;3393:13;3407:1;3393:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3374:3;;;:::i;:::-;;;3333:120;;;-1:-1:-1;3470:13:5;2982:508;-1:-1:-1;;;2982:508:5:o;3558:153::-;3652:52;929:10:12;3685:8:5;3695;3652:18;:52::i;:::-;3558:153;;:::o;4011:394::-;-1:-1:-1;;;;;4211:20:5;;929:10:12;4211:20:5;;:60;;-1:-1:-1;4235:36:5;4252:4;929:10:12;3778:166:5;:::i;4235:36::-;4190:153;;;;-1:-1:-1;;;4190:153:5;;9237:2:21;4190:153:5;;;9219:21:21;9276:2;9256:18;;;9249:30;9315:34;9295:18;;;9288:62;9386:16;9366:18;;;9359:44;9420:19;;4190:153:5;9035:410:21;4190:153:5;4353:45;4371:4;4377:2;4381;4385:6;4393:4;4353:17;:45::i;6646:1115::-;6866:7;:14;6852:3;:10;:28;6844:81;;;;-1:-1:-1;;;6844:81:5;;10580:2:21;6844:81:5;;;10562:21:21;10619:2;10599:18;;;10592:30;10658:34;10638:18;;;10631:62;10729:10;10709:18;;;10702:38;10757:19;;6844:81:5;10378:404:21;6844:81:5;-1:-1:-1;;;;;6943:16:5;;6935:66;;;;-1:-1:-1;;;6935:66:5;;10989:2:21;6935:66:5;;;10971:21:21;11028:2;11008:18;;;11001:30;11067:34;11047:18;;;11040:62;-1:-1:-1;;;11118:18:21;;;11111:35;11163:19;;6935:66:5;10787:401:21;6935:66:5;929:10:12;7012:16:5;7125:411;7149:3;:10;7145:1;:14;7125:411;;;7180:10;7193:3;7197:1;7193:6;;;;;;;;:::i;:::-;;;;;;;7180:19;;7213:14;7230:7;7238:1;7230:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7255:19;7277:13;;;:9;:13;;;;;;-1:-1:-1;;;;;7277:19:5;;;;;;;;;;;;7230:10;;-1:-1:-1;7318:21:5;;;;7310:76;;;;-1:-1:-1;;;7310:76:5;;11395:2:21;7310:76:5;;;11377:21:21;11434:2;11414:18;;;11407:30;11473:34;11453:18;;;11446:62;-1:-1:-1;;;11524:18:21;;;11517:40;11574:19;;7310:76:5;11193:406:21;7310:76:5;7428:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;7428:19:5;;;;;;;;;;7450:20;;;7428:42;;7498:17;;;;;;;:27;;7450:20;;7428:13;7498:27;;7450:20;;7498:27;:::i;:::-;;;;;;;;7166:370;;;7161:3;;;;:::i;:::-;;;7125:411;;;;7581:2;-1:-1:-1;;;;;7551:47:5;7575:4;-1:-1:-1;;;;;7551:47:5;7565:8;-1:-1:-1;;;;;7551:47:5;;7585:3;7590:7;7551:47;;;;;;;:::i;:::-;;;;;;;;7679:75;7715:8;7725:4;7731:2;7735:3;7740:7;7749:4;7679:35;:75::i;:::-;6834:927;6646:1115;;;;;:::o;13323:323::-;13473:8;-1:-1:-1;;;;;13464:17:5;:5;-1:-1:-1;;;;;13464:17:5;;;13456:71;;;;-1:-1:-1;;;13456:71:5;;12409:2:21;13456:71:5;;;12391:21:21;12448:2;12428:18;;;12421:30;12487:34;12467:18;;;12460:62;12558:11;12538:18;;;12531:39;12587:19;;13456:71:5;12207:405:21;13456:71:5;-1:-1:-1;;;;;13537:25:5;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13537:46:5;;;;;;;;;;13598:41;;1228::21;;;13598::5;;1201:18:21;13598:41:5;;;;;;;13323:323;;;:::o;5353:947::-;-1:-1:-1;;;;;5534:16:5;;5526:66;;;;-1:-1:-1;;;5526:66:5;;10989:2:21;5526:66:5;;;10971:21:21;11028:2;11008:18;;;11001:30;11067:34;11047:18;;;11040:62;-1:-1:-1;;;11118:18:21;;;11111:35;11163:19;;5526:66:5;10787:401:21;5526:66:5;929:10:12;5603:16:5;5667:21;5685:2;5667:17;:21::i;:::-;5644:44;;5698:24;5725:25;5743:6;5725:17;:25::i;:::-;5698:52;;5832:19;5854:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5854:19:5;;;;;;;;;;5891:21;;;;5883:76;;;;-1:-1:-1;;;5883:76:5;;11395:2:21;5883:76:5;;;11377:21:21;11434:2;11414:18;;;11407:30;11473:34;11453:18;;;11446:62;-1:-1:-1;;;11524:18:21;;;11517:40;11574:19;;5883:76:5;11193:406:21;5883:76:5;5993:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5993:19:5;;;;;;;;;;6015:20;;;5993:42;;6055:17;;;;;;;:27;;6015:20;;5993:13;6055:27;;6015:20;;6055:27;:::i;:::-;;;;-1:-1:-1;;6098:46:5;;;12791:25:21;;;12847:2;12832:18;;12825:34;;;-1:-1:-1;;;;;6098:46:5;;;;;;;;;;;;;;12764:18:21;6098:46:5;;;;;;;6225:68;6256:8;6266:4;6272:2;6276;6280:6;6288:4;6225:30;:68::i;:::-;5516:784;;;;5353:947;;;;;:::o;16701:814::-;-1:-1:-1;;;;;16933:13:5;;1481:19:11;:23;16929:580:5;;16968:90;;-1:-1:-1;;;16968:90:5;;-1:-1:-1;;;;;16968:54:5;;;;;:90;;17023:8;;17033:4;;17039:3;;17044:7;;17053:4;;16968:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16968:90:5;;;;;;;;-1:-1:-1;;16968:90:5;;;;;;;;;;;;:::i;:::-;;;16964:535;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;17375:6;17368:14;;-1:-1:-1;;;17368:14:5;;;;;;;;:::i;16964:535::-;;;17422:62;;-1:-1:-1;;;17422:62:5;;15041:2:21;17422:62:5;;;15023:21:21;15080:2;15060:18;;;15053:30;15119:34;15099:18;;;15092:62;15190:22;15170:18;;;15163:50;15230:19;;17422:62:5;14839:416:21;16964:535:5;-1:-1:-1;;;;;;17137:71:5;;-1:-1:-1;;;17137:71:5;17133:168;;17232:50;;-1:-1:-1;;;17232:50:5;;15462:2:21;17232:50:5;;;15444:21:21;15501:2;15481:18;;;15474:30;15540:34;15520:18;;;15513:62;-1:-1:-1;;;15591:18:21;;;15584:38;15639:19;;17232:50:5;15260:404:21;17133:168:5;17059:256;16701:814;;;;;;:::o;17521:193::-;17640:16;;;17654:1;17640:16;;;;;;;;;17587;;17615:22;;17640:16;;;;;;;;;;;;-1:-1:-1;17640:16:5;17615:41;;17677:7;17666:5;17672:1;17666:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17702:5;17521:193;-1:-1:-1;;17521:193:5:o;15948:747::-;-1:-1:-1;;;;;16155:13:5;;1481:19:11;:23;16151:538:5;;16190:83;;-1:-1:-1;;;16190:83:5;;-1:-1:-1;;;;;16190:49:5;;;;;:83;;16240:8;;16250:4;;16256:2;;16260:6;;16268:4;;16190:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16190:83:5;;;;;;;;-1:-1:-1;;16190:83:5;;;;;;;;;;;;:::i;:::-;;;16186:493;;;;:::i;:::-;-1:-1:-1;;;;;;16322:66:5;;-1:-1:-1;;;16322:66:5;16318:163;;16412:50;;-1:-1:-1;;;16412:50:5;;15462:2:21;16412:50:5;;;15444:21:21;15501:2;15481:18;;;15474:30;15540:34;15520:18;;;15513:62;-1:-1:-1;;;15591:18:21;;;15584:38;15639:19;;16412:50:5;15260:404:21;14:196;82:20;;-1:-1:-1;;;;;131:54:21;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:254::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:21:o;656:177::-;-1:-1:-1;;;;;;734:5:21;730:78;723:5;720:89;710:117;;823:1;820;813:12;710:117;656:177;:::o;838:245::-;896:6;949:2;937:9;928:7;924:23;920:32;917:52;;;965:1;962;955:12;917:52;1004:9;991:23;1023:30;1047:5;1023:30;:::i;:::-;1072:5;838:245;-1:-1:-1;;;838:245:21:o;1280:180::-;1339:6;1392:2;1380:9;1371:7;1367:23;1363:32;1360:52;;;1408:1;1405;1398:12;1360:52;-1:-1:-1;1431:23:21;;1280:180;-1:-1:-1;1280:180:21:o;1465:472::-;1507:3;1545:5;1539:12;1572:6;1567:3;1560:19;1597:1;1607:162;1621:6;1618:1;1615:13;1607:162;;;1683:4;1739:13;;;1735:22;;1729:29;1711:11;;;1707:20;;1700:59;1636:12;1607:162;;;1787:6;1784:1;1781:13;1778:87;;;1853:1;1846:4;1837:6;1832:3;1828:16;1824:27;1817:38;1778:87;-1:-1:-1;1919:2:21;1898:15;-1:-1:-1;;1894:29:21;1885:39;;;;1926:4;1881:50;;1465:472;-1:-1:-1;;1465:472:21:o;1942:220::-;2091:2;2080:9;2073:21;2054:4;2111:45;2152:2;2141:9;2137:18;2129:6;2111:45;:::i;2167:184::-;-1:-1:-1;;;2216:1:21;2209:88;2316:4;2313:1;2306:15;2340:4;2337:1;2330:15;2356:249;2466:2;2447:13;;-1:-1:-1;;2443:27:21;2431:40;;2501:18;2486:34;;2522:22;;;2483:62;2480:88;;;2548:18;;:::i;:::-;2584:2;2577:22;-1:-1:-1;;2356:249:21:o;2610:183::-;2670:4;2703:18;2695:6;2692:30;2689:56;;;2725:18;;:::i;:::-;-1:-1:-1;2770:1:21;2766:14;2782:4;2762:25;;2610:183::o;2798:724::-;2852:5;2905:3;2898:4;2890:6;2886:17;2882:27;2872:55;;2923:1;2920;2913:12;2872:55;2959:6;2946:20;2985:4;3008:43;3048:2;3008:43;:::i;:::-;3080:2;3074:9;3092:31;3120:2;3112:6;3092:31;:::i;:::-;3158:18;;;3250:1;3246:10;;;;3234:23;;3230:32;;;3192:15;;;;-1:-1:-1;3274:15:21;;;3271:35;;;3302:1;3299;3292:12;3271:35;3338:2;3330:6;3326:15;3350:142;3366:6;3361:3;3358:15;3350:142;;;3432:17;;3420:30;;3470:12;;;;3383;;3350:142;;;-1:-1:-1;3510:6:21;2798:724;-1:-1:-1;;;;;;2798:724:21:o;3527:555::-;3569:5;3622:3;3615:4;3607:6;3603:17;3599:27;3589:55;;3640:1;3637;3630:12;3589:55;3676:6;3663:20;3702:18;3698:2;3695:26;3692:52;;;3724:18;;:::i;:::-;3773:2;3767:9;3785:67;3840:2;3821:13;;-1:-1:-1;;3817:27:21;3846:4;3813:38;3767:9;3785:67;:::i;:::-;3876:2;3868:6;3861:18;3922:3;3915:4;3910:2;3902:6;3898:15;3894:26;3891:35;3888:55;;;3939:1;3936;3929:12;3888:55;4003:2;3996:4;3988:6;3984:17;3977:4;3969:6;3965:17;3952:54;4050:1;4026:15;;;4043:4;4022:26;4015:37;;;;4030:6;3527:555;-1:-1:-1;;;3527:555:21:o;4087:943::-;4241:6;4249;4257;4265;4273;4326:3;4314:9;4305:7;4301:23;4297:33;4294:53;;;4343:1;4340;4333:12;4294:53;4366:29;4385:9;4366:29;:::i;:::-;4356:39;;4414:38;4448:2;4437:9;4433:18;4414:38;:::i;:::-;4404:48;;4503:2;4492:9;4488:18;4475:32;4526:18;4567:2;4559:6;4556:14;4553:34;;;4583:1;4580;4573:12;4553:34;4606:61;4659:7;4650:6;4639:9;4635:22;4606:61;:::i;:::-;4596:71;;4720:2;4709:9;4705:18;4692:32;4676:48;;4749:2;4739:8;4736:16;4733:36;;;4765:1;4762;4755:12;4733:36;4788:63;4843:7;4832:8;4821:9;4817:24;4788:63;:::i;:::-;4778:73;;4904:3;4893:9;4889:19;4876:33;4860:49;;4934:2;4924:8;4921:16;4918:36;;;4950:1;4947;4940:12;4918:36;;4973:51;5016:7;5005:8;4994:9;4990:24;4973:51;:::i;:::-;4963:61;;;4087:943;;;;;;;;:::o;5035:1208::-;5153:6;5161;5214:2;5202:9;5193:7;5189:23;5185:32;5182:52;;;5230:1;5227;5220:12;5182:52;5270:9;5257:23;5299:18;5340:2;5332:6;5329:14;5326:34;;;5356:1;5353;5346:12;5326:34;5394:6;5383:9;5379:22;5369:32;;5439:7;5432:4;5428:2;5424:13;5420:27;5410:55;;5461:1;5458;5451:12;5410:55;5497:2;5484:16;5519:4;5542:43;5582:2;5542:43;:::i;:::-;5614:2;5608:9;5626:31;5654:2;5646:6;5626:31;:::i;:::-;5692:18;;;5780:1;5776:10;;;;5768:19;;5764:28;;;5726:15;;;;-1:-1:-1;5804:19:21;;;5801:39;;;5836:1;5833;5826:12;5801:39;5860:11;;;;5880:148;5896:6;5891:3;5888:15;5880:148;;;5962:23;5981:3;5962:23;:::i;:::-;5950:36;;5913:12;;;;6006;;;;5880:148;;;6047:6;-1:-1:-1;;6091:18:21;;6078:32;;-1:-1:-1;;6122:16:21;;;6119:36;;;6151:1;6148;6141:12;6119:36;;6174:63;6229:7;6218:8;6207:9;6203:24;6174:63;:::i;:::-;6164:73;;;5035:1208;;;;;:::o;6248:435::-;6301:3;6339:5;6333:12;6366:6;6361:3;6354:19;6392:4;6421:2;6416:3;6412:12;6405:19;;6458:2;6451:5;6447:14;6479:1;6489:169;6503:6;6500:1;6497:13;6489:169;;;6564:13;;6552:26;;6598:12;;;;6633:15;;;;6525:1;6518:9;6489:169;;;-1:-1:-1;6674:3:21;;6248:435;-1:-1:-1;;;;;6248:435:21:o;6688:261::-;6867:2;6856:9;6849:21;6830:4;6887:56;6939:2;6928:9;6924:18;6916:6;6887:56;:::i;6954:347::-;7019:6;7027;7080:2;7068:9;7059:7;7055:23;7051:32;7048:52;;;7096:1;7093;7086:12;7048:52;7119:29;7138:9;7119:29;:::i;:::-;7109:39;;7198:2;7187:9;7183:18;7170:32;7245:5;7238:13;7231:21;7224:5;7221:32;7211:60;;7267:1;7264;7257:12;7211:60;7290:5;7280:15;;;6954:347;;;;;:::o;7306:260::-;7374:6;7382;7435:2;7423:9;7414:7;7410:23;7406:32;7403:52;;;7451:1;7448;7441:12;7403:52;7474:29;7493:9;7474:29;:::i;:::-;7464:39;;7522:38;7556:2;7545:9;7541:18;7522:38;:::i;:::-;7512:48;;7306:260;;;;;:::o;7571:606::-;7675:6;7683;7691;7699;7707;7760:3;7748:9;7739:7;7735:23;7731:33;7728:53;;;7777:1;7774;7767:12;7728:53;7800:29;7819:9;7800:29;:::i;:::-;7790:39;;7848:38;7882:2;7871:9;7867:18;7848:38;:::i;:::-;7838:48;;7933:2;7922:9;7918:18;7905:32;7895:42;;7984:2;7973:9;7969:18;7956:32;7946:42;;8039:3;8028:9;8024:19;8011:33;8067:18;8059:6;8056:30;8053:50;;;8099:1;8096;8089:12;8053:50;8122:49;8163:7;8154:6;8143:9;8139:22;8122:49;:::i;8593:437::-;8672:1;8668:12;;;;8715;;;8736:61;;8790:4;8782:6;8778:17;8768:27;;8736:61;8843:2;8835:6;8832:14;8812:18;8809:38;8806:218;;;-1:-1:-1;;;8877:1:21;8870:88;8981:4;8978:1;8971:15;9009:4;9006:1;8999:15;8806:218;;8593:437;;;:::o;9860:184::-;-1:-1:-1;;;9909:1:21;9902:88;10009:4;10006:1;9999:15;10033:4;10030:1;10023:15;10049:184;-1:-1:-1;;;10098:1:21;10091:88;10198:4;10195:1;10188:15;10222:4;10219:1;10212:15;10238:135;10277:3;-1:-1:-1;;10298:17:21;;10295:43;;;10318:18;;:::i;:::-;-1:-1:-1;10365:1:21;10354:13;;10238:135::o;11604:128::-;11644:3;11675:1;11671:6;11668:1;11665:13;11662:39;;;11681:18;;:::i;:::-;-1:-1:-1;11717:9:21;;11604:128::o;11737:465::-;11994:2;11983:9;11976:21;11957:4;12020:56;12072:2;12061:9;12057:18;12049:6;12020:56;:::i;:::-;12124:9;12116:6;12112:22;12107:2;12096:9;12092:18;12085:50;12152:44;12189:6;12181;12152:44;:::i;:::-;12144:52;11737:465;-1:-1:-1;;;;;11737:465:21:o;12870:850::-;13192:4;-1:-1:-1;;;;;13302:2:21;13294:6;13290:15;13279:9;13272:34;13354:2;13346:6;13342:15;13337:2;13326:9;13322:18;13315:43;;13394:3;13389:2;13378:9;13374:18;13367:31;13421:57;13473:3;13462:9;13458:19;13450:6;13421:57;:::i;:::-;13526:9;13518:6;13514:22;13509:2;13498:9;13494:18;13487:50;13560:44;13597:6;13589;13560:44;:::i;:::-;13546:58;;13653:9;13645:6;13641:22;13635:3;13624:9;13620:19;13613:51;13681:33;13707:6;13699;13681:33;:::i;:::-;13673:41;12870:850;-1:-1:-1;;;;;;;;12870:850:21:o;13725:249::-;13794:6;13847:2;13835:9;13826:7;13822:23;13818:32;13815:52;;;13863:1;13860;13853:12;13815:52;13895:9;13889:16;13914:30;13938:5;13914:30;:::i;13979:179::-;14014:3;14056:1;14038:16;14035:23;14032:120;;;14102:1;14099;14096;14081:23;-1:-1:-1;14139:1:21;14133:8;14128:3;14124:18;14032:120;13979:179;:::o;14163:671::-;14202:3;14244:4;14226:16;14223:26;14220:39;;;14163:671;:::o;14220:39::-;14286:2;14280:9;-1:-1:-1;;14351:16:21;14347:25;;14344:1;14280:9;14323:50;14402:4;14396:11;14426:16;14461:18;14532:2;14525:4;14517:6;14513:17;14510:25;14505:2;14497:6;14494:14;14491:45;14488:58;;;14539:5;;;;;14163:671;:::o;14488:58::-;14576:6;14570:4;14566:17;14555:28;;14612:3;14606:10;14639:2;14631:6;14628:14;14625:27;;;14645:5;;;;;;14163:671;:::o;14625:27::-;14729:2;14710:16;14704:4;14700:27;14696:36;14689:4;14680:6;14675:3;14671:16;14667:27;14664:69;14661:82;;;14736:5;;;;;;14163:671;:::o;14661:82::-;14752:57;14803:4;14794:6;14786;14782:19;14778:30;14772:4;14752:57;:::i;:::-;-1:-1:-1;14825:3:21;;14163:671;-1:-1:-1;;;;;14163:671:21:o;15669:584::-;15891:4;-1:-1:-1;;;;;16001:2:21;15993:6;15989:15;15978:9;15971:34;16053:2;16045:6;16041:15;16036:2;16025:9;16021:18;16014:43;;16093:6;16088:2;16077:9;16073:18;16066:34;16136:6;16131:2;16120:9;16116:18;16109:34;16180:3;16174;16163:9;16159:19;16152:32;16201:46;16242:3;16231:9;16227:19;16219:6;16201:46;:::i;:::-;16193:54;15669:584;-1:-1:-1;;;;;;;15669:584:21:o"},"gasEstimates":{"creation":{"codeDepositCost":"1094600","executionCost":"1140","totalCost":"1095740"},"external":{"balanceOf(address,uint256)":"2675","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26708","supportsInterface(bytes4)":"526","uri(uint256)":"infinite"},"internal":{"__ERC1155_init(string memory)":"infinite","__ERC1155_init_unchained(string memory)":"infinite","_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":\"ERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xab3948ae0bf8a1ccc035b6b4c78c2fa24c133291d4c71b605fdc6c6f6246e92f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2580,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2873,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":736,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_balances","offset":0,"slot":"101","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":742,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_operatorApprovals","offset":0,"slot":"102","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":744,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"_uri","offset":0,"slot":"103","type":"t_string_storage"},{"astId":1951,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:ERC1155Upgradeable","label":"__gap","offset":0,"slot":"104","type":"t_array(t_uint256)47_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"IERC1155ReceiverUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":\"IERC1155ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"IERC1155Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":\"IERC1155Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"IERC1155MetadataURIUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":\"IERC1155MetadataURIUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol":{"ERC1155HolderUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061044f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461006e578063f23a6e61146100bf575b600080fd5b610059610054366004610160565b6100f7565b60405190151581526020015b60405180910390f35b6100a661007c36600461030a565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610065565b6100a66100cd3660046103b4565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061015a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60006020828403121561017257600080fd5b81356001600160e01b03198116811461018a57600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101b557600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610212576102126101ba565b604052919050565b600082601f83011261022b57600080fd5b8135602067ffffffffffffffff821115610247576102476101ba565b8160051b6102568282016101e9565b928352848101820192828101908785111561027057600080fd5b83870192505b8483101561028f57823582529183019190830190610276565b979650505050505050565b600082601f8301126102ab57600080fd5b813567ffffffffffffffff8111156102c5576102c56101ba565b6102d8601f8201601f19166020016101e9565b8181528460208386010111156102ed57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561032257600080fd5b61032b86610191565b945061033960208701610191565b9350604086013567ffffffffffffffff8082111561035657600080fd5b61036289838a0161021a565b9450606088013591508082111561037857600080fd5b61038489838a0161021a565b9350608088013591508082111561039a57600080fd5b506103a78882890161029a565b9150509295509295909350565b600080600080600060a086880312156103cc57600080fd5b6103d586610191565b94506103e360208701610191565b93506040860135925060608601359150608086013567ffffffffffffffff81111561040d57600080fd5b6103a78882890161029a56fea264697066735822122002acd1c62656db060f7472a14033fd2d18c8e79e87695d44acd5349482d33b8d64736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x160 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA6 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x30A JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x65 JUMP JUMPDEST PUSH2 0xA6 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x3B4 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x15A JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x212 JUMPI PUSH2 0x212 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x247 JUMPI PUSH2 0x247 PUSH2 0x1BA JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x256 DUP3 DUP3 ADD PUSH2 0x1E9 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x28F JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x276 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x1BA JUMP JUMPDEST PUSH2 0x2D8 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32B DUP7 PUSH2 0x191 JUMP JUMPDEST SWAP5 POP PUSH2 0x339 PUSH1 0x20 DUP8 ADD PUSH2 0x191 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x362 DUP10 DUP4 DUP11 ADD PUSH2 0x21A JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x384 DUP10 DUP4 DUP11 ADD PUSH2 0x21A JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 DUP9 DUP3 DUP10 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D5 DUP7 PUSH2 0x191 JUMP JUMPDEST SWAP5 POP PUSH2 0x3E3 PUSH1 0x20 DUP8 ADD PUSH2 0x191 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A7 DUP9 DUP3 DUP10 ADD PUSH2 0x29A JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xAC 0xD1 0xC6 0x26 JUMP 0xDB MOD 0xF PUSH21 0x72A14033FD2D18C8E79E87695D44ACD5349482D33B DUP14 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"511:1001:9:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@onERC1155BatchReceived_2195":{"entryPoint":null,"id":2195,"parameterSlots":5,"returnSlots":1},"@onERC1155Received_2172":{"entryPoint":null,"id":2172,"parameterSlots":5,"returnSlots":1},"@supportsInterface_2249":{"entryPoint":247,"id":2249,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2868":{"entryPoint":null,"id":2868,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":401,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":538,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":666,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":778,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":948,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4":{"entryPoint":352,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":489,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":442,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4274:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:21","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:21"},"nodeType":"YulFunctionCall","src":"131:12:21"},"nodeType":"YulExpressionStatement","src":"131:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:21"},"nodeType":"YulFunctionCall","src":"100:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:21"},"nodeType":"YulFunctionCall","src":"96:32:21"},"nodeType":"YulIf","src":"93:52:21"},{"nodeType":"YulVariableDeclaration","src":"154:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:21"},"nodeType":"YulFunctionCall","src":"167:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:21"},"nodeType":"YulFunctionCall","src":"302:12:21"},"nodeType":"YulExpressionStatement","src":"302:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:21"},"nodeType":"YulFunctionCall","src":"219:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:21"},"nodeType":"YulFunctionCall","src":"209:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:21"},"nodeType":"YulFunctionCall","src":"202:97:21"},"nodeType":"YulIf","src":"199:117:21"},{"nodeType":"YulAssignment","src":"325:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:21","type":""}],"src":"14:332:21"},{"body":{"nodeType":"YulBlock","src":"446:92:21","statements":[{"nodeType":"YulAssignment","src":"456:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:21"},"nodeType":"YulFunctionCall","src":"464:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:21"},"nodeType":"YulFunctionCall","src":"516:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:21"},"nodeType":"YulFunctionCall","src":"509:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:21"},"nodeType":"YulFunctionCall","src":"491:41:21"},"nodeType":"YulExpressionStatement","src":"491:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:21","type":""}],"src":"351:187:21"},{"body":{"nodeType":"YulBlock","src":"592:147:21","statements":[{"nodeType":"YulAssignment","src":"602:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"624:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"611:12:21"},"nodeType":"YulFunctionCall","src":"611:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"602:5:21"}]},{"body":{"nodeType":"YulBlock","src":"717:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"726:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"729:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"719:6:21"},"nodeType":"YulFunctionCall","src":"719:12:21"},"nodeType":"YulExpressionStatement","src":"719:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"653:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"664:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"671:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"660:3:21"},"nodeType":"YulFunctionCall","src":"660:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"650:2:21"},"nodeType":"YulFunctionCall","src":"650:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"643:6:21"},"nodeType":"YulFunctionCall","src":"643:73:21"},"nodeType":"YulIf","src":"640:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"571:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"582:5:21","type":""}],"src":"543:196:21"},{"body":{"nodeType":"YulBlock","src":"776:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"793:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"796:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"786:6:21"},"nodeType":"YulFunctionCall","src":"786:88:21"},"nodeType":"YulExpressionStatement","src":"786:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"890:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"893:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"883:6:21"},"nodeType":"YulFunctionCall","src":"883:15:21"},"nodeType":"YulExpressionStatement","src":"883:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"914:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"917:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"907:6:21"},"nodeType":"YulFunctionCall","src":"907:15:21"},"nodeType":"YulExpressionStatement","src":"907:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"744:184:21"},{"body":{"nodeType":"YulBlock","src":"978:230:21","statements":[{"nodeType":"YulAssignment","src":"988:19:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1004:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"998:5:21"},"nodeType":"YulFunctionCall","src":"998:9:21"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"988:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1016:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1038:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1054:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"1060:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1050:3:21"},"nodeType":"YulFunctionCall","src":"1050:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1069:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1065:3:21"},"nodeType":"YulFunctionCall","src":"1065:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1046:3:21"},"nodeType":"YulFunctionCall","src":"1046:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1034:3:21"},"nodeType":"YulFunctionCall","src":"1034:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1020:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1149:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1151:16:21"},"nodeType":"YulFunctionCall","src":"1151:18:21"},"nodeType":"YulExpressionStatement","src":"1151:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1092:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"1104:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1089:2:21"},"nodeType":"YulFunctionCall","src":"1089:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1128:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1140:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1125:2:21"},"nodeType":"YulFunctionCall","src":"1125:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1086:2:21"},"nodeType":"YulFunctionCall","src":"1086:62:21"},"nodeType":"YulIf","src":"1083:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1187:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1191:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1180:6:21"},"nodeType":"YulFunctionCall","src":"1180:22:21"},"nodeType":"YulExpressionStatement","src":"1180:22:21"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"958:4:21","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"967:6:21","type":""}],"src":"933:275:21"},{"body":{"nodeType":"YulBlock","src":"1277:648:21","statements":[{"body":{"nodeType":"YulBlock","src":"1326:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1338:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1328:6:21"},"nodeType":"YulFunctionCall","src":"1328:12:21"},"nodeType":"YulExpressionStatement","src":"1328:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1305:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1313:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1301:3:21"},"nodeType":"YulFunctionCall","src":"1301:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"1320:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1297:3:21"},"nodeType":"YulFunctionCall","src":"1297:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1290:6:21"},"nodeType":"YulFunctionCall","src":"1290:35:21"},"nodeType":"YulIf","src":"1287:55:21"},{"nodeType":"YulVariableDeclaration","src":"1351:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1374:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1361:12:21"},"nodeType":"YulFunctionCall","src":"1361:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1355:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1390:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"1400:4:21","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1394:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1443:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1445:16:21"},"nodeType":"YulFunctionCall","src":"1445:18:21"},"nodeType":"YulExpressionStatement","src":"1445:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1419:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"1423:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1416:2:21"},"nodeType":"YulFunctionCall","src":"1416:26:21"},"nodeType":"YulIf","src":"1413:52:21"},{"nodeType":"YulVariableDeclaration","src":"1474:20:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1488:1:21","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"1491:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1484:3:21"},"nodeType":"YulFunctionCall","src":"1484:10:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1478:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1503:39:21","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1534:2:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1538:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:21"},"nodeType":"YulFunctionCall","src":"1530:11:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1514:15:21"},"nodeType":"YulFunctionCall","src":"1514:28:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1507:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1551:16:21","value":{"name":"dst","nodeType":"YulIdentifier","src":"1564:3:21"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1555:5:21","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1583:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1588:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1576:6:21"},"nodeType":"YulFunctionCall","src":"1576:15:21"},"nodeType":"YulExpressionStatement","src":"1576:15:21"},{"nodeType":"YulAssignment","src":"1600:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1611:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1616:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1607:3:21"},"nodeType":"YulFunctionCall","src":"1607:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1600:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"1628:38:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1650:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"1658:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1646:3:21"},"nodeType":"YulFunctionCall","src":"1646:15:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1663:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1642:3:21"},"nodeType":"YulFunctionCall","src":"1642:24:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1632:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1694:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1703:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1706:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1696:6:21"},"nodeType":"YulFunctionCall","src":"1696:12:21"},"nodeType":"YulExpressionStatement","src":"1696:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1681:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"1689:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1678:2:21"},"nodeType":"YulFunctionCall","src":"1678:15:21"},"nodeType":"YulIf","src":"1675:35:21"},{"nodeType":"YulVariableDeclaration","src":"1719:26:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1734:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1742:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:21"},"nodeType":"YulFunctionCall","src":"1730:15:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1723:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1810:86:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1831:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1849:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1836:12:21"},"nodeType":"YulFunctionCall","src":"1836:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1824:6:21"},"nodeType":"YulFunctionCall","src":"1824:30:21"},"nodeType":"YulExpressionStatement","src":"1824:30:21"},{"nodeType":"YulAssignment","src":"1867:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1878:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1883:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1874:3:21"},"nodeType":"YulFunctionCall","src":"1874:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1867:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1765:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1770:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1762:2:21"},"nodeType":"YulFunctionCall","src":"1762:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1778:23:21","statements":[{"nodeType":"YulAssignment","src":"1780:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1791:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"1796:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1787:3:21"},"nodeType":"YulFunctionCall","src":"1787:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1780:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"1758:3:21","statements":[]},"src":"1754:142:21"},{"nodeType":"YulAssignment","src":"1905:14:21","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"1914:5:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1905:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1251:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1259:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1267:5:21","type":""}],"src":"1213:712:21"},{"body":{"nodeType":"YulBlock","src":"1982:478:21","statements":[{"body":{"nodeType":"YulBlock","src":"2031:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2040:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2043:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2033:6:21"},"nodeType":"YulFunctionCall","src":"2033:12:21"},"nodeType":"YulExpressionStatement","src":"2033:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2010:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2018:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2006:3:21"},"nodeType":"YulFunctionCall","src":"2006:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"2025:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2002:3:21"},"nodeType":"YulFunctionCall","src":"2002:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1995:6:21"},"nodeType":"YulFunctionCall","src":"1995:35:21"},"nodeType":"YulIf","src":"1992:55:21"},{"nodeType":"YulVariableDeclaration","src":"2056:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2079:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2066:12:21"},"nodeType":"YulFunctionCall","src":"2066:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2060:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2125:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2127:16:21"},"nodeType":"YulFunctionCall","src":"2127:18:21"},"nodeType":"YulExpressionStatement","src":"2127:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2101:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2105:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2098:2:21"},"nodeType":"YulFunctionCall","src":"2098:26:21"},"nodeType":"YulIf","src":"2095:52:21"},{"nodeType":"YulVariableDeclaration","src":"2156:70:21","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2199:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2203:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2195:3:21"},"nodeType":"YulFunctionCall","src":"2195:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2214:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2210:3:21"},"nodeType":"YulFunctionCall","src":"2210:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2191:3:21"},"nodeType":"YulFunctionCall","src":"2191:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"2220:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2187:3:21"},"nodeType":"YulFunctionCall","src":"2187:38:21"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2171:15:21"},"nodeType":"YulFunctionCall","src":"2171:55:21"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2160:7:21","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2242:7:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2251:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2235:6:21"},"nodeType":"YulFunctionCall","src":"2235:19:21"},"nodeType":"YulExpressionStatement","src":"2235:19:21"},{"body":{"nodeType":"YulBlock","src":"2302:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2311:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2314:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2304:6:21"},"nodeType":"YulFunctionCall","src":"2304:12:21"},"nodeType":"YulExpressionStatement","src":"2304:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2277:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2285:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2273:3:21"},"nodeType":"YulFunctionCall","src":"2273:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"2290:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2269:3:21"},"nodeType":"YulFunctionCall","src":"2269:26:21"},{"name":"end","nodeType":"YulIdentifier","src":"2297:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2266:2:21"},"nodeType":"YulFunctionCall","src":"2266:35:21"},"nodeType":"YulIf","src":"2263:55:21"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2344:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"2353:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:21"},"nodeType":"YulFunctionCall","src":"2340:18:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2364:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2372:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2360:3:21"},"nodeType":"YulFunctionCall","src":"2360:17:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2379:2:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2327:12:21"},"nodeType":"YulFunctionCall","src":"2327:55:21"},"nodeType":"YulExpressionStatement","src":"2327:55:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2406:7:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2415:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2402:3:21"},"nodeType":"YulFunctionCall","src":"2402:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"2420:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2398:3:21"},"nodeType":"YulFunctionCall","src":"2398:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"2427:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2391:6:21"},"nodeType":"YulFunctionCall","src":"2391:38:21"},"nodeType":"YulExpressionStatement","src":"2391:38:21"},{"nodeType":"YulAssignment","src":"2438:16:21","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2447:7:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2438:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1956:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"1964:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1972:5:21","type":""}],"src":"1930:530:21"},{"body":{"nodeType":"YulBlock","src":"2662:746:21","statements":[{"body":{"nodeType":"YulBlock","src":"2709:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2718:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2721:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2711:6:21"},"nodeType":"YulFunctionCall","src":"2711:12:21"},"nodeType":"YulExpressionStatement","src":"2711:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2683:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2692:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2679:3:21"},"nodeType":"YulFunctionCall","src":"2679:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2704:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2675:3:21"},"nodeType":"YulFunctionCall","src":"2675:33:21"},"nodeType":"YulIf","src":"2672:53:21"},{"nodeType":"YulAssignment","src":"2734:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2763:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2744:18:21"},"nodeType":"YulFunctionCall","src":"2744:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2734:6:21"}]},{"nodeType":"YulAssignment","src":"2782:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2815:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2826:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2811:3:21"},"nodeType":"YulFunctionCall","src":"2811:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2792:18:21"},"nodeType":"YulFunctionCall","src":"2792:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2782:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2839:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2870:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2866:3:21"},"nodeType":"YulFunctionCall","src":"2866:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2853:12:21"},"nodeType":"YulFunctionCall","src":"2853:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2843:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2894:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2904:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2898:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2949:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2958:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2961:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2951:6:21"},"nodeType":"YulFunctionCall","src":"2951:12:21"},"nodeType":"YulExpressionStatement","src":"2951:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2937:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2945:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2934:2:21"},"nodeType":"YulFunctionCall","src":"2934:14:21"},"nodeType":"YulIf","src":"2931:34:21"},{"nodeType":"YulAssignment","src":"2974:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"3028:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:21"},"nodeType":"YulFunctionCall","src":"3013:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3037:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"2984:28:21"},"nodeType":"YulFunctionCall","src":"2984:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2974:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"3054:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3087:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3098:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3083:3:21"},"nodeType":"YulFunctionCall","src":"3083:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3070:12:21"},"nodeType":"YulFunctionCall","src":"3070:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3058:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3131:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3140:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3143:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3133:6:21"},"nodeType":"YulFunctionCall","src":"3133:12:21"},"nodeType":"YulExpressionStatement","src":"3133:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3117:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3127:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3114:2:21"},"nodeType":"YulFunctionCall","src":"3114:16:21"},"nodeType":"YulIf","src":"3111:36:21"},{"nodeType":"YulAssignment","src":"3156:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3199:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3210:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3195:3:21"},"nodeType":"YulFunctionCall","src":"3195:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3221:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"3166:28:21"},"nodeType":"YulFunctionCall","src":"3166:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3156:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"3238:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3271:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3282:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3267:3:21"},"nodeType":"YulFunctionCall","src":"3267:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3254:12:21"},"nodeType":"YulFunctionCall","src":"3254:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"3242:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3316:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3328:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3318:6:21"},"nodeType":"YulFunctionCall","src":"3318:12:21"},"nodeType":"YulExpressionStatement","src":"3318:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"3302:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3312:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3299:2:21"},"nodeType":"YulFunctionCall","src":"3299:16:21"},"nodeType":"YulIf","src":"3296:36:21"},{"nodeType":"YulAssignment","src":"3341:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3372:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"3383:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3368:3:21"},"nodeType":"YulFunctionCall","src":"3368:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3394:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3351:16:21"},"nodeType":"YulFunctionCall","src":"3351:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3341:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2596:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2607:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2619:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2627:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2635:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2643:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2651:6:21","type":""}],"src":"2465:943:21"},{"body":{"nodeType":"YulBlock","src":"3512:149:21","statements":[{"nodeType":"YulAssignment","src":"3522:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3534:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3545:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3530:3:21"},"nodeType":"YulFunctionCall","src":"3530:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3522:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3564:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3579:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3587:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3575:3:21"},"nodeType":"YulFunctionCall","src":"3575:79:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3557:6:21"},"nodeType":"YulFunctionCall","src":"3557:98:21"},"nodeType":"YulExpressionStatement","src":"3557:98:21"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3481:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3492:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3503:4:21","type":""}],"src":"3413:248:21"},{"body":{"nodeType":"YulBlock","src":"3813:459:21","statements":[{"body":{"nodeType":"YulBlock","src":"3860:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3869:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3862:6:21"},"nodeType":"YulFunctionCall","src":"3862:12:21"},"nodeType":"YulExpressionStatement","src":"3862:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3834:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3843:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3830:3:21"},"nodeType":"YulFunctionCall","src":"3830:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3855:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3826:3:21"},"nodeType":"YulFunctionCall","src":"3826:33:21"},"nodeType":"YulIf","src":"3823:53:21"},{"nodeType":"YulAssignment","src":"3885:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3914:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3895:18:21"},"nodeType":"YulFunctionCall","src":"3895:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3885:6:21"}]},{"nodeType":"YulAssignment","src":"3933:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3966:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3977:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3962:3:21"},"nodeType":"YulFunctionCall","src":"3962:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3943:18:21"},"nodeType":"YulFunctionCall","src":"3943:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3933:6:21"}]},{"nodeType":"YulAssignment","src":"3990:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4017:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4028:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4013:3:21"},"nodeType":"YulFunctionCall","src":"4013:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4000:12:21"},"nodeType":"YulFunctionCall","src":"4000:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3990:6:21"}]},{"nodeType":"YulAssignment","src":"4041:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4068:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4079:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4064:3:21"},"nodeType":"YulFunctionCall","src":"4064:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4051:12:21"},"nodeType":"YulFunctionCall","src":"4051:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4041:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4092:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4123:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4134:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4119:3:21"},"nodeType":"YulFunctionCall","src":"4119:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4106:12:21"},"nodeType":"YulFunctionCall","src":"4106:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4096:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4182:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4191:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4194:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4184:6:21"},"nodeType":"YulFunctionCall","src":"4184:12:21"},"nodeType":"YulExpressionStatement","src":"4184:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4154:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4162:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4151:2:21"},"nodeType":"YulFunctionCall","src":"4151:30:21"},"nodeType":"YulIf","src":"4148:50:21"},{"nodeType":"YulAssignment","src":"4207:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4238:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4249:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4234:3:21"},"nodeType":"YulFunctionCall","src":"4234:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4258:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4217:16:21"},"nodeType":"YulFunctionCall","src":"4217:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4207:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3747:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3758:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3770:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3778:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3786:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3794:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3802:6:21","type":""}],"src":"3666:606:21"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let _3 := shl(5, _1)\n        let dst := allocate_memory(add(_3, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _3), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461006e578063f23a6e61146100bf575b600080fd5b610059610054366004610160565b6100f7565b60405190151581526020015b60405180910390f35b6100a661007c36600461030a565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610065565b6100a66100cd3660046103b4565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061015a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60006020828403121561017257600080fd5b81356001600160e01b03198116811461018a57600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101b557600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610212576102126101ba565b604052919050565b600082601f83011261022b57600080fd5b8135602067ffffffffffffffff821115610247576102476101ba565b8160051b6102568282016101e9565b928352848101820192828101908785111561027057600080fd5b83870192505b8483101561028f57823582529183019190830190610276565b979650505050505050565b600082601f8301126102ab57600080fd5b813567ffffffffffffffff8111156102c5576102c56101ba565b6102d8601f8201601f19166020016101e9565b8181528460208386010111156102ed57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561032257600080fd5b61032b86610191565b945061033960208701610191565b9350604086013567ffffffffffffffff8082111561035657600080fd5b61036289838a0161021a565b9450606088013591508082111561037857600080fd5b61038489838a0161021a565b9350608088013591508082111561039a57600080fd5b506103a78882890161029a565b9150509295509295909350565b600080600080600060a086880312156103cc57600080fd5b6103d586610191565b94506103e360208701610191565b93506040860135925060608601359150608086013567ffffffffffffffff81111561040d57600080fd5b6103a78882890161029a56fea264697066735822122002acd1c62656db060f7472a14033fd2d18c8e79e87695d44acd5349482d33b8d64736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x160 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA6 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x30A JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x65 JUMP JUMPDEST PUSH2 0xA6 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x3B4 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x15A JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x212 JUMPI PUSH2 0x212 PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x247 JUMPI PUSH2 0x247 PUSH2 0x1BA JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x256 DUP3 DUP3 ADD PUSH2 0x1E9 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x28F JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x276 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C5 JUMPI PUSH2 0x2C5 PUSH2 0x1BA JUMP JUMPDEST PUSH2 0x2D8 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1E9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32B DUP7 PUSH2 0x191 JUMP JUMPDEST SWAP5 POP PUSH2 0x339 PUSH1 0x20 DUP8 ADD PUSH2 0x191 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x362 DUP10 DUP4 DUP11 ADD PUSH2 0x21A JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x384 DUP10 DUP4 DUP11 ADD PUSH2 0x21A JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 DUP9 DUP3 DUP10 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D5 DUP7 PUSH2 0x191 JUMP JUMPDEST SWAP5 POP PUSH2 0x3E3 PUSH1 0x20 DUP8 ADD PUSH2 0x191 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A7 DUP9 DUP3 DUP10 ADD PUSH2 0x29A JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xAC 0xD1 0xC6 0x26 JUMP 0xDB MOD 0xF PUSH21 0x72A14033FD2D18C8E79E87695D44ACD5349482D33B DUP14 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"511:1001:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;661:254:10;;;;;;:::i;:::-;;:::i;:::-;;;516:14:21;;509:22;491:41;;479:2;464:18;661:254:10;;;;;;;;972:247:9;;;;;;:::i;:::-;1176:36;972:247;;;;;;;;;;;-1:-1:-1;;;;;;3575:79:21;;;3557:98;;3545:2;3530:18;972:247:9;3413:248:21;747:219:9;;;;;;:::i;:::-;928:31;747:219;;;;;;;;661:254:10;785:4;-1:-1:-1;;;;;;808:60:10;;823:45;808:60;;:100;;-1:-1:-1;1183:36:15;-1:-1:-1;;;;;;1168:51:15;;;872:36:10;801:107;661:254;-1:-1:-1;;661:254:10:o;14:332:21:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;-1:-1:-1;;;;;;223:5:21;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:21:o;543:196::-;611:20;;671:42;660:54;;650:65;;640:93;;729:1;726;719:12;640:93;543:196;;;:::o;744:184::-;796:77;793:1;786:88;893:4;890:1;883:15;917:4;914:1;907:15;933:275;1004:2;998:9;1069:2;1050:13;;-1:-1:-1;;1046:27:21;1034:40;;1104:18;1089:34;;1125:22;;;1086:62;1083:88;;;1151:18;;:::i;:::-;1187:2;1180:22;933:275;;-1:-1:-1;933:275:21:o;1213:712::-;1267:5;1320:3;1313:4;1305:6;1301:17;1297:27;1287:55;;1338:1;1335;1328:12;1287:55;1374:6;1361:20;1400:4;1423:18;1419:2;1416:26;1413:52;;;1445:18;;:::i;:::-;1491:2;1488:1;1484:10;1514:28;1538:2;1534;1530:11;1514:28;:::i;:::-;1576:15;;;1646;;;1642:24;;;1607:12;;;;1678:15;;;1675:35;;;1706:1;1703;1696:12;1675:35;1742:2;1734:6;1730:15;1719:26;;1754:142;1770:6;1765:3;1762:15;1754:142;;;1836:17;;1824:30;;1787:12;;;;1874;;;;1754:142;;;1914:5;1213:712;-1:-1:-1;;;;;;;1213:712:21:o;1930:530::-;1972:5;2025:3;2018:4;2010:6;2006:17;2002:27;1992:55;;2043:1;2040;2033:12;1992:55;2079:6;2066:20;2105:18;2101:2;2098:26;2095:52;;;2127:18;;:::i;:::-;2171:55;2214:2;2195:13;;-1:-1:-1;;2191:27:21;2220:4;2187:38;2171:55;:::i;:::-;2251:2;2242:7;2235:19;2297:3;2290:4;2285:2;2277:6;2273:15;2269:26;2266:35;2263:55;;;2314:1;2311;2304:12;2263:55;2379:2;2372:4;2364:6;2360:17;2353:4;2344:7;2340:18;2327:55;2427:1;2402:16;;;2420:4;2398:27;2391:38;;;;2406:7;1930:530;-1:-1:-1;;;1930:530:21:o;2465:943::-;2619:6;2627;2635;2643;2651;2704:3;2692:9;2683:7;2679:23;2675:33;2672:53;;;2721:1;2718;2711:12;2672:53;2744:29;2763:9;2744:29;:::i;:::-;2734:39;;2792:38;2826:2;2815:9;2811:18;2792:38;:::i;:::-;2782:48;;2881:2;2870:9;2866:18;2853:32;2904:18;2945:2;2937:6;2934:14;2931:34;;;2961:1;2958;2951:12;2931:34;2984:61;3037:7;3028:6;3017:9;3013:22;2984:61;:::i;:::-;2974:71;;3098:2;3087:9;3083:18;3070:32;3054:48;;3127:2;3117:8;3114:16;3111:36;;;3143:1;3140;3133:12;3111:36;3166:63;3221:7;3210:8;3199:9;3195:24;3166:63;:::i;:::-;3156:73;;3282:3;3271:9;3267:19;3254:33;3238:49;;3312:2;3302:8;3299:16;3296:36;;;3328:1;3325;3318:12;3296:36;;3351:51;3394:7;3383:8;3372:9;3368:24;3351:51;:::i;:::-;3341:61;;;2465:943;;;;;;;;:::o;3666:606::-;3770:6;3778;3786;3794;3802;3855:3;3843:9;3834:7;3830:23;3826:33;3823:53;;;3872:1;3869;3862:12;3823:53;3895:29;3914:9;3895:29;:::i;:::-;3885:39;;3943:38;3977:2;3966:9;3962:18;3943:38;:::i;:::-;3933:48;;4028:2;4017:9;4013:18;4000:32;3990:42;;4079:2;4068:9;4064:18;4051:32;4041:42;;4134:3;4123:9;4119:19;4106:33;4162:18;4154:6;4151:30;4148:50;;;4194:1;4191;4184:12;4148:50;4217:49;4258:7;4249:6;4238:9;4234:22;4217:49;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"220600","executionCost":"263","totalCost":"220863"},"external":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","supportsInterface(bytes4)":"392"},"internal":{"__ERC1155Holder_init()":"infinite","__ERC1155Holder_init_unchained()":"infinite"}},"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens. IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be stuck.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":\"ERC1155HolderUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2873,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2254,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":2200,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"notice":"Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens. IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be stuck.","version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol":{"ERC1155ReceiverUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":\"ERC1155ReceiverUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:ERC1155ReceiverUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:ERC1155ReceiverUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2873,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:ERC1155ReceiverUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2254,"contract":"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:ERC1155ReceiverUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef7e8d95a720f0996dab4bbfd23f9ff84fc6b49743d73e08dcf901a9dfd919df64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF PUSH31 0x8D95A720F0996DAB4BBFD23F9FF84FC6B49743D73E08DCF901A9DFD919DF64 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"199:8087:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;199:8087:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef7e8d95a720f0996dab4bbfd23f9ff84fc6b49743d73e08dcf901a9dfd919df64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF PUSH31 0x8D95A720F0996DAB4BBFD23F9FF84FC6B49743D73E08DCF901A9DFD919DF64 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"199:8087:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2580,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f7e6aff78698bf22ebe3ccba2798c50402ecb100bd1da59d33f9062d58e7baf64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F PUSH31 0x6AFF78698BF22EBE3CCBA2798C50402ECB100BD1DA59D33F9062D58E7BAF64 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"424:982:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:982:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f7e6aff78698bf22ebe3ccba2798c50402ecb100bd1da59d33f9062d58e7baf64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F PUSH31 0x6AFF78698BF22EBE3CCBA2798C50402ECB100BD1DA59D33F9062D58E7BAF64 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"424:982:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220971b959d796ab9c7bc9133510beca5db662e780c165bd3880143cfaf34f0b1ed64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SHL SWAP6 SWAP14 PUSH26 0x6AB9C7BC9133510BECA5DB662E780C165BD3880143CFAF34F0B1 0xED PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"204:2098:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;204:2098:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220971b959d796ab9c7bc9133510beca5db662e780c165bd3880143cfaf34f0b1ed64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 SHL SWAP6 SWAP14 PUSH26 0x6AB9C7BC9133510BECA5DB662E780C165BD3880143CFAF34F0B1 0xED PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"204:2098:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2873,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b320419622cacdd774383ab44f197a18f91c5ab0127dac4b625c9bcfcd89125664736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 KECCAK256 COINBASE SWAP7 0x22 0xCA 0xCD 0xD7 PUSH21 0x383AB44F197A18F91C5AB0127DAC4B625C9BCFCD89 SLT JUMP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"207:12313:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;207:12313:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b320419622cacdd774383ab44f197a18f91c5ab0127dac4b625c9bcfcd89125664736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 KECCAK256 COINBASE SWAP7 0x22 0xCA 0xCD 0xD7 PUSH21 0x383AB44F197A18F91C5AB0127DAC4B625C9BCFCD89 SLT JUMP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"207:12313:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/DwellaReit.sol":{"DR":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"string","name":"valuationReport","type":"string"},{"indexed":false,"internalType":"string","name":"legalContract","type":"string"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"}],"name":"DRTokenID","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokenWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MODERATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_platformAddress","type":"address"}],"name":"__DR_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"_tokenID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"tokenAmt","type":"uint256"}],"name":"buyToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getLegalContr","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getValuationRpt","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetOwner","type":"address"},{"internalType":"uint256","name":"totalAmt","type":"uint256"},{"internalType":"string","name":"valueRpt","type":"string"},{"internalType":"string","name":"legalContr","type":"string"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"rate","type":"uint256"}],"name":"mintToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platform_address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"DRTokenID(uint256,uint256,uint256,address,string,string,uint256)":{"details":"Declaration of new Event to record created token details for DRToken","params":{"id":"- Unique token ID","legalContract":"- File Hash of Legal Contract","owner":"- Asset Owner wallet address","timestamp":"- Time Stamp of Event","totalSupply":"- Number of tokens for unique token ID","valuationReport":"- File Hash of Valuation Report"}},"TokenWithdrawn(uint256,address,address,uint256)":{"details":"Declaration of new Event to record ERC20 token withdraw","params":{"amount":"- Total amount of USDT withdrawn","initiator":"- Wallet Address that invoked the withdrawal process","recipient":"- Wallet address which received the USDT","timestamp":"- Time Stamp of Event"}}},"kind":"dev","methods":{"__DR_init(address)":{"details":"Functions for ERC1155 Token 1. __ERC1155_init - Construct the ERC1155 token with URI 2. incrementTokenId() - Increase `tokenID` by 1 before minting new token"},"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"buyToken(uint256,uint256)":{"details":"Transfers `tokenAmt` tokens of token type `id` from `platform_address` to `investor` by calling ERC1155 safeTransferFrom function. Emits a {TransferSingle} event via ERC1155 library.  Requirements: - `id` must be equal or less than current Token ID. - `tokenAmt` must be equal or less than balance of Proxy Contract Transfers the payable amount of ETH equivalent to amount of tokens multiplied by the token rate.  Requirements: - Paid ETH amount must be equal or more than `tokenAmt` multiplied by the token rate.","params":{"id":"- Token ID","tokenAmt":"- Number of tokens purchased"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTotalSupply(uint256)":{"details":"Series of functions to retrieve token details from `DRToken` struct, including Total Supply, Owner, Valuation Report, Legal Contract and Service Fee.","params":{"tokenId":"- Unique token id of token"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"mintToken(address,uint256,string,string,uint256,uint256)":{"details":"Creates `totalAmt` tokens of token type `newTokenId`, by calling ERC1155 _mint function. Can only be called by the current admin.  Emits a {DRTokenID} event. Emits {TransferSingle} event via ERC1155 library. Requirements: - `legalContr` must not have been used for another token ID.","params":{"assetOwner":"- Asset Owner wallet address","fee":"- Fees to be paid to platform owner for sale proceedings","legalContr":"- File Hash of Legal Contract","rate":"- token rate for the sale","totalAmt":"- Total number of tokens for unique token ID","valueRpt":"- File Hash of Valuation Report"}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."},"withdrawToken(address,address,uint256)":{"details":"Withdraws any ERC20 from Contract Can only be called by the current admin.  Emits a {TokenWithdrawn} event.","params":{"_amount":"- Amount of ERC20 token to withdraw","_contract":"- token contact address to withdraw","_recipient":"- Wallet address to withdraw token to"}}},"stateVariables":{"MODERATOR":{"details":"Declaration of variables. 1. `MODERATOR` - Group of addresses possessing moderator authorization for AccessControl contract 2. `ADMIN_ROLE` - Group of addresses possessing admin authorization 3. `MINTER_ROLE` - Group of addresses possessing minting authorization 4. `_legalContracts` - Mapping of Token ID to Legal Contract File Hash 5. `platform_address` - Main address for the platform owner"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50613924806100206000396000f3fe6080604052600436106101e25760003560e01c806375b238fc11610102578063c41a360a11610095578063ecb1b76911610064578063ecb1b76914610656578063f23a6e6114610676578063f242432a146106a2578063fcee45f4146106c257600080fd5b8063c41a360a14610599578063d5391393146105b9578063d547741f146105ed578063e985e9c51461060d57600080fd5b8063a22cb465116100d1578063a22cb465146104fd578063ad0cdd891461051d578063b521b13314610534578063bc197c811461055457600080fd5b806375b238fc1461044e57806391d148541461048257806392ab723e146104c8578063a217fddf146104e857600080fd5b8063308ff1271161017a5780634aa10a80116101495780634aa10a80146103c95780634e1273f4146103e957806357764094146104165780635c975abb1461043657600080fd5b8063308ff1271461031c57806334b4e6251461033c57806334cd58dd1461037057806336568abe146103a957600080fd5b80630e89341c116101b65780630e89341c1461027f578063248a9ca3146102ac5780632eb2c2d6146102dc5780632f2ff15d146102fc57600080fd5b8062fdd58e146101e757806301e336671461021a57806301ffc9a71461023c578063057466ea1461026c575b600080fd5b3480156101f357600080fd5b50610207610202366004612f61565b6106e2565b6040519081526020015b60405180910390f35b34801561022657600080fd5b5061023a610235366004612f8b565b61078d565b005b34801561024857600080fd5b5061025c610257366004612fdd565b610a18565b6040519015158152602001610211565b61023a61027a366004612ffa565b610a29565b34801561028b57600080fd5b5061029f61029a36600461301c565b610d2b565b604051610211919061308d565b3480156102b857600080fd5b506102076102c736600461301c565b60009081526065602052604090206001015490565b3480156102e857600080fd5b5061023a6102f73660046131ec565b610dbf565b34801561030857600080fd5b5061023a610317366004613296565b610e61565b34801561032857600080fd5b5061029f61033736600461301c565b610e8b565b34801561034857600080fd5b506102077f58c8e11deab7910e89bf18a1168c6e6ef28748f00fd3094549459f01cec5e0aa81565b34801561037c57600080fd5b5061016054610391906001600160a01b031681565b6040516001600160a01b039091168152602001610211565b3480156103b557600080fd5b5061023a6103c4366004613296565b61100a565b3480156103d557600080fd5b5061029f6103e436600461301c565b611096565b3480156103f557600080fd5b506104096104043660046132c2565b611213565b60405161021191906133c8565b34801561042257600080fd5b5061020761043136600461301c565b611351565b34801561044257600080fd5b5060975460ff1661025c565b34801561045a57600080fd5b506102077fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561048e57600080fd5b5061025c61049d366004613296565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156104d457600080fd5b506102076104e336600461301c565b6114ce565b3480156104f457600080fd5b50610207600081565b34801561050957600080fd5b5061023a6105183660046133e9565b611648565b34801561052957600080fd5b506102076101625481565b34801561054057600080fd5b5061023a61054f366004613420565b611653565b34801561056057600080fd5b5061058061056f3660046131ec565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610211565b3480156105a557600080fd5b506103916105b436600461301c565b6118fe565b3480156105c557600080fd5b506102077f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156105f957600080fd5b5061023a610608366004613296565b611a7e565b34801561061957600080fd5b5061025c6106283660046134b0565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b34801561066257600080fd5b5061023a6106713660046134da565b611aa3565b34801561068257600080fd5b506105806106913660046134f5565b63f23a6e6160e01b95945050505050565b3480156106ae57600080fd5b5061023a6106bd3660046134f5565b611be6565b3480156106ce57600080fd5b506102076106dd36600461301c565b611c81565b60006001600160a01b0383166107655760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260c9602090815260408083206001600160a01b03949094168352929052205490565b3360009081527f2c01dc0041dfb6d4238a91e5a638996136aed16f837d5beb45610732cf9bf4b0602052604090205460ff1661081a5760405162461bcd60e51b815260206004820152602660248201527f4163636573732044656e6965643a2043616c6c6572206973206e6f74207468656044820152651020b236b4b760d11b606482015260840161075c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561087757600080fd5b505afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af919061355a565b9050828110156109275760405162461bcd60e51b815260206004820152602960248201527f416d6f756e74206f6620746f6b656e2077697468647261776e2065786365656460448201527f2062616c616e63652e0000000000000000000000000000000000000000000000606482015260840161075c565b604080514281523360208201526001600160a01b038616818301526060810185905290517ff9c80fffede54cc9d8066ec75e2427dc3863957bc3de78bcea60550de76fee1d9181900360800190a16040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905283169063a9059cbb90604401602060405180830381600087803b1580156109d857600080fd5b505af11580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a109190613573565b505050505050565b6000610a2382611dfe565b92915050565b610a31611e3c565b81610162541015610a845760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20494420646f65736e27742065786973742e000000000000000000604482015260640161075c565b80610a8f30846106e2565b1015610b035760405162461bcd60e51b815260206004820152603360248201527f4e756d626572206f6620746f6b656e732070757263686173656420657863656560448201527f6420746f6b656e7320617661696c61626c652e00000000000000000000000000606482015260840161075c565b600082815261016360209081526040808320815160c0810183528154815260018201546001600160a01b0316938101939093526002810180549192840191610b4a90613590565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7690613590565b8015610bc35780601f10610b9857610100808354040283529160200191610bc3565b820191906000526020600020905b815481529060010190602001808311610ba657829003601f168201915b50505050508152602001600382018054610bdc90613590565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0890613590565b8015610c555780601f10610c2a57610100808354040283529160200191610c55565b820191906000526020600020905b815481529060010190602001808311610c3857829003601f168201915b50505091835250506004820154602082015260059091015460409091015260a0810151909150610c8581846135e1565b341015610cd45760405162461bcd60e51b815260206004820152601060248201527f496e73756666696369656e742045544800000000000000000000000000000000604482015260640161075c565b6101605460408051808201909152600381527f30783000000000000000000000000000000000000000000000000000000000006020820152610d25916001600160a01b031690339087908790611be6565b50505050565b606060cb8054610d3a90613590565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6690613590565b8015610db35780601f10610d8857610100808354040283529160200191610db3565b820191906000526020600020905b815481529060010190602001808311610d9657829003601f168201915b50505050509050919050565b6001600160a01b038516331480610ddb5750610ddb8533610628565b610e4d5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161075c565b610e5a8585858585611e91565b5050505050565b600082815260656020526040902060010154610e7c816120ff565b610e86838361210c565b505050565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b031693810193909352600281018054606095949384019190610ed690613590565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0290613590565b8015610f4f5780601f10610f2457610100808354040283529160200191610f4f565b820191906000526020600020905b815481529060010190602001808311610f3257829003601f168201915b50505050508152602001600382018054610f6890613590565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9490613590565b8015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b505050918352505060048201546020820152600590910154604090910152606001519392505050565b6001600160a01b03811633146110885760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161075c565b61109282826121ae565b5050565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b0316938101939093526002810180546060959493840191906110e190613590565b80601f016020809104026020016040519081016040528092919081815260200182805461110d90613590565b801561115a5780601f1061112f5761010080835404028352916020019161115a565b820191906000526020600020905b81548152906001019060200180831161113d57829003601f168201915b5050505050815260200160038201805461117390613590565b80601f016020809104026020016040519081016040528092919081815260200182805461119f90613590565b80156111ec5780601f106111c1576101008083540402835291602001916111ec565b820191906000526020600020905b8154815290600101906020018083116111cf57829003601f168201915b50505091835250506004820154602082015260059091015460409182015201519392505050565b6060815183511461128c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161075c565b6000835167ffffffffffffffff8111156112a8576112a86130a0565b6040519080825280602002602001820160405280156112d1578160200160208202803683370190505b50905060005b84518110156113495761131c8582815181106112f5576112f5613600565b602002602001015185838151811061130f5761130f613600565b60200260200101516106e2565b82828151811061132e5761132e613600565b602090810291909101015261134281613616565b90506112d7565b509392505050565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b0316938101939093526002810180548594938401919061139a90613590565b80601f01602080910402602001604051908101604052809291908181526020018280546113c690613590565b80156114135780601f106113e857610100808354040283529160200191611413565b820191906000526020600020905b8154815290600101906020018083116113f657829003601f168201915b5050505050815260200160038201805461142c90613590565b80601f016020809104026020016040519081016040528092919081815260200182805461145890613590565b80156114a55780601f1061147a576101008083540402835291602001916114a5565b820191906000526020600020905b81548152906001019060200180831161148857829003601f168201915b50505091835250506004820154602082015260059091015460409091015260a001519392505050565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b0316938101939093526002810180548594938401919061151790613590565b80601f016020809104026020016040519081016040528092919081815260200182805461154390613590565b80156115905780601f1061156557610100808354040283529160200191611590565b820191906000526020600020905b81548152906001019060200180831161157357829003601f168201915b505050505081526020016003820180546115a990613590565b80601f01602080910402602001604051908101604052809291908181526020018280546115d590613590565b80156116225780601f106115f757610100808354040283529160200191611622565b820191906000526020600020905b81548152906001019060200180831161160557829003601f168201915b505050918352505060048201546020820152600590910154604090910152519392505050565b611092338383612231565b3360009081527f2c01dc0041dfb6d4238a91e5a638996136aed16f837d5beb45610732cf9bf4b0602052604090205460ff166116e05760405162461bcd60e51b815260206004820152602660248201527f4163636573732044656e6965643a2043616c6c6572206973206e6f74207468656044820152651020b236b4b760d11b606482015260840161075c565b6116e8611e3c565b61015f836040516116f99190613631565b90815260200160405180910390205460001461177d5760405162461bcd60e51b815260206004820152602660248201527f546869732061737365742068617320616c7265616479206265656e20746f6b6560448201527f6e697a65642e0000000000000000000000000000000000000000000000000000606482015260840161075c565b60328511156117ce5760405162461bcd60e51b815260206004820152601560248201527f416d6f756e74732065786365656473206c696d69740000000000000000000000604482015260640161075c565b6117d6612326565b6000610162549050866001600160a01b031686827f5eb64ff447a74fc2fd487956c0ca71b14e086fb45216d0d92b3370c73f623c364289898860405161181f949392919061364d565b60405180910390a46101625460009081526101636020908152604090912087815560018101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b161790558651909161187f916002840191890190612eac565b5084516118959060038301906020880190612eac565b5060048101849055600581018390556101625460405161015f906118ba908890613631565b90815260408051918290036020908101832093909355610160549282019052600081526118f4916001600160a01b03169084908a9061233f565b5050505050505050565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b0316938101939093526002810180548594938401919061194790613590565b80601f016020809104026020016040519081016040528092919081815260200182805461197390613590565b80156119c05780601f10611995576101008083540402835291602001916119c0565b820191906000526020600020905b8154815290600101906020018083116119a357829003601f168201915b505050505081526020016003820180546119d990613590565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0590613590565b8015611a525780601f10611a2757610100808354040283529160200191611a52565b820191906000526020600020905b815481529060010190602001808311611a3557829003601f168201915b505050505081526020016004820154815260200160058201548152505090508060200151915050919050565b600082815260656020526040902060010154611a99816120ff565b610e8683836121ae565b600054610100900460ff1615808015611ac35750600054600160ff909116105b80611add5750303b158015611add575060005460ff166001145b611b4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161075c565b6000805460ff191660011790558015611b72576000805461ff0019166101001790555b611b936040518060600160405280602281526020016138cd60229139612471565b611b9c826124e5565b8015611092576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6001600160a01b038516331480611c025750611c028533610628565b611c745760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f766564000000000000000000000000000000000000606482015260840161075c565b610e5a8585858585612627565b600081815261016360209081526040808320815160c0810183528154815260018201546001600160a01b03169381019390935260028101805485949384019190611cca90613590565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf690613590565b8015611d435780601f10611d1857610100808354040283529160200191611d43565b820191906000526020600020905b815481529060010190602001808311611d2657829003601f168201915b50505050508152602001600382018054611d5c90613590565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8890613590565b8015611dd55780601f10611daa57610100808354040283529160200191611dd5565b820191906000526020600020905b815481529060010190602001808311611db857829003601f168201915b505050918352505060048201546020820152600590910154604090910152608001519392505050565b60006001600160e01b031982167f4e2312e0000000000000000000000000000000000000000000000000000000001480610a235750610a23826127d6565b60975460ff1615611e8f5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161075c565b565b8151835114611f085760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161075c565b6001600160a01b038416611f6c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161075c565b3360005b8451811015612099576000858281518110611f8d57611f8d613600565b602002602001015190506000858381518110611fab57611fab613600565b602090810291909101810151600084815260c9835260408082206001600160a01b038e16835290935291909120549091508181101561203f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161075c565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061207e90849061368a565b925050819055505050508061209290613616565b9050611f70565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516120e99291906136a2565b60405180910390a4610a10818787878787612848565b61210981336129fd565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166110925760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561216a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156110925760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031614156122b95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161075c565b6001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61233561016180546001019055565b6101615461016255565b6001600160a01b0384166123bb5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161075c565b3360006123c785612a72565b905060006123d485612a72565b9050600086815260c9602090815260408083206001600160a01b038b1684529091528120805487929061240890849061368a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461246883600089898989612abd565b50505050505050565b600054610100900460ff166124dc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161075c565b61210981612bc8565b600054610100900460ff16158080156125055750600054600160ff909116105b8061251f5750303b15801561251f575060005460ff166001145b6125915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161075c565b6000805460ff1916600117905580156125b4576000805461ff0019166101001790555b610160805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905561016154610162558015611092576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611bda565b6001600160a01b03841661268b5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161075c565b33600061269785612a72565b905060006126a485612a72565b9050600086815260c9602090815260408083206001600160a01b038c1684529091529020548581101561272c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161075c565b600087815260c9602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061276b90849061368a565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46127cb848a8a8a8a8a612abd565b505050505050505050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061283957506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610a235750610a2382612c3c565b6001600160a01b0384163b15610a105760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061288c90899089908890889088906004016136d0565b602060405180830381600087803b1580156128a657600080fd5b505af19250505080156128d6575060408051601f3d908101601f191682019092526128d39181019061372e565b60015b61298c576128e261374b565b806308c379a0141561291c57506128f7613767565b80612902575061291e565b8060405162461bcd60e51b815260040161075c919061308d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161075c565b6001600160e01b0319811663bc197c8160e01b146124685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161075c565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1661109257612a3081612ca3565b612a3b836020612cb5565b604051602001612a4c9291906137f1565b60408051601f198184030181529082905262461bcd60e51b825261075c9160040161308d565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612aac57612aac613600565b602090810291909101015292915050565b6001600160a01b0384163b15610a105760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612b019089908990889088908890600401613872565b602060405180830381600087803b158015612b1b57600080fd5b505af1925050508015612b4b575060408051601f3d908101601f19168201909252612b489181019061372e565b60015b612b57576128e261374b565b6001600160e01b0319811663f23a6e6160e01b146124685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161075c565b600054610100900460ff16612c335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161075c565b61210981612e9d565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610a2357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a23565b6060610a236001600160a01b03831660145b60606000612cc48360026135e1565b612ccf90600261368a565b67ffffffffffffffff811115612ce757612ce76130a0565b6040519080825280601f01601f191660200182016040528015612d11576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d4857612d48613600565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d9357612d93613600565b60200101906001600160f81b031916908160001a9053506000612db78460026135e1565b612dc290600161368a565b90505b6001811115612e47577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612e0357612e03613600565b1a60f81b828281518110612e1957612e19613600565b60200101906001600160f81b031916908160001a90535060049490941c93612e40816138b5565b9050612dc5565b508315612e965760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161075c565b9392505050565b80516110929060cb9060208401905b828054612eb890613590565b90600052602060002090601f016020900481019282612eda5760008555612f20565b82601f10612ef357805160ff1916838001178555612f20565b82800160010185558215612f20579182015b82811115612f20578251825591602001919060010190612f05565b50612f2c929150612f30565b5090565b5b80821115612f2c5760008155600101612f31565b80356001600160a01b0381168114612f5c57600080fd5b919050565b60008060408385031215612f7457600080fd5b612f7d83612f45565b946020939093013593505050565b600080600060608486031215612fa057600080fd5b612fa984612f45565b9250612fb760208501612f45565b9150604084013590509250925092565b6001600160e01b03198116811461210957600080fd5b600060208284031215612fef57600080fd5b8135612e9681612fc7565b6000806040838503121561300d57600080fd5b50508035926020909101359150565b60006020828403121561302e57600080fd5b5035919050565b60005b83811015613050578181015183820152602001613038565b83811115610d255750506000910152565b60008151808452613079816020860160208601613035565b601f01601f19169290920160200192915050565b602081526000612e966020830184613061565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156130dc576130dc6130a0565b6040525050565b600067ffffffffffffffff8211156130fd576130fd6130a0565b5060051b60200190565b600082601f83011261311857600080fd5b81356020613125826130e3565b60405161313282826130b6565b83815260059390931b850182019282810191508684111561315257600080fd5b8286015b8481101561316d5780358352918301918301613156565b509695505050505050565b600082601f83011261318957600080fd5b813567ffffffffffffffff8111156131a3576131a36130a0565b6040516131ba601f8301601f1916602001826130b6565b8181528460208386010111156131cf57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561320457600080fd5b61320d86612f45565b945061321b60208701612f45565b9350604086013567ffffffffffffffff8082111561323857600080fd5b61324489838a01613107565b9450606088013591508082111561325a57600080fd5b61326689838a01613107565b9350608088013591508082111561327c57600080fd5b5061328988828901613178565b9150509295509295909350565b600080604083850312156132a957600080fd5b823591506132b960208401612f45565b90509250929050565b600080604083850312156132d557600080fd5b823567ffffffffffffffff808211156132ed57600080fd5b818501915085601f83011261330157600080fd5b8135602061330e826130e3565b60405161331b82826130b6565b83815260059390931b850182019282810191508984111561333b57600080fd5b948201945b838610156133605761335186612f45565b82529482019490820190613340565b9650508601359250508082111561337657600080fd5b5061338385828601613107565b9150509250929050565b600081518084526020808501945080840160005b838110156133bd578151875295820195908201906001016133a1565b509495945050505050565b602081526000612e96602083018461338d565b801515811461210957600080fd5b600080604083850312156133fc57600080fd5b61340583612f45565b91506020830135613415816133db565b809150509250929050565b60008060008060008060c0878903121561343957600080fd5b61344287612f45565b955060208701359450604087013567ffffffffffffffff8082111561346657600080fd5b6134728a838b01613178565b9550606089013591508082111561348857600080fd5b5061349589828a01613178565b9350506080870135915060a087013590509295509295509295565b600080604083850312156134c357600080fd5b6134cc83612f45565b91506132b960208401612f45565b6000602082840312156134ec57600080fd5b612e9682612f45565b600080600080600060a0868803121561350d57600080fd5b61351686612f45565b945061352460208701612f45565b93506040860135925060608601359150608086013567ffffffffffffffff81111561354e57600080fd5b61328988828901613178565b60006020828403121561356c57600080fd5b5051919050565b60006020828403121561358557600080fd5b8151612e96816133db565b600181811c908216806135a457607f821691505b602082108114156135c557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156135fb576135fb6135cb565b500290565b634e487b7160e01b600052603260045260246000fd5b600060001982141561362a5761362a6135cb565b5060010190565b60008251613643818460208701613035565b9190910192915050565b8481526080602082015260006136666080830186613061565b82810360408401526136788186613061565b91505082606083015295945050505050565b6000821982111561369d5761369d6135cb565b500190565b6040815260006136b5604083018561338d565b82810360208401526136c7818561338d565b95945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526136fc60a083018661338d565b828103606084015261370e818661338d565b905082810360808401526137228185613061565b98975050505050505050565b60006020828403121561374057600080fd5b8151612e9681612fc7565b600060033d11156137645760046000803e5060005160e01c5b90565b600060443d10156137755790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156137a557505050505090565b82850191508151818111156137bd5750505050505090565b843d87010160208285010111156137d75750505050505090565b6137e6602082860101876130b6565b509095945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613829816017850160208801613035565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613866816028840160208801613035565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526138aa60a0830184613061565b979650505050505050565b6000816138c4576138c46135cb565b50600019019056fe68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69647d2e6a736f6ea2646970667358221220ccb04f01a846d14ffa6a209107f64018b1d0713b807b4e191102905c3b15eaba64736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3924 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC41A360A GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xECB1B769 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xECB1B769 EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xFCEE45F4 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC41A360A EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x60D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xAD0CDD89 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xB521B133 EQ PUSH2 0x534 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x92AB723E EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x308FF127 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4AA10A80 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4AA10A80 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x57764094 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x308FF127 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x34B4E625 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x34CD58DD EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x1E33667 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x57466EA EQ PUSH2 0x26C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F61 JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F8B JUMP JUMPDEST PUSH2 0x78D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FDD JUMP JUMPDEST PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH2 0x23A PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x2FFA JUMP JUMPDEST PUSH2 0xA29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x308D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x31EC JUMP JUMPDEST PUSH2 0xDBF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0xE61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0xE8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0x58C8E11DEAB7910E89BF18A1168C6E6EF28748F00FD3094549459F01CEC5E0AA DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD PUSH2 0x391 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1096 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x32C2 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x33C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1351 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x25C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x14CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E9 JUMP JUMPDEST PUSH2 0x1648 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x162 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x54F CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x580 PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x31EC JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x391 PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x18FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x1A7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x34B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x671 CALLDATASIZE PUSH1 0x4 PUSH2 0x34DA JUMP JUMPDEST PUSH2 0x1AA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x580 PUSH2 0x691 CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH2 0x1BE6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x6DD CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x2C01DC0041DFB6D4238A91E5A638996136AED16F837D5BEB45610732CF9BF4B0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732044656E6965643A2043616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1020B236B4B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x88B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x355A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x927 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206F6620746F6B656E2077697468647261776E20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2062616C616E63652E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xF9C80FFFEDE54CC9D8066EC75E2427DC3863957BC3DE78BCEA60550DE76FEE1D SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA10 SWAP2 SWAP1 PUSH2 0x3573 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA23 DUP3 PUSH2 0x1DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA31 PUSH2 0x1E3C JUMP JUMPDEST DUP2 PUSH2 0x162 SLOAD LT ISZERO PUSH2 0xA84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20494420646F65736E27742065786973742E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST DUP1 PUSH2 0xA8F ADDRESS DUP5 PUSH2 0x6E2 JUMP JUMPDEST LT ISZERO PUSH2 0xB03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E756D626572206F6620746F6B656E7320707572636861736564206578636565 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E7320617661696C61626C652E00000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 ADD SWAP2 PUSH2 0xB4A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB76 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB98 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xBDC SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC08 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC55 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC2A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC55 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC38 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC85 DUP2 DUP5 PUSH2 0x35E1 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742045544800000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x160 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD25 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x1BE6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCB DUP1 SLOAD PUSH2 0xD3A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD66 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDB3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD88 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD96 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xDDB JUMPI POP PUSH2 0xDDB DUP6 CALLER PUSH2 0x628 JUMP JUMPDEST PUSH2 0xE4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0xE5A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E91 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xE7C DUP2 PUSH2 0x20FF JUMP JUMPDEST PUSH2 0xE86 DUP4 DUP4 PUSH2 0x210C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x60 SWAP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0xED6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF02 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF4F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF24 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF4F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF32 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xF68 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF94 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFB6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFE1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFC4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0x60 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x1092 DUP3 DUP3 PUSH2 0x21AE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x60 SWAP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x10E1 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x110D SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x115A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x112F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x115A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x113D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1173 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x119F SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x11C1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x11CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP2 DUP3 ADD MSTORE ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x128C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12A8 JUMPI PUSH2 0x12A8 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1349 JUMPI PUSH2 0x131C DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12F5 JUMPI PUSH2 0x12F5 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x130F JUMPI PUSH2 0x130F PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E2 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x132E JUMPI PUSH2 0x132E PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x1342 DUP2 PUSH2 0x3616 JUMP JUMPDEST SWAP1 POP PUSH2 0x12D7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x139A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13C6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1413 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1413 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x142C SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1458 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14A5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x147A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14A5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1488 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0xA0 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1517 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1543 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1590 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1565 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1590 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1573 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x15A9 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x15D5 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1622 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x15F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1622 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1605 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1092 CALLER DUP4 DUP4 PUSH2 0x2231 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x2C01DC0041DFB6D4238A91E5A638996136AED16F837D5BEB45610732CF9BF4B0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x16E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732044656E6965643A2043616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1020B236B4B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x16E8 PUSH2 0x1E3C JUMP JUMPDEST PUSH2 0x15F DUP4 PUSH1 0x40 MLOAD PUSH2 0x16F9 SWAP2 SWAP1 PUSH2 0x3631 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SLOAD PUSH1 0x0 EQ PUSH2 0x177D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546869732061737365742068617320616C7265616479206265656E20746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697A65642E0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x32 DUP6 GT ISZERO PUSH2 0x17CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74732065786365656473206C696D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x17D6 PUSH2 0x2326 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x162 SLOAD SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP3 PUSH32 0x5EB64FF447A74FC2FD487956C0CA71B14E086FB45216D0D92B3370C73F623C36 TIMESTAMP DUP10 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH2 0x181F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x364D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x162 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP8 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND OR SWAP1 SSTORE DUP7 MLOAD SWAP1 SWAP2 PUSH2 0x187F SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 DUP10 ADD SWAP1 PUSH2 0x2EAC JUMP JUMPDEST POP DUP5 MLOAD PUSH2 0x1895 SWAP1 PUSH1 0x3 DUP4 ADD SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x2EAC JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP4 SWAP1 SSTORE PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH2 0x15F SWAP1 PUSH2 0x18BA SWAP1 DUP9 SWAP1 PUSH2 0x3631 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB PUSH1 0x20 SWAP1 DUP2 ADD DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH2 0x160 SLOAD SWAP3 DUP3 ADD SWAP1 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x18F4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP5 SWAP1 DUP11 SWAP1 PUSH2 0x233F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1947 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1973 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19C0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1995 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19C0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19A3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x19D9 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A05 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A52 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A27 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A52 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A35 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1A99 DUP2 PUSH2 0x20FF JUMP JUMPDEST PUSH2 0xE86 DUP4 DUP4 PUSH2 0x21AE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1AC3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1ADD JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ADD JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B93 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x38CD PUSH1 0x22 SWAP2 CODECOPY PUSH2 0x2471 JUMP JUMPDEST PUSH2 0x1B9C DUP3 PUSH2 0x24E5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x1C02 JUMPI POP PUSH2 0x1C02 DUP6 CALLER PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1C74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0xE5A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2627 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1CCA SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CF6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D43 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D18 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1D43 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D26 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1D5C SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D88 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DD5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DAA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DD5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DB8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0x80 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0xA23 JUMPI POP PUSH2 0xA23 DUP3 PUSH2 0x27D6 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1F08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1F6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2099 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1F8D JUMPI PUSH2 0x1F8D PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1FAB JUMPI PUSH2 0x1FAB PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x203F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x207E SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x2092 SWAP1 PUSH2 0x3616 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F70 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x20E9 SWAP3 SWAP2 SWAP1 PUSH2 0x36A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA10 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2848 JUMP JUMPDEST PUSH2 0x2109 DUP2 CALLER PUSH2 0x29FD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1092 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x216A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x22B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2335 PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH2 0x162 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x23BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x23C7 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23D4 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x2408 SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2468 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x2ABD JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x24DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x2109 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2505 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x251F JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x251F JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x2591 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x25B4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x161 SLOAD PUSH2 0x162 SSTORE DUP1 ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0x1BDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x268B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x2697 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26A4 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x272C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x276B SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x27CB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x2ABD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x2839 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0xA23 JUMPI POP PUSH2 0xA23 DUP3 PUSH2 0x2C3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x288C SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x28D6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x28D3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x372E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x298C JUMPI PUSH2 0x28E2 PUSH2 0x374B JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 EQ ISZERO PUSH2 0x291C JUMPI POP PUSH2 0x28F7 PUSH2 0x3767 JUMP JUMPDEST DUP1 PUSH2 0x2902 JUMPI POP PUSH2 0x291E JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75C SWAP2 SWAP1 PUSH2 0x308D JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x2468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1092 JUMPI PUSH2 0x2A30 DUP2 PUSH2 0x2CA3 JUMP JUMPDEST PUSH2 0x2A3B DUP4 PUSH1 0x20 PUSH2 0x2CB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A4C SWAP3 SWAP2 SWAP1 PUSH2 0x37F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x75C SWAP2 PUSH1 0x4 ADD PUSH2 0x308D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI PUSH2 0x2AAC PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x2B01 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3872 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2B4B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2B48 SWAP2 DUP2 ADD SWAP1 PUSH2 0x372E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B57 JUMPI PUSH2 0x28E2 PUSH2 0x374B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x2468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x2109 DUP2 PUSH2 0x2E9D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0xA23 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0xA23 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA23 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2CC4 DUP4 PUSH1 0x2 PUSH2 0x35E1 JUMP JUMPDEST PUSH2 0x2CCF SWAP1 PUSH1 0x2 PUSH2 0x368A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CE7 JUMPI PUSH2 0x2CE7 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D11 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2D48 JUMPI PUSH2 0x2D48 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2D93 JUMPI PUSH2 0x2D93 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2DB7 DUP5 PUSH1 0x2 PUSH2 0x35E1 JUMP JUMPDEST PUSH2 0x2DC2 SWAP1 PUSH1 0x1 PUSH2 0x368A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2E47 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2E03 JUMPI PUSH2 0x2E03 PUSH2 0x3600 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E19 JUMPI PUSH2 0x2E19 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2E40 DUP2 PUSH2 0x38B5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DC5 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x2E96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1092 SWAP1 PUSH1 0xCB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2EB8 SWAP1 PUSH2 0x3590 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2EDA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2F20 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2EF3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2F20 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2F20 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2F20 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2F05 JUMP JUMPDEST POP PUSH2 0x2F2C SWAP3 SWAP2 POP PUSH2 0x2F30 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2F2C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2F31 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F7D DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FA9 DUP5 PUSH2 0x2F45 JUMP JUMPDEST SWAP3 POP PUSH2 0x2FB7 PUSH1 0x20 DUP6 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E96 DUP2 PUSH2 0x2FC7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x300D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x302E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3050 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3038 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD25 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3079 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3061 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x30DC JUMPI PUSH2 0x30DC PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x30FD JUMPI PUSH2 0x30FD PUSH2 0x30A0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3125 DUP3 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3132 DUP3 DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x3152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x316D JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3156 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31A3 JUMPI PUSH2 0x31A3 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31BA PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x31CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x320D DUP7 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 POP PUSH2 0x321B PUSH1 0x20 DUP8 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3244 DUP10 DUP4 DUP11 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x325A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3266 DUP10 DUP4 DUP11 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x327C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3289 DUP9 DUP3 DUP10 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x32B9 PUSH1 0x20 DUP5 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x32ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x330E DUP3 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x331B DUP3 DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x333B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x3360 JUMPI PUSH2 0x3351 DUP7 PUSH2 0x2F45 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x3340 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x3376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3383 DUP6 DUP3 DUP7 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x33BD JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x33A1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x338D JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3405 DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3415 DUP2 PUSH2 0x33DB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3442 DUP8 PUSH2 0x2F45 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3472 DUP11 DUP4 DUP12 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3495 DUP10 DUP3 DUP11 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34CC DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH2 0x32B9 PUSH1 0x20 DUP5 ADD PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E96 DUP3 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x350D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3516 DUP7 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 POP PUSH2 0x3524 PUSH1 0x20 DUP8 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x354E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3289 DUP9 DUP3 DUP10 ADD PUSH2 0x3178 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x356C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E96 DUP2 PUSH2 0x33DB JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x35A4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x35C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x35FB JUMPI PUSH2 0x35FB PUSH2 0x35CB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x362A JUMPI PUSH2 0x362A PUSH2 0x35CB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3643 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3035 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3666 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3061 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3678 DUP2 DUP7 PUSH2 0x3061 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x369D JUMPI PUSH2 0x369D PUSH2 0x35CB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x36B5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x338D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x36C7 DUP2 DUP6 PUSH2 0x338D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36FC PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x338D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x370E DUP2 DUP7 PUSH2 0x338D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x3722 DUP2 DUP6 PUSH2 0x3061 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E96 DUP2 PUSH2 0x2FC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x3764 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x3775 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x37A5 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x37BD JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x37D7 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x37E6 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x30B6 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x3829 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x3866 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3035 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x38AA PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3061 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x38C4 JUMPI PUSH2 0x38C4 PUSH2 0x35CB JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH9 0x747470733A2F2F746F PUSH12 0x656E2D63646E2D646F6D6169 PUSH15 0x2F7B69647D2E6A736F6EA264697066 PUSH20 0x58221220CCB04F01A846D14FFA6A209107F64018 0xB1 0xD0 PUSH18 0x3B807B4E191102905C3B15EABA64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"783:8653:20:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_3864":{"entryPoint":null,"id":3864,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":null,"id":42,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_3869":{"entryPoint":null,"id":3869,"parameterSlots":0,"returnSlots":0},"@MODERATOR_3859":{"entryPoint":null,"id":3859,"parameterSlots":0,"returnSlots":0},"@__DR_init_3961":{"entryPoint":6819,"id":3961,"parameterSlots":1,"returnSlots":0},"@__DR_init_unchained_3979":{"entryPoint":9445,"id":3979,"parameterSlots":1,"returnSlots":0},"@__ERC1155_init_757":{"entryPoint":9329,"id":757,"parameterSlots":1,"returnSlots":0},"@__ERC1155_init_unchained_769":{"entryPoint":11208,"id":769,"parameterSlots":1,"returnSlots":0},"@_afterTokenTransfer_1790":{"entryPoint":null,"id":1790,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1946":{"entryPoint":10866,"id":1946,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1771":{"entryPoint":null,"id":1771,"parameterSlots":6,"returnSlots":0},"@_checkRole_107":{"entryPoint":8447,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":10749,"id":146,"parameterSlots":2,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1918":{"entryPoint":10312,"id":1918,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1853":{"entryPoint":10941,"id":1853,"parameterSlots":6,"returnSlots":0},"@_grantRole_298":{"entryPoint":8460,"id":298,"parameterSlots":2,"returnSlots":0},"@_mint_1381":{"entryPoint":9023,"id":1381,"parameterSlots":4,"returnSlots":0},"@_msgSender_2566":{"entryPoint":null,"id":2566,"parameterSlots":0,"returnSlots":1},"@_requireNotPaused_658":{"entryPoint":7740,"id":658,"parameterSlots":0,"returnSlots":0},"@_revokeRole_329":{"entryPoint":8622,"id":329,"parameterSlots":2,"returnSlots":0},"@_safeBatchTransferFrom_1269":{"entryPoint":7825,"id":1269,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1134":{"entryPoint":9767,"id":1134,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1752":{"entryPoint":8753,"id":1752,"parameterSlots":3,"returnSlots":0},"@_setURI_1280":{"entryPoint":11933,"id":1280,"parameterSlots":1,"returnSlots":0},"@_tokenID_3898":{"entryPoint":null,"id":3898,"parameterSlots":0,"returnSlots":0},"@balanceOfBatch_904":{"entryPoint":4627,"id":904,"parameterSlots":2,"returnSlots":1},"@balanceOf_840":{"entryPoint":1762,"id":840,"parameterSlots":2,"returnSlots":1},"@buyToken_4348":{"entryPoint":2601,"id":4348,"parameterSlots":2,"returnSlots":0},"@current_2599":{"entryPoint":null,"id":2599,"parameterSlots":1,"returnSlots":1},"@getFee_4102":{"entryPoint":7297,"id":4102,"parameterSlots":1,"returnSlots":1},"@getLegalContr_4084":{"entryPoint":3723,"id":4084,"parameterSlots":1,"returnSlots":1},"@getOwner_4048":{"entryPoint":6398,"id":4048,"parameterSlots":1,"returnSlots":1},"@getRate_4120":{"entryPoint":4945,"id":4120,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":null,"id":161,"parameterSlots":1,"returnSlots":1},"@getTotalSupply_4030":{"entryPoint":5326,"id":4030,"parameterSlots":1,"returnSlots":1},"@getValuationRpt_4066":{"entryPoint":4246,"id":4066,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":3681,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":null,"id":94,"parameterSlots":2,"returnSlots":1},"@incrementTokenId_3994":{"entryPoint":8998,"id":3994,"parameterSlots":0,"returnSlots":0},"@increment_2613":{"entryPoint":null,"id":2613,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_939":{"entryPoint":null,"id":939,"parameterSlots":2,"returnSlots":1},"@isContract_2273":{"entryPoint":null,"id":2273,"parameterSlots":1,"returnSlots":1},"@mintToken_4231":{"entryPoint":5715,"id":4231,"parameterSlots":6,"returnSlots":0},"@onERC1155BatchReceived_2195":{"entryPoint":null,"id":2195,"parameterSlots":5,"returnSlots":1},"@onERC1155Received_2172":{"entryPoint":null,"id":2172,"parameterSlots":5,"returnSlots":1},"@paused_646":{"entryPoint":null,"id":646,"parameterSlots":0,"returnSlots":1},"@platform_address_3875":{"entryPoint":null,"id":3875,"parameterSlots":0,"returnSlots":0},"@renounceRole_224":{"entryPoint":4106,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":6782,"id":201,"parameterSlots":2,"returnSlots":0},"@safeBatchTransferFrom_1017":{"entryPoint":3519,"id":1017,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_977":{"entryPoint":7142,"id":977,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_921":{"entryPoint":5704,"id":921,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2249":{"entryPoint":7678,"id":2249,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2868":{"entryPoint":null,"id":2868,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4011":{"entryPoint":2584,"id":4011,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":11324,"id":75,"parameterSlots":1,"returnSlots":1},"@supportsInterface_800":{"entryPoint":10198,"id":800,"parameterSlots":1,"returnSlots":1},"@toHexString_2809":{"entryPoint":11445,"id":2809,"parameterSlots":2,"returnSlots":1},"@toHexString_2829":{"entryPoint":11427,"id":2829,"parameterSlots":1,"returnSlots":1},"@uri_812":{"entryPoint":3371,"id":812,"parameterSlots":1,"returnSlots":1},"@withdrawToken_4284":{"entryPoint":1933,"id":4284,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":12101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":12551,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":12664,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13530,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13488,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":12780,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12171,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":13557,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":13289,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":12129,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint256t_uint256":{"entryPoint":13344,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":12994,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":13683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":12950,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":14126,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":12316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":13658,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":12282,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn":{"entryPoint":13197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":12385,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13873,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14321,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14032,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14450,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":13256,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":13986,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12429,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_048d1d55885f31d97d9e91ff9218b71d61cbd9c58fe78fffe2a74206bc0fcd71__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_17dae8a879ae2b2f13bfae8beec1dde541d158682b83c46e12bf6eb43ecd3e8f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245b480e3b3571387aeccc24a0e30729b808c7ff4317e4407c32bec09b406d5e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_525088f24019467d21944c4a5381b76afb629a87758f322f4600e8d76a9df151__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_85cf8b9f8561e0d6e218c757218c60912bfc149fb4d146030b0e05ffd2e40325__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e765cf6582a2dd38fa7894df72e944eee1df0925da551b1c939c1fa84bbe840f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":13901,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":12515,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13962,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":13793,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":12341,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":14517,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13712,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":12470,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":13846,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":13771,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":13824,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":12448,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":14155,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":14183,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bool":{"entryPoint":13275,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":12231,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:27484:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:21","statements":[{"nodeType":"YulAssignment","src":"73:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:21"},"nodeType":"YulFunctionCall","src":"82:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:21"}]},{"body":{"nodeType":"YulBlock","src":"188:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:21"},"nodeType":"YulFunctionCall","src":"190:12:21"},"nodeType":"YulExpressionStatement","src":"190:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:21"},"nodeType":"YulFunctionCall","src":"131:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:21"},"nodeType":"YulFunctionCall","src":"121:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:21"},"nodeType":"YulFunctionCall","src":"114:73:21"},"nodeType":"YulIf","src":"111:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:21","type":""}],"src":"14:196:21"},{"body":{"nodeType":"YulBlock","src":"302:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:21"},"nodeType":"YulFunctionCall","src":"350:12:21"},"nodeType":"YulExpressionStatement","src":"350:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"323:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"332:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"319:3:21"},"nodeType":"YulFunctionCall","src":"319:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"344:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"315:3:21"},"nodeType":"YulFunctionCall","src":"315:32:21"},"nodeType":"YulIf","src":"312:52:21"},{"nodeType":"YulAssignment","src":"373:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"402:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"383:18:21"},"nodeType":"YulFunctionCall","src":"383:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"373:6:21"}]},{"nodeType":"YulAssignment","src":"421:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:21"},"nodeType":"YulFunctionCall","src":"444:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"431:12:21"},"nodeType":"YulFunctionCall","src":"431:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"421:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"271:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"283:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"291:6:21","type":""}],"src":"215:254:21"},{"body":{"nodeType":"YulBlock","src":"575:76:21","statements":[{"nodeType":"YulAssignment","src":"585:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"608:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"593:3:21"},"nodeType":"YulFunctionCall","src":"593:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"585:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"627:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"638:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:21"},"nodeType":"YulFunctionCall","src":"620:25:21"},"nodeType":"YulExpressionStatement","src":"620:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"544:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"555:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"566:4:21","type":""}],"src":"474:177:21"},{"body":{"nodeType":"YulBlock","src":"760:224:21","statements":[{"body":{"nodeType":"YulBlock","src":"806:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"815:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"818:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"808:6:21"},"nodeType":"YulFunctionCall","src":"808:12:21"},"nodeType":"YulExpressionStatement","src":"808:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"781:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"777:3:21"},"nodeType":"YulFunctionCall","src":"777:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"802:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"773:3:21"},"nodeType":"YulFunctionCall","src":"773:32:21"},"nodeType":"YulIf","src":"770:52:21"},{"nodeType":"YulAssignment","src":"831:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"860:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"841:18:21"},"nodeType":"YulFunctionCall","src":"841:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"831:6:21"}]},{"nodeType":"YulAssignment","src":"879:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"912:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"923:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"908:3:21"},"nodeType":"YulFunctionCall","src":"908:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"889:18:21"},"nodeType":"YulFunctionCall","src":"889:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"879:6:21"}]},{"nodeType":"YulAssignment","src":"936:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"963:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"974:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"959:3:21"},"nodeType":"YulFunctionCall","src":"959:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"946:12:21"},"nodeType":"YulFunctionCall","src":"946:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"936:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"710:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"721:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"733:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"741:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"749:6:21","type":""}],"src":"656:328:21"},{"body":{"nodeType":"YulBlock","src":"1033:133:21","statements":[{"body":{"nodeType":"YulBlock","src":"1144:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1153:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1156:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1146:6:21"},"nodeType":"YulFunctionCall","src":"1146:12:21"},"nodeType":"YulExpressionStatement","src":"1146:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1056:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1067:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1074:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1063:3:21"},"nodeType":"YulFunctionCall","src":"1063:78:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1053:2:21"},"nodeType":"YulFunctionCall","src":"1053:89:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1046:6:21"},"nodeType":"YulFunctionCall","src":"1046:97:21"},"nodeType":"YulIf","src":"1043:117:21"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1022:5:21","type":""}],"src":"989:177:21"},{"body":{"nodeType":"YulBlock","src":"1240:176:21","statements":[{"body":{"nodeType":"YulBlock","src":"1286:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1295:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1298:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1288:6:21"},"nodeType":"YulFunctionCall","src":"1288:12:21"},"nodeType":"YulExpressionStatement","src":"1288:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1261:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1257:3:21"},"nodeType":"YulFunctionCall","src":"1257:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1282:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1253:3:21"},"nodeType":"YulFunctionCall","src":"1253:32:21"},"nodeType":"YulIf","src":"1250:52:21"},{"nodeType":"YulVariableDeclaration","src":"1311:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1337:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1324:12:21"},"nodeType":"YulFunctionCall","src":"1324:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1315:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1380:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"1356:23:21"},"nodeType":"YulFunctionCall","src":"1356:30:21"},"nodeType":"YulExpressionStatement","src":"1356:30:21"},{"nodeType":"YulAssignment","src":"1395:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1405:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1395:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1206:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1217:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1229:6:21","type":""}],"src":"1171:245:21"},{"body":{"nodeType":"YulBlock","src":"1516:92:21","statements":[{"nodeType":"YulAssignment","src":"1526:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1538:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1549:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1534:3:21"},"nodeType":"YulFunctionCall","src":"1534:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1526:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1568:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1593:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1586:6:21"},"nodeType":"YulFunctionCall","src":"1586:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1579:6:21"},"nodeType":"YulFunctionCall","src":"1579:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1561:6:21"},"nodeType":"YulFunctionCall","src":"1561:41:21"},"nodeType":"YulExpressionStatement","src":"1561:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1485:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1496:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1507:4:21","type":""}],"src":"1421:187:21"},{"body":{"nodeType":"YulBlock","src":"1700:161:21","statements":[{"body":{"nodeType":"YulBlock","src":"1746:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1755:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1758:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1748:6:21"},"nodeType":"YulFunctionCall","src":"1748:12:21"},"nodeType":"YulExpressionStatement","src":"1748:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1721:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1730:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1717:3:21"},"nodeType":"YulFunctionCall","src":"1717:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1742:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1713:3:21"},"nodeType":"YulFunctionCall","src":"1713:32:21"},"nodeType":"YulIf","src":"1710:52:21"},{"nodeType":"YulAssignment","src":"1771:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1794:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1781:12:21"},"nodeType":"YulFunctionCall","src":"1781:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1771:6:21"}]},{"nodeType":"YulAssignment","src":"1813:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1840:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1851:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1836:3:21"},"nodeType":"YulFunctionCall","src":"1836:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1823:12:21"},"nodeType":"YulFunctionCall","src":"1823:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1813:6:21"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1658:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1669:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1681:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1689:6:21","type":""}],"src":"1613:248:21"},{"body":{"nodeType":"YulBlock","src":"1936:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"1982:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1991:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1994:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1984:6:21"},"nodeType":"YulFunctionCall","src":"1984:12:21"},"nodeType":"YulExpressionStatement","src":"1984:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1957:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1966:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1953:3:21"},"nodeType":"YulFunctionCall","src":"1953:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1978:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1949:3:21"},"nodeType":"YulFunctionCall","src":"1949:32:21"},"nodeType":"YulIf","src":"1946:52:21"},{"nodeType":"YulAssignment","src":"2007:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2030:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2017:12:21"},"nodeType":"YulFunctionCall","src":"2017:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2007:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1902:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1913:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1925:6:21","type":""}],"src":"1866:180:21"},{"body":{"nodeType":"YulBlock","src":"2104:205:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2114:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2123:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2118:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2183:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2208:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2213:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2204:3:21"},"nodeType":"YulFunctionCall","src":"2204:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2227:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"2232:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2223:3:21"},"nodeType":"YulFunctionCall","src":"2223:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2217:5:21"},"nodeType":"YulFunctionCall","src":"2217:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2197:6:21"},"nodeType":"YulFunctionCall","src":"2197:39:21"},"nodeType":"YulExpressionStatement","src":"2197:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2144:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2147:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2141:2:21"},"nodeType":"YulFunctionCall","src":"2141:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2155:19:21","statements":[{"nodeType":"YulAssignment","src":"2157:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2166:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"2169:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2162:3:21"},"nodeType":"YulFunctionCall","src":"2162:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2157:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2137:3:21","statements":[]},"src":"2133:113:21"},{"body":{"nodeType":"YulBlock","src":"2272:31:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2285:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"2290:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2281:3:21"},"nodeType":"YulFunctionCall","src":"2281:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"2299:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2274:6:21"},"nodeType":"YulFunctionCall","src":"2274:27:21"},"nodeType":"YulExpressionStatement","src":"2274:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2261:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"2264:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2258:2:21"},"nodeType":"YulFunctionCall","src":"2258:13:21"},"nodeType":"YulIf","src":"2255:48:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2082:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2087:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"2092:6:21","type":""}],"src":"2051:258:21"},{"body":{"nodeType":"YulBlock","src":"2364:208:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2374:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2394:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2388:5:21"},"nodeType":"YulFunctionCall","src":"2388:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2378:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2416:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"2421:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2409:6:21"},"nodeType":"YulFunctionCall","src":"2409:19:21"},"nodeType":"YulExpressionStatement","src":"2409:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2463:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"2470:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2459:3:21"},"nodeType":"YulFunctionCall","src":"2459:16:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2481:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"2486:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2477:3:21"},"nodeType":"YulFunctionCall","src":"2477:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"2493:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2437:21:21"},"nodeType":"YulFunctionCall","src":"2437:63:21"},"nodeType":"YulExpressionStatement","src":"2437:63:21"},{"nodeType":"YulAssignment","src":"2509:57:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2524:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2537:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2545:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2533:3:21"},"nodeType":"YulFunctionCall","src":"2533:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2554:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2550:3:21"},"nodeType":"YulFunctionCall","src":"2550:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2529:3:21"},"nodeType":"YulFunctionCall","src":"2529:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2520:3:21"},"nodeType":"YulFunctionCall","src":"2520:39:21"},{"kind":"number","nodeType":"YulLiteral","src":"2561:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2516:3:21"},"nodeType":"YulFunctionCall","src":"2516:50:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2509:3:21"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2341:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2348:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2356:3:21","type":""}],"src":"2314:258:21"},{"body":{"nodeType":"YulBlock","src":"2698:99:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2715:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2726:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2708:6:21"},"nodeType":"YulFunctionCall","src":"2708:21:21"},"nodeType":"YulExpressionStatement","src":"2708:21:21"},{"nodeType":"YulAssignment","src":"2738:53:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2764:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2776:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2787:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:21"},"nodeType":"YulFunctionCall","src":"2772:18:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2746:17:21"},"nodeType":"YulFunctionCall","src":"2746:45:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2738:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2667:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2678:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2689:4:21","type":""}],"src":"2577:220:21"},{"body":{"nodeType":"YulBlock","src":"2872:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"2918:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2927:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2930:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2920:6:21"},"nodeType":"YulFunctionCall","src":"2920:12:21"},"nodeType":"YulExpressionStatement","src":"2920:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2893:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2902:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2889:3:21"},"nodeType":"YulFunctionCall","src":"2889:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2914:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2885:3:21"},"nodeType":"YulFunctionCall","src":"2885:32:21"},"nodeType":"YulIf","src":"2882:52:21"},{"nodeType":"YulAssignment","src":"2943:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2966:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2953:12:21"},"nodeType":"YulFunctionCall","src":"2953:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2943:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2838:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2849:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2861:6:21","type":""}],"src":"2802:180:21"},{"body":{"nodeType":"YulBlock","src":"3088:76:21","statements":[{"nodeType":"YulAssignment","src":"3098:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3110:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3121:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3106:3:21"},"nodeType":"YulFunctionCall","src":"3106:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3098:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3140:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"3151:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3133:6:21"},"nodeType":"YulFunctionCall","src":"3133:25:21"},"nodeType":"YulExpressionStatement","src":"3133:25:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3057:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3068:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3079:4:21","type":""}],"src":"2987:177:21"},{"body":{"nodeType":"YulBlock","src":"3201:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3218:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3221:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3211:6:21"},"nodeType":"YulFunctionCall","src":"3211:88:21"},"nodeType":"YulExpressionStatement","src":"3211:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3315:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3318:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3308:6:21"},"nodeType":"YulFunctionCall","src":"3308:15:21"},"nodeType":"YulExpressionStatement","src":"3308:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3339:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3342:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3332:6:21"},"nodeType":"YulFunctionCall","src":"3332:15:21"},"nodeType":"YulExpressionStatement","src":"3332:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3169:184:21"},{"body":{"nodeType":"YulBlock","src":"3405:202:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3415:58:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3437:6:21"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3453:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"3459:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3449:3:21"},"nodeType":"YulFunctionCall","src":"3449:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3468:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3464:3:21"},"nodeType":"YulFunctionCall","src":"3464:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3445:3:21"},"nodeType":"YulFunctionCall","src":"3445:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3433:3:21"},"nodeType":"YulFunctionCall","src":"3433:40:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3419:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3548:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3550:16:21"},"nodeType":"YulFunctionCall","src":"3550:18:21"},"nodeType":"YulExpressionStatement","src":"3550:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3491:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3503:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3488:2:21"},"nodeType":"YulFunctionCall","src":"3488:34:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3527:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3539:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3524:2:21"},"nodeType":"YulFunctionCall","src":"3524:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3485:2:21"},"nodeType":"YulFunctionCall","src":"3485:62:21"},"nodeType":"YulIf","src":"3482:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3586:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3590:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3579:6:21"},"nodeType":"YulFunctionCall","src":"3579:22:21"},"nodeType":"YulExpressionStatement","src":"3579:22:21"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3387:6:21","type":""},{"name":"size","nodeType":"YulTypedName","src":"3395:4:21","type":""}],"src":"3358:249:21"},{"body":{"nodeType":"YulBlock","src":"3681:114:21","statements":[{"body":{"nodeType":"YulBlock","src":"3725:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3727:16:21"},"nodeType":"YulFunctionCall","src":"3727:18:21"},"nodeType":"YulExpressionStatement","src":"3727:18:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3697:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3705:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3694:2:21"},"nodeType":"YulFunctionCall","src":"3694:30:21"},"nodeType":"YulIf","src":"3691:56:21"},{"nodeType":"YulAssignment","src":"3756:33:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3772:1:21","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3775:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3768:3:21"},"nodeType":"YulFunctionCall","src":"3768:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"3784:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3764:3:21"},"nodeType":"YulFunctionCall","src":"3764:25:21"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3756:4:21"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3661:6:21","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3672:4:21","type":""}],"src":"3612:183:21"},{"body":{"nodeType":"YulBlock","src":"3864:660:21","statements":[{"body":{"nodeType":"YulBlock","src":"3913:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3922:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3925:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3915:6:21"},"nodeType":"YulFunctionCall","src":"3915:12:21"},"nodeType":"YulExpressionStatement","src":"3915:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3892:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3900:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3888:3:21"},"nodeType":"YulFunctionCall","src":"3888:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"3907:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3884:3:21"},"nodeType":"YulFunctionCall","src":"3884:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3877:6:21"},"nodeType":"YulFunctionCall","src":"3877:35:21"},"nodeType":"YulIf","src":"3874:55:21"},{"nodeType":"YulVariableDeclaration","src":"3938:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3961:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3948:12:21"},"nodeType":"YulFunctionCall","src":"3948:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3942:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3977:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3987:4:21","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3981:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4000:53:21","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4050:2:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"4010:39:21"},"nodeType":"YulFunctionCall","src":"4010:43:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4004:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4062:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4082:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4076:5:21"},"nodeType":"YulFunctionCall","src":"4076:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4066:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4114:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"4122:2:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4094:19:21"},"nodeType":"YulFunctionCall","src":"4094:31:21"},"nodeType":"YulExpressionStatement","src":"4094:31:21"},{"nodeType":"YulVariableDeclaration","src":"4134:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4145:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4138:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4167:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4175:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4160:6:21"},"nodeType":"YulFunctionCall","src":"4160:18:21"},"nodeType":"YulExpressionStatement","src":"4160:18:21"},{"nodeType":"YulAssignment","src":"4187:22:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4198:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"4206:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4194:3:21"},"nodeType":"YulFunctionCall","src":"4194:15:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4187:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"4218:46:21","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4240:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4252:1:21","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"4255:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4248:3:21"},"nodeType":"YulFunctionCall","src":"4248:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4236:3:21"},"nodeType":"YulFunctionCall","src":"4236:23:21"},{"name":"_2","nodeType":"YulIdentifier","src":"4261:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4232:3:21"},"nodeType":"YulFunctionCall","src":"4232:32:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4222:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4292:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4301:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4304:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4294:6:21"},"nodeType":"YulFunctionCall","src":"4294:12:21"},"nodeType":"YulExpressionStatement","src":"4294:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4279:6:21"},{"name":"end","nodeType":"YulIdentifier","src":"4287:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4276:2:21"},"nodeType":"YulFunctionCall","src":"4276:15:21"},"nodeType":"YulIf","src":"4273:35:21"},{"nodeType":"YulVariableDeclaration","src":"4317:26:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4332:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"4340:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:21"},"nodeType":"YulFunctionCall","src":"4328:15:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4321:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4408:86:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4429:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4447:3:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4434:12:21"},"nodeType":"YulFunctionCall","src":"4434:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4422:6:21"},"nodeType":"YulFunctionCall","src":"4422:30:21"},"nodeType":"YulExpressionStatement","src":"4422:30:21"},{"nodeType":"YulAssignment","src":"4465:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4476:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"4481:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4472:3:21"},"nodeType":"YulFunctionCall","src":"4472:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4465:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4363:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4368:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4360:2:21"},"nodeType":"YulFunctionCall","src":"4360:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4376:23:21","statements":[{"nodeType":"YulAssignment","src":"4378:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4389:3:21"},{"name":"_2","nodeType":"YulIdentifier","src":"4394:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4385:3:21"},"nodeType":"YulFunctionCall","src":"4385:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4378:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"4356:3:21","statements":[]},"src":"4352:142:21"},{"nodeType":"YulAssignment","src":"4503:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4512:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4503:5:21"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3838:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"3846:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3854:5:21","type":""}],"src":"3800:724:21"},{"body":{"nodeType":"YulBlock","src":"4581:503:21","statements":[{"body":{"nodeType":"YulBlock","src":"4630:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4639:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4642:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4632:6:21"},"nodeType":"YulFunctionCall","src":"4632:12:21"},"nodeType":"YulExpressionStatement","src":"4632:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4609:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4617:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4605:3:21"},"nodeType":"YulFunctionCall","src":"4605:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"4624:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4601:3:21"},"nodeType":"YulFunctionCall","src":"4601:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4594:6:21"},"nodeType":"YulFunctionCall","src":"4594:35:21"},"nodeType":"YulIf","src":"4591:55:21"},{"nodeType":"YulVariableDeclaration","src":"4655:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4678:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4665:12:21"},"nodeType":"YulFunctionCall","src":"4665:20:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4659:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4724:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4726:16:21"},"nodeType":"YulFunctionCall","src":"4726:18:21"},"nodeType":"YulExpressionStatement","src":"4726:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4700:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4704:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4697:2:21"},"nodeType":"YulFunctionCall","src":"4697:26:21"},"nodeType":"YulIf","src":"4694:52:21"},{"nodeType":"YulVariableDeclaration","src":"4755:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4775:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4769:5:21"},"nodeType":"YulFunctionCall","src":"4769:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4759:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4807:6:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4827:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4831:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4823:3:21"},"nodeType":"YulFunctionCall","src":"4823:13:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4842:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4838:3:21"},"nodeType":"YulFunctionCall","src":"4838:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4819:3:21"},"nodeType":"YulFunctionCall","src":"4819:27:21"},{"kind":"number","nodeType":"YulLiteral","src":"4848:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4815:3:21"},"nodeType":"YulFunctionCall","src":"4815:38:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4787:19:21"},"nodeType":"YulFunctionCall","src":"4787:67:21"},"nodeType":"YulExpressionStatement","src":"4787:67:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4870:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4878:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4863:6:21"},"nodeType":"YulFunctionCall","src":"4863:18:21"},"nodeType":"YulExpressionStatement","src":"4863:18:21"},{"body":{"nodeType":"YulBlock","src":"4929:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4938:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4941:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4931:6:21"},"nodeType":"YulFunctionCall","src":"4931:12:21"},"nodeType":"YulExpressionStatement","src":"4931:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4904:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4912:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4900:3:21"},"nodeType":"YulFunctionCall","src":"4900:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"4917:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4896:3:21"},"nodeType":"YulFunctionCall","src":"4896:26:21"},{"name":"end","nodeType":"YulIdentifier","src":"4924:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4893:2:21"},"nodeType":"YulFunctionCall","src":"4893:35:21"},"nodeType":"YulIf","src":"4890:55:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4971:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4979:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4967:3:21"},"nodeType":"YulFunctionCall","src":"4967:17:21"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4990:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4998:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4986:3:21"},"nodeType":"YulFunctionCall","src":"4986:17:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5005:2:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4954:12:21"},"nodeType":"YulFunctionCall","src":"4954:54:21"},"nodeType":"YulExpressionStatement","src":"4954:54:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5032:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5040:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5028:3:21"},"nodeType":"YulFunctionCall","src":"5028:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"5045:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5024:3:21"},"nodeType":"YulFunctionCall","src":"5024:26:21"},{"kind":"number","nodeType":"YulLiteral","src":"5052:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5017:6:21"},"nodeType":"YulFunctionCall","src":"5017:37:21"},"nodeType":"YulExpressionStatement","src":"5017:37:21"},{"nodeType":"YulAssignment","src":"5063:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5072:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5063:5:21"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4555:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"4563:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4571:5:21","type":""}],"src":"4529:555:21"},{"body":{"nodeType":"YulBlock","src":"5286:746:21","statements":[{"body":{"nodeType":"YulBlock","src":"5333:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5342:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5345:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5335:6:21"},"nodeType":"YulFunctionCall","src":"5335:12:21"},"nodeType":"YulExpressionStatement","src":"5335:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5307:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5316:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5303:3:21"},"nodeType":"YulFunctionCall","src":"5303:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5328:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5299:3:21"},"nodeType":"YulFunctionCall","src":"5299:33:21"},"nodeType":"YulIf","src":"5296:53:21"},{"nodeType":"YulAssignment","src":"5358:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5387:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5368:18:21"},"nodeType":"YulFunctionCall","src":"5368:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5358:6:21"}]},{"nodeType":"YulAssignment","src":"5406:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5439:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5450:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5435:3:21"},"nodeType":"YulFunctionCall","src":"5435:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5416:18:21"},"nodeType":"YulFunctionCall","src":"5416:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5406:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5463:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5494:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5505:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5490:3:21"},"nodeType":"YulFunctionCall","src":"5490:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5477:12:21"},"nodeType":"YulFunctionCall","src":"5477:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5467:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5518:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"5528:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5522:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5573:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5582:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5585:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5575:6:21"},"nodeType":"YulFunctionCall","src":"5575:12:21"},"nodeType":"YulExpressionStatement","src":"5575:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5561:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5569:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5558:2:21"},"nodeType":"YulFunctionCall","src":"5558:14:21"},"nodeType":"YulIf","src":"5555:34:21"},{"nodeType":"YulAssignment","src":"5598:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5641:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5652:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5637:3:21"},"nodeType":"YulFunctionCall","src":"5637:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5661:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5608:28:21"},"nodeType":"YulFunctionCall","src":"5608:61:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5598:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5678:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5711:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5722:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5707:3:21"},"nodeType":"YulFunctionCall","src":"5707:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5694:12:21"},"nodeType":"YulFunctionCall","src":"5694:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5682:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5755:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5764:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5767:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5757:6:21"},"nodeType":"YulFunctionCall","src":"5757:12:21"},"nodeType":"YulExpressionStatement","src":"5757:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5741:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5751:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5738:2:21"},"nodeType":"YulFunctionCall","src":"5738:16:21"},"nodeType":"YulIf","src":"5735:36:21"},{"nodeType":"YulAssignment","src":"5780:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5823:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5834:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5819:3:21"},"nodeType":"YulFunctionCall","src":"5819:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5845:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5790:28:21"},"nodeType":"YulFunctionCall","src":"5790:63:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5780:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5862:49:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5895:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5906:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5891:3:21"},"nodeType":"YulFunctionCall","src":"5891:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5878:12:21"},"nodeType":"YulFunctionCall","src":"5878:33:21"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5866:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5940:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5949:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5952:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5942:6:21"},"nodeType":"YulFunctionCall","src":"5942:12:21"},"nodeType":"YulExpressionStatement","src":"5942:12:21"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5926:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"5936:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5923:2:21"},"nodeType":"YulFunctionCall","src":"5923:16:21"},"nodeType":"YulIf","src":"5920:36:21"},{"nodeType":"YulAssignment","src":"5965:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5996:9:21"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6007:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5992:3:21"},"nodeType":"YulFunctionCall","src":"5992:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6018:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5975:16:21"},"nodeType":"YulFunctionCall","src":"5975:51:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5965:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5220:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5231:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5243:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5251:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5259:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5267:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5275:6:21","type":""}],"src":"5089:943:21"},{"body":{"nodeType":"YulBlock","src":"6124:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"6170:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6179:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6182:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6172:6:21"},"nodeType":"YulFunctionCall","src":"6172:12:21"},"nodeType":"YulExpressionStatement","src":"6172:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6145:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6154:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6141:3:21"},"nodeType":"YulFunctionCall","src":"6141:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6166:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6137:3:21"},"nodeType":"YulFunctionCall","src":"6137:32:21"},"nodeType":"YulIf","src":"6134:52:21"},{"nodeType":"YulAssignment","src":"6195:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6218:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6205:12:21"},"nodeType":"YulFunctionCall","src":"6205:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6195:6:21"}]},{"nodeType":"YulAssignment","src":"6237:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6270:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6281:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6266:3:21"},"nodeType":"YulFunctionCall","src":"6266:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6247:18:21"},"nodeType":"YulFunctionCall","src":"6247:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6237:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6082:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6093:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6105:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6113:6:21","type":""}],"src":"6037:254:21"},{"body":{"nodeType":"YulBlock","src":"6397:125:21","statements":[{"nodeType":"YulAssignment","src":"6407:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6419:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6430:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6415:3:21"},"nodeType":"YulFunctionCall","src":"6415:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6407:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6449:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6464:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6472:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6460:3:21"},"nodeType":"YulFunctionCall","src":"6460:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6442:6:21"},"nodeType":"YulFunctionCall","src":"6442:74:21"},"nodeType":"YulExpressionStatement","src":"6442:74:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6366:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6377:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6388:4:21","type":""}],"src":"6296:226:21"},{"body":{"nodeType":"YulBlock","src":"6664:1071:21","statements":[{"body":{"nodeType":"YulBlock","src":"6710:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6719:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6722:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6712:6:21"},"nodeType":"YulFunctionCall","src":"6712:12:21"},"nodeType":"YulExpressionStatement","src":"6712:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6685:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"6694:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6681:3:21"},"nodeType":"YulFunctionCall","src":"6681:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6706:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6677:3:21"},"nodeType":"YulFunctionCall","src":"6677:32:21"},"nodeType":"YulIf","src":"6674:52:21"},{"nodeType":"YulVariableDeclaration","src":"6735:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6762:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6749:12:21"},"nodeType":"YulFunctionCall","src":"6749:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6739:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6781:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6791:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6785:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6836:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6845:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6848:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6838:6:21"},"nodeType":"YulFunctionCall","src":"6838:12:21"},"nodeType":"YulExpressionStatement","src":"6838:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6824:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"6832:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6821:2:21"},"nodeType":"YulFunctionCall","src":"6821:14:21"},"nodeType":"YulIf","src":"6818:34:21"},{"nodeType":"YulVariableDeclaration","src":"6861:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6875:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"6886:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6871:3:21"},"nodeType":"YulFunctionCall","src":"6871:22:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6865:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6941:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6950:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6953:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6943:6:21"},"nodeType":"YulFunctionCall","src":"6943:12:21"},"nodeType":"YulExpressionStatement","src":"6943:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6920:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"6924:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6916:3:21"},"nodeType":"YulFunctionCall","src":"6916:13:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6931:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6912:3:21"},"nodeType":"YulFunctionCall","src":"6912:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6905:6:21"},"nodeType":"YulFunctionCall","src":"6905:35:21"},"nodeType":"YulIf","src":"6902:55:21"},{"nodeType":"YulVariableDeclaration","src":"6966:26:21","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6989:2:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6976:12:21"},"nodeType":"YulFunctionCall","src":"6976:16:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6970:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7001:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7011:4:21","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7005:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7024:53:21","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7074:2:21"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"7034:39:21"},"nodeType":"YulFunctionCall","src":"7034:43:21"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"7028:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7086:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7106:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7100:5:21"},"nodeType":"YulFunctionCall","src":"7100:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7090:6:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7138:6:21"},{"name":"_5","nodeType":"YulIdentifier","src":"7146:2:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7118:19:21"},"nodeType":"YulFunctionCall","src":"7118:31:21"},"nodeType":"YulExpressionStatement","src":"7118:31:21"},{"nodeType":"YulVariableDeclaration","src":"7158:17:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7169:6:21"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7162:3:21","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7191:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"7199:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7184:6:21"},"nodeType":"YulFunctionCall","src":"7184:18:21"},"nodeType":"YulExpressionStatement","src":"7184:18:21"},{"nodeType":"YulAssignment","src":"7211:22:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7222:6:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7230:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7218:3:21"},"nodeType":"YulFunctionCall","src":"7218:15:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7211:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"7242:42:21","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7264:2:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7272:1:21","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"7275:2:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7268:3:21"},"nodeType":"YulFunctionCall","src":"7268:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7260:3:21"},"nodeType":"YulFunctionCall","src":"7260:19:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7281:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7256:3:21"},"nodeType":"YulFunctionCall","src":"7256:28:21"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"7246:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7316:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7328:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7318:6:21"},"nodeType":"YulFunctionCall","src":"7318:12:21"},"nodeType":"YulExpressionStatement","src":"7318:12:21"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"7299:6:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7307:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7296:2:21"},"nodeType":"YulFunctionCall","src":"7296:19:21"},"nodeType":"YulIf","src":"7293:39:21"},{"nodeType":"YulVariableDeclaration","src":"7341:22:21","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7356:2:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7360:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7352:3:21"},"nodeType":"YulFunctionCall","src":"7352:11:21"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"7345:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7428:92:21","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7449:3:21"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7473:3:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7454:18:21"},"nodeType":"YulFunctionCall","src":"7454:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7442:6:21"},"nodeType":"YulFunctionCall","src":"7442:36:21"},"nodeType":"YulExpressionStatement","src":"7442:36:21"},{"nodeType":"YulAssignment","src":"7491:19:21","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7502:3:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7507:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7498:3:21"},"nodeType":"YulFunctionCall","src":"7498:12:21"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7491:3:21"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7383:3:21"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"7388:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7380:2:21"},"nodeType":"YulFunctionCall","src":"7380:15:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7396:23:21","statements":[{"nodeType":"YulAssignment","src":"7398:19:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7409:3:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7414:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7405:3:21"},"nodeType":"YulFunctionCall","src":"7405:12:21"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7398:3:21"}]}]},"pre":{"nodeType":"YulBlock","src":"7376:3:21","statements":[]},"src":"7372:148:21"},{"nodeType":"YulAssignment","src":"7529:16:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7539:6:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7529:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"7554:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7587:9:21"},{"name":"_4","nodeType":"YulIdentifier","src":"7598:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7583:3:21"},"nodeType":"YulFunctionCall","src":"7583:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7570:12:21"},"nodeType":"YulFunctionCall","src":"7570:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7558:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"7631:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7640:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7643:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7633:6:21"},"nodeType":"YulFunctionCall","src":"7633:12:21"},"nodeType":"YulExpressionStatement","src":"7633:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7617:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7627:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7614:2:21"},"nodeType":"YulFunctionCall","src":"7614:16:21"},"nodeType":"YulIf","src":"7611:36:21"},{"nodeType":"YulAssignment","src":"7656:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7699:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7710:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7695:3:21"},"nodeType":"YulFunctionCall","src":"7695:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7721:7:21"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7666:28:21"},"nodeType":"YulFunctionCall","src":"7666:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7656:6:21"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6622:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6633:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6645:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6653:6:21","type":""}],"src":"6527:1208:21"},{"body":{"nodeType":"YulBlock","src":"7801:374:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7811:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7831:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7825:5:21"},"nodeType":"YulFunctionCall","src":"7825:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7815:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7853:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"7858:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7846:6:21"},"nodeType":"YulFunctionCall","src":"7846:19:21"},"nodeType":"YulExpressionStatement","src":"7846:19:21"},{"nodeType":"YulVariableDeclaration","src":"7874:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7884:4:21","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7878:2:21","type":""}]},{"nodeType":"YulAssignment","src":"7897:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7908:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7913:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7904:3:21"},"nodeType":"YulFunctionCall","src":"7904:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7897:3:21"}]},{"nodeType":"YulVariableDeclaration","src":"7925:28:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7943:5:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7950:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7939:3:21"},"nodeType":"YulFunctionCall","src":"7939:14:21"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7929:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7962:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7971:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7966:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"8030:120:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8051:3:21"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8062:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8056:5:21"},"nodeType":"YulFunctionCall","src":"8056:13:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8044:6:21"},"nodeType":"YulFunctionCall","src":"8044:26:21"},"nodeType":"YulExpressionStatement","src":"8044:26:21"},{"nodeType":"YulAssignment","src":"8083:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8094:3:21"},{"name":"_1","nodeType":"YulIdentifier","src":"8099:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8090:3:21"},"nodeType":"YulFunctionCall","src":"8090:12:21"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8083:3:21"}]},{"nodeType":"YulAssignment","src":"8115:25:21","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8129:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"8137:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8125:3:21"},"nodeType":"YulFunctionCall","src":"8125:15:21"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8115:6:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7992:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"7995:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7989:2:21"},"nodeType":"YulFunctionCall","src":"7989:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8003:18:21","statements":[{"nodeType":"YulAssignment","src":"8005:14:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8014:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"8017:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8010:3:21"},"nodeType":"YulFunctionCall","src":"8010:9:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8005:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"7985:3:21","statements":[]},"src":"7981:169:21"},{"nodeType":"YulAssignment","src":"8159:10:21","value":{"name":"pos","nodeType":"YulIdentifier","src":"8166:3:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8159:3:21"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7778:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7785:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7793:3:21","type":""}],"src":"7740:435:21"},{"body":{"nodeType":"YulBlock","src":"8331:110:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8348:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8359:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8341:6:21"},"nodeType":"YulFunctionCall","src":"8341:21:21"},"nodeType":"YulExpressionStatement","src":"8341:21:21"},{"nodeType":"YulAssignment","src":"8371:64:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8408:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8420:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8431:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8416:3:21"},"nodeType":"YulFunctionCall","src":"8416:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"8379:28:21"},"nodeType":"YulFunctionCall","src":"8379:56:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8371:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8300:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8311:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8322:4:21","type":""}],"src":"8180:261:21"},{"body":{"nodeType":"YulBlock","src":"8488:76:21","statements":[{"body":{"nodeType":"YulBlock","src":"8542:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8551:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8554:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8544:6:21"},"nodeType":"YulFunctionCall","src":"8544:12:21"},"nodeType":"YulExpressionStatement","src":"8544:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8511:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8532:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8525:6:21"},"nodeType":"YulFunctionCall","src":"8525:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8518:6:21"},"nodeType":"YulFunctionCall","src":"8518:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8508:2:21"},"nodeType":"YulFunctionCall","src":"8508:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8501:6:21"},"nodeType":"YulFunctionCall","src":"8501:40:21"},"nodeType":"YulIf","src":"8498:60:21"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8477:5:21","type":""}],"src":"8446:118:21"},{"body":{"nodeType":"YulBlock","src":"8653:231:21","statements":[{"body":{"nodeType":"YulBlock","src":"8699:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8708:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8711:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8701:6:21"},"nodeType":"YulFunctionCall","src":"8701:12:21"},"nodeType":"YulExpressionStatement","src":"8701:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8674:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8683:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8670:3:21"},"nodeType":"YulFunctionCall","src":"8670:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8695:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8666:3:21"},"nodeType":"YulFunctionCall","src":"8666:32:21"},"nodeType":"YulIf","src":"8663:52:21"},{"nodeType":"YulAssignment","src":"8724:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8753:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8734:18:21"},"nodeType":"YulFunctionCall","src":"8734:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8724:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8772:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8802:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8813:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8798:3:21"},"nodeType":"YulFunctionCall","src":"8798:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8785:12:21"},"nodeType":"YulFunctionCall","src":"8785:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8776:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8848:5:21"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"8826:21:21"},"nodeType":"YulFunctionCall","src":"8826:28:21"},"nodeType":"YulExpressionStatement","src":"8826:28:21"},{"nodeType":"YulAssignment","src":"8863:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"8873:5:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8863:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8611:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8622:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8634:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8642:6:21","type":""}],"src":"8569:315:21"},{"body":{"nodeType":"YulBlock","src":"9064:647:21","statements":[{"body":{"nodeType":"YulBlock","src":"9111:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9120:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9123:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9113:6:21"},"nodeType":"YulFunctionCall","src":"9113:12:21"},"nodeType":"YulExpressionStatement","src":"9113:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9085:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9094:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9081:3:21"},"nodeType":"YulFunctionCall","src":"9081:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9106:3:21","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9077:3:21"},"nodeType":"YulFunctionCall","src":"9077:33:21"},"nodeType":"YulIf","src":"9074:53:21"},{"nodeType":"YulAssignment","src":"9136:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9165:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9146:18:21"},"nodeType":"YulFunctionCall","src":"9146:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9136:6:21"}]},{"nodeType":"YulAssignment","src":"9184:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9211:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9222:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9207:3:21"},"nodeType":"YulFunctionCall","src":"9207:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9194:12:21"},"nodeType":"YulFunctionCall","src":"9194:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9184:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"9235:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9266:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9277:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9262:3:21"},"nodeType":"YulFunctionCall","src":"9262:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9249:12:21"},"nodeType":"YulFunctionCall","src":"9249:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9239:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9290:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"9300:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9294:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9345:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9354:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9357:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9347:6:21"},"nodeType":"YulFunctionCall","src":"9347:12:21"},"nodeType":"YulExpressionStatement","src":"9347:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9333:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"9341:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9330:2:21"},"nodeType":"YulFunctionCall","src":"9330:14:21"},"nodeType":"YulIf","src":"9327:34:21"},{"nodeType":"YulAssignment","src":"9370:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9401:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"9412:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9397:3:21"},"nodeType":"YulFunctionCall","src":"9397:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9421:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9380:16:21"},"nodeType":"YulFunctionCall","src":"9380:49:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9370:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"9438:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9471:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9482:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9467:3:21"},"nodeType":"YulFunctionCall","src":"9467:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9454:12:21"},"nodeType":"YulFunctionCall","src":"9454:32:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"9442:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"9515:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9524:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9527:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9517:6:21"},"nodeType":"YulFunctionCall","src":"9517:12:21"},"nodeType":"YulExpressionStatement","src":"9517:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9501:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"9511:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9498:2:21"},"nodeType":"YulFunctionCall","src":"9498:16:21"},"nodeType":"YulIf","src":"9495:36:21"},{"nodeType":"YulAssignment","src":"9540:61:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9571:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9582:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9567:3:21"},"nodeType":"YulFunctionCall","src":"9567:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9593:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9550:16:21"},"nodeType":"YulFunctionCall","src":"9550:51:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9540:6:21"}]},{"nodeType":"YulAssignment","src":"9610:43:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9637:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9648:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9633:3:21"},"nodeType":"YulFunctionCall","src":"9633:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9620:12:21"},"nodeType":"YulFunctionCall","src":"9620:33:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9610:6:21"}]},{"nodeType":"YulAssignment","src":"9662:43:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9689:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9700:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9685:3:21"},"nodeType":"YulFunctionCall","src":"9685:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9672:12:21"},"nodeType":"YulFunctionCall","src":"9672:33:21"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9662:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8990:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9001:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9013:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9021:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9029:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9037:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9045:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9053:6:21","type":""}],"src":"8889:822:21"},{"body":{"nodeType":"YulBlock","src":"9815:149:21","statements":[{"nodeType":"YulAssignment","src":"9825:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9837:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9848:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9833:3:21"},"nodeType":"YulFunctionCall","src":"9833:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9825:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9867:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9882:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9890:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9878:3:21"},"nodeType":"YulFunctionCall","src":"9878:79:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9860:6:21"},"nodeType":"YulFunctionCall","src":"9860:98:21"},"nodeType":"YulExpressionStatement","src":"9860:98:21"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9784:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9795:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9806:4:21","type":""}],"src":"9716:248:21"},{"body":{"nodeType":"YulBlock","src":"10056:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"10102:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10111:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10114:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10104:6:21"},"nodeType":"YulFunctionCall","src":"10104:12:21"},"nodeType":"YulExpressionStatement","src":"10104:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10077:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10086:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10073:3:21"},"nodeType":"YulFunctionCall","src":"10073:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10098:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10069:3:21"},"nodeType":"YulFunctionCall","src":"10069:32:21"},"nodeType":"YulIf","src":"10066:52:21"},{"nodeType":"YulAssignment","src":"10127:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10156:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10137:18:21"},"nodeType":"YulFunctionCall","src":"10137:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10127:6:21"}]},{"nodeType":"YulAssignment","src":"10175:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10208:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10219:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10204:3:21"},"nodeType":"YulFunctionCall","src":"10204:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10185:18:21"},"nodeType":"YulFunctionCall","src":"10185:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10175:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10014:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10025:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10037:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10045:6:21","type":""}],"src":"9969:260:21"},{"body":{"nodeType":"YulBlock","src":"10304:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"10350:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10359:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10362:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10352:6:21"},"nodeType":"YulFunctionCall","src":"10352:12:21"},"nodeType":"YulExpressionStatement","src":"10352:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10325:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10334:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10321:3:21"},"nodeType":"YulFunctionCall","src":"10321:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10346:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10317:3:21"},"nodeType":"YulFunctionCall","src":"10317:32:21"},"nodeType":"YulIf","src":"10314:52:21"},{"nodeType":"YulAssignment","src":"10375:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10404:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10385:18:21"},"nodeType":"YulFunctionCall","src":"10385:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10375:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10270:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10281:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10293:6:21","type":""}],"src":"10234:186:21"},{"body":{"nodeType":"YulBlock","src":"10572:459:21","statements":[{"body":{"nodeType":"YulBlock","src":"10619:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10628:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10631:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10621:6:21"},"nodeType":"YulFunctionCall","src":"10621:12:21"},"nodeType":"YulExpressionStatement","src":"10621:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10593:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"10602:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10589:3:21"},"nodeType":"YulFunctionCall","src":"10589:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"10614:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10585:3:21"},"nodeType":"YulFunctionCall","src":"10585:33:21"},"nodeType":"YulIf","src":"10582:53:21"},{"nodeType":"YulAssignment","src":"10644:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10673:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10654:18:21"},"nodeType":"YulFunctionCall","src":"10654:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10644:6:21"}]},{"nodeType":"YulAssignment","src":"10692:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10725:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10736:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10721:3:21"},"nodeType":"YulFunctionCall","src":"10721:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10702:18:21"},"nodeType":"YulFunctionCall","src":"10702:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10692:6:21"}]},{"nodeType":"YulAssignment","src":"10749:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10776:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10787:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10772:3:21"},"nodeType":"YulFunctionCall","src":"10772:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10759:12:21"},"nodeType":"YulFunctionCall","src":"10759:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10749:6:21"}]},{"nodeType":"YulAssignment","src":"10800:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10827:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10838:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10823:3:21"},"nodeType":"YulFunctionCall","src":"10823:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10810:12:21"},"nodeType":"YulFunctionCall","src":"10810:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10800:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"10851:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10882:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10893:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10878:3:21"},"nodeType":"YulFunctionCall","src":"10878:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10865:12:21"},"nodeType":"YulFunctionCall","src":"10865:33:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10855:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10941:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10950:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10953:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10943:6:21"},"nodeType":"YulFunctionCall","src":"10943:12:21"},"nodeType":"YulExpressionStatement","src":"10943:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10913:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10921:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10910:2:21"},"nodeType":"YulFunctionCall","src":"10910:30:21"},"nodeType":"YulIf","src":"10907:50:21"},{"nodeType":"YulAssignment","src":"10966:59:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10997:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"11008:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10993:3:21"},"nodeType":"YulFunctionCall","src":"10993:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11017:7:21"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10976:16:21"},"nodeType":"YulFunctionCall","src":"10976:49:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10966:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10506:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10517:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10529:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10537:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10545:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10553:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10561:6:21","type":""}],"src":"10425:606:21"},{"body":{"nodeType":"YulBlock","src":"11210:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11227:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11238:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11220:6:21"},"nodeType":"YulFunctionCall","src":"11220:21:21"},"nodeType":"YulExpressionStatement","src":"11220:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11261:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11272:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11257:3:21"},"nodeType":"YulFunctionCall","src":"11257:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11277:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11250:6:21"},"nodeType":"YulFunctionCall","src":"11250:30:21"},"nodeType":"YulExpressionStatement","src":"11250:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11300:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11311:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11296:3:21"},"nodeType":"YulFunctionCall","src":"11296:18:21"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"11316:34:21","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11289:6:21"},"nodeType":"YulFunctionCall","src":"11289:62:21"},"nodeType":"YulExpressionStatement","src":"11289:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11371:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11382:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11367:3:21"},"nodeType":"YulFunctionCall","src":"11367:18:21"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11387:12:21","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11360:6:21"},"nodeType":"YulFunctionCall","src":"11360:40:21"},"nodeType":"YulExpressionStatement","src":"11360:40:21"},{"nodeType":"YulAssignment","src":"11409:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11421:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11432:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11417:3:21"},"nodeType":"YulFunctionCall","src":"11417:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11409:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11187:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11201:4:21","type":""}],"src":"11036:406:21"},{"body":{"nodeType":"YulBlock","src":"11621:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11638:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11649:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11631:6:21"},"nodeType":"YulFunctionCall","src":"11631:21:21"},"nodeType":"YulExpressionStatement","src":"11631:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11672:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11683:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11668:3:21"},"nodeType":"YulFunctionCall","src":"11668:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11688:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11661:6:21"},"nodeType":"YulFunctionCall","src":"11661:30:21"},"nodeType":"YulExpressionStatement","src":"11661:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11711:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11722:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11707:3:21"},"nodeType":"YulFunctionCall","src":"11707:18:21"},{"hexValue":"4163636573732044656e6965643a2043616c6c6572206973206e6f7420746865","kind":"string","nodeType":"YulLiteral","src":"11727:34:21","type":"","value":"Access Denied: Caller is not the"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11700:6:21"},"nodeType":"YulFunctionCall","src":"11700:62:21"},"nodeType":"YulExpressionStatement","src":"11700:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11782:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11793:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11778:3:21"},"nodeType":"YulFunctionCall","src":"11778:18:21"},{"hexValue":"2041646d696e","kind":"string","nodeType":"YulLiteral","src":"11798:8:21","type":"","value":" Admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11771:6:21"},"nodeType":"YulFunctionCall","src":"11771:36:21"},"nodeType":"YulExpressionStatement","src":"11771:36:21"},{"nodeType":"YulAssignment","src":"11816:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11828:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11839:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11824:3:21"},"nodeType":"YulFunctionCall","src":"11824:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11816:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e765cf6582a2dd38fa7894df72e944eee1df0925da551b1c939c1fa84bbe840f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11598:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11612:4:21","type":""}],"src":"11447:402:21"},{"body":{"nodeType":"YulBlock","src":"11935:103:21","statements":[{"body":{"nodeType":"YulBlock","src":"11981:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11990:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11993:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11983:6:21"},"nodeType":"YulFunctionCall","src":"11983:12:21"},"nodeType":"YulExpressionStatement","src":"11983:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11956:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"11965:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11952:3:21"},"nodeType":"YulFunctionCall","src":"11952:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"11977:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11948:3:21"},"nodeType":"YulFunctionCall","src":"11948:32:21"},"nodeType":"YulIf","src":"11945:52:21"},{"nodeType":"YulAssignment","src":"12006:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12022:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12016:5:21"},"nodeType":"YulFunctionCall","src":"12016:16:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12006:6:21"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11901:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11912:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11924:6:21","type":""}],"src":"11854:184:21"},{"body":{"nodeType":"YulBlock","src":"12217:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12234:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12245:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12227:6:21"},"nodeType":"YulFunctionCall","src":"12227:21:21"},"nodeType":"YulExpressionStatement","src":"12227:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12268:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12279:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12264:3:21"},"nodeType":"YulFunctionCall","src":"12264:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12284:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12257:6:21"},"nodeType":"YulFunctionCall","src":"12257:30:21"},"nodeType":"YulExpressionStatement","src":"12257:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12307:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12318:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12303:3:21"},"nodeType":"YulFunctionCall","src":"12303:18:21"},{"hexValue":"416d6f756e74206f6620746f6b656e2077697468647261776e20657863656564","kind":"string","nodeType":"YulLiteral","src":"12323:34:21","type":"","value":"Amount of token withdrawn exceed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12296:6:21"},"nodeType":"YulFunctionCall","src":"12296:62:21"},"nodeType":"YulExpressionStatement","src":"12296:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12378:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12389:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12374:3:21"},"nodeType":"YulFunctionCall","src":"12374:18:21"},{"hexValue":"2062616c616e63652e","kind":"string","nodeType":"YulLiteral","src":"12394:11:21","type":"","value":" balance."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12367:6:21"},"nodeType":"YulFunctionCall","src":"12367:39:21"},"nodeType":"YulExpressionStatement","src":"12367:39:21"},{"nodeType":"YulAssignment","src":"12415:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12427:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12438:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12423:3:21"},"nodeType":"YulFunctionCall","src":"12423:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12415:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_17dae8a879ae2b2f13bfae8beec1dde541d158682b83c46e12bf6eb43ecd3e8f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12194:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12208:4:21","type":""}],"src":"12043:405:21"},{"body":{"nodeType":"YulBlock","src":"12638:285:21","statements":[{"nodeType":"YulAssignment","src":"12648:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12660:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12671:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12656:3:21"},"nodeType":"YulFunctionCall","src":"12656:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12648:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12691:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"12702:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12684:6:21"},"nodeType":"YulFunctionCall","src":"12684:25:21"},"nodeType":"YulExpressionStatement","src":"12684:25:21"},{"nodeType":"YulVariableDeclaration","src":"12718:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"12728:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12722:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12790:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12801:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12786:3:21"},"nodeType":"YulFunctionCall","src":"12786:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12810:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"12818:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12806:3:21"},"nodeType":"YulFunctionCall","src":"12806:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12779:6:21"},"nodeType":"YulFunctionCall","src":"12779:43:21"},"nodeType":"YulExpressionStatement","src":"12779:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12842:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12853:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12838:3:21"},"nodeType":"YulFunctionCall","src":"12838:18:21"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12862:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"12870:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12858:3:21"},"nodeType":"YulFunctionCall","src":"12858:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12831:6:21"},"nodeType":"YulFunctionCall","src":"12831:43:21"},"nodeType":"YulExpressionStatement","src":"12831:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12894:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12905:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12890:3:21"},"nodeType":"YulFunctionCall","src":"12890:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"12910:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12883:6:21"},"nodeType":"YulFunctionCall","src":"12883:34:21"},"nodeType":"YulExpressionStatement","src":"12883:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_address_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12583:9:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12594:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12602:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12610:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12618:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12629:4:21","type":""}],"src":"12453:470:21"},{"body":{"nodeType":"YulBlock","src":"13057:168:21","statements":[{"nodeType":"YulAssignment","src":"13067:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13079:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13090:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13075:3:21"},"nodeType":"YulFunctionCall","src":"13075:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13067:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13109:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13124:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"13132:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13120:3:21"},"nodeType":"YulFunctionCall","src":"13120:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13102:6:21"},"nodeType":"YulFunctionCall","src":"13102:74:21"},"nodeType":"YulExpressionStatement","src":"13102:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13196:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13207:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13192:3:21"},"nodeType":"YulFunctionCall","src":"13192:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"13212:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13185:6:21"},"nodeType":"YulFunctionCall","src":"13185:34:21"},"nodeType":"YulExpressionStatement","src":"13185:34:21"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13018:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13029:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13037:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13048:4:21","type":""}],"src":"12928:297:21"},{"body":{"nodeType":"YulBlock","src":"13308:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"13354:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13363:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13366:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13356:6:21"},"nodeType":"YulFunctionCall","src":"13356:12:21"},"nodeType":"YulExpressionStatement","src":"13356:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13329:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"13338:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13325:3:21"},"nodeType":"YulFunctionCall","src":"13325:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"13350:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13321:3:21"},"nodeType":"YulFunctionCall","src":"13321:32:21"},"nodeType":"YulIf","src":"13318:52:21"},{"nodeType":"YulVariableDeclaration","src":"13379:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13398:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13392:5:21"},"nodeType":"YulFunctionCall","src":"13392:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13383:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13439:5:21"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"13417:21:21"},"nodeType":"YulFunctionCall","src":"13417:28:21"},"nodeType":"YulExpressionStatement","src":"13417:28:21"},{"nodeType":"YulAssignment","src":"13454:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"13464:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13454:6:21"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13274:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13285:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13297:6:21","type":""}],"src":"13230:245:21"},{"body":{"nodeType":"YulBlock","src":"13654:173:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13671:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13682:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13664:6:21"},"nodeType":"YulFunctionCall","src":"13664:21:21"},"nodeType":"YulExpressionStatement","src":"13664:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13705:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13716:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13701:3:21"},"nodeType":"YulFunctionCall","src":"13701:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13721:2:21","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13694:6:21"},"nodeType":"YulFunctionCall","src":"13694:30:21"},"nodeType":"YulExpressionStatement","src":"13694:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13744:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13755:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13740:3:21"},"nodeType":"YulFunctionCall","src":"13740:18:21"},{"hexValue":"546f6b656e20494420646f65736e27742065786973742e","kind":"string","nodeType":"YulLiteral","src":"13760:25:21","type":"","value":"Token ID doesn't exist."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13733:6:21"},"nodeType":"YulFunctionCall","src":"13733:53:21"},"nodeType":"YulExpressionStatement","src":"13733:53:21"},{"nodeType":"YulAssignment","src":"13795:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13807:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13818:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13803:3:21"},"nodeType":"YulFunctionCall","src":"13803:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13795:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_85cf8b9f8561e0d6e218c757218c60912bfc149fb4d146030b0e05ffd2e40325__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13631:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13645:4:21","type":""}],"src":"13480:347:21"},{"body":{"nodeType":"YulBlock","src":"14006:241:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14023:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14034:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14016:6:21"},"nodeType":"YulFunctionCall","src":"14016:21:21"},"nodeType":"YulExpressionStatement","src":"14016:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14057:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14068:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14053:3:21"},"nodeType":"YulFunctionCall","src":"14053:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14073:2:21","type":"","value":"51"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14046:6:21"},"nodeType":"YulFunctionCall","src":"14046:30:21"},"nodeType":"YulExpressionStatement","src":"14046:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14096:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14107:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14092:3:21"},"nodeType":"YulFunctionCall","src":"14092:18:21"},{"hexValue":"4e756d626572206f6620746f6b656e7320707572636861736564206578636565","kind":"string","nodeType":"YulLiteral","src":"14112:34:21","type":"","value":"Number of tokens purchased excee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14085:6:21"},"nodeType":"YulFunctionCall","src":"14085:62:21"},"nodeType":"YulExpressionStatement","src":"14085:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14167:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14178:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14163:3:21"},"nodeType":"YulFunctionCall","src":"14163:18:21"},{"hexValue":"6420746f6b656e7320617661696c61626c652e","kind":"string","nodeType":"YulLiteral","src":"14183:21:21","type":"","value":"d tokens available."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14156:6:21"},"nodeType":"YulFunctionCall","src":"14156:49:21"},"nodeType":"YulExpressionStatement","src":"14156:49:21"},{"nodeType":"YulAssignment","src":"14214:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14226:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14237:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14222:3:21"},"nodeType":"YulFunctionCall","src":"14222:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14214:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_525088f24019467d21944c4a5381b76afb629a87758f322f4600e8d76a9df151__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13983:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13997:4:21","type":""}],"src":"13832:415:21"},{"body":{"nodeType":"YulBlock","src":"14307:382:21","statements":[{"nodeType":"YulAssignment","src":"14317:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14331:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"14334:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14327:3:21"},"nodeType":"YulFunctionCall","src":"14327:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14317:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"14348:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14378:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"14384:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14374:3:21"},"nodeType":"YulFunctionCall","src":"14374:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"14352:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"14425:31:21","statements":[{"nodeType":"YulAssignment","src":"14427:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14441:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14449:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14437:3:21"},"nodeType":"YulFunctionCall","src":"14437:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14427:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"14405:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14398:6:21"},"nodeType":"YulFunctionCall","src":"14398:26:21"},"nodeType":"YulIf","src":"14395:61:21"},{"body":{"nodeType":"YulBlock","src":"14515:168:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14536:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14539:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14529:6:21"},"nodeType":"YulFunctionCall","src":"14529:88:21"},"nodeType":"YulExpressionStatement","src":"14529:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14637:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14640:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14630:6:21"},"nodeType":"YulFunctionCall","src":"14630:15:21"},"nodeType":"YulExpressionStatement","src":"14630:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14665:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14668:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14658:6:21"},"nodeType":"YulFunctionCall","src":"14658:15:21"},"nodeType":"YulExpressionStatement","src":"14658:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"14471:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14494:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"14502:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14491:2:21"},"nodeType":"YulFunctionCall","src":"14491:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14468:2:21"},"nodeType":"YulFunctionCall","src":"14468:38:21"},"nodeType":"YulIf","src":"14465:218:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"14287:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14296:6:21","type":""}],"src":"14252:437:21"},{"body":{"nodeType":"YulBlock","src":"14726:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14743:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14746:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14736:6:21"},"nodeType":"YulFunctionCall","src":"14736:88:21"},"nodeType":"YulExpressionStatement","src":"14736:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14840:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14843:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14833:6:21"},"nodeType":"YulFunctionCall","src":"14833:15:21"},"nodeType":"YulExpressionStatement","src":"14833:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14864:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14867:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14857:6:21"},"nodeType":"YulFunctionCall","src":"14857:15:21"},"nodeType":"YulExpressionStatement","src":"14857:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"14694:184:21"},{"body":{"nodeType":"YulBlock","src":"14935:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"14994:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14996:16:21"},"nodeType":"YulFunctionCall","src":"14996:18:21"},"nodeType":"YulExpressionStatement","src":"14996:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14966:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14959:6:21"},"nodeType":"YulFunctionCall","src":"14959:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14952:6:21"},"nodeType":"YulFunctionCall","src":"14952:17:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14974:1:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14985:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14981:3:21"},"nodeType":"YulFunctionCall","src":"14981:6:21"},{"name":"x","nodeType":"YulIdentifier","src":"14989:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14977:3:21"},"nodeType":"YulFunctionCall","src":"14977:14:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14971:2:21"},"nodeType":"YulFunctionCall","src":"14971:21:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14948:3:21"},"nodeType":"YulFunctionCall","src":"14948:45:21"},"nodeType":"YulIf","src":"14945:71:21"},{"nodeType":"YulAssignment","src":"15025:20:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15040:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"15043:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15036:3:21"},"nodeType":"YulFunctionCall","src":"15036:9:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"15025:7:21"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14914:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"14917:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"14923:7:21","type":""}],"src":"14883:168:21"},{"body":{"nodeType":"YulBlock","src":"15230:166:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15247:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15258:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15240:6:21"},"nodeType":"YulFunctionCall","src":"15240:21:21"},"nodeType":"YulExpressionStatement","src":"15240:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15281:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15292:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15277:3:21"},"nodeType":"YulFunctionCall","src":"15277:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15297:2:21","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15270:6:21"},"nodeType":"YulFunctionCall","src":"15270:30:21"},"nodeType":"YulExpressionStatement","src":"15270:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15320:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15331:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15316:3:21"},"nodeType":"YulFunctionCall","src":"15316:18:21"},{"hexValue":"496e73756666696369656e7420455448","kind":"string","nodeType":"YulLiteral","src":"15336:18:21","type":"","value":"Insufficient ETH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15309:6:21"},"nodeType":"YulFunctionCall","src":"15309:46:21"},"nodeType":"YulExpressionStatement","src":"15309:46:21"},{"nodeType":"YulAssignment","src":"15364:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15376:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15387:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15372:3:21"},"nodeType":"YulFunctionCall","src":"15372:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15364:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15207:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15221:4:21","type":""}],"src":"15056:340:21"},{"body":{"nodeType":"YulBlock","src":"15575:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15592:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15603:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15585:6:21"},"nodeType":"YulFunctionCall","src":"15585:21:21"},"nodeType":"YulExpressionStatement","src":"15585:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15626:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15637:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15622:3:21"},"nodeType":"YulFunctionCall","src":"15622:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15642:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15615:6:21"},"nodeType":"YulFunctionCall","src":"15615:30:21"},"nodeType":"YulExpressionStatement","src":"15615:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15665:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15676:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15661:3:21"},"nodeType":"YulFunctionCall","src":"15661:18:21"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"15681:34:21","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15654:6:21"},"nodeType":"YulFunctionCall","src":"15654:62:21"},"nodeType":"YulExpressionStatement","src":"15654:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15736:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15747:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15732:3:21"},"nodeType":"YulFunctionCall","src":"15732:18:21"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"15752:16:21","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15725:6:21"},"nodeType":"YulFunctionCall","src":"15725:44:21"},"nodeType":"YulExpressionStatement","src":"15725:44:21"},{"nodeType":"YulAssignment","src":"15778:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15790:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15801:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15786:3:21"},"nodeType":"YulFunctionCall","src":"15786:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15778:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15552:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15566:4:21","type":""}],"src":"15401:410:21"},{"body":{"nodeType":"YulBlock","src":"15990:237:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16007:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16018:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16000:6:21"},"nodeType":"YulFunctionCall","src":"16000:21:21"},"nodeType":"YulExpressionStatement","src":"16000:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16041:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16052:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16037:3:21"},"nodeType":"YulFunctionCall","src":"16037:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16057:2:21","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16030:6:21"},"nodeType":"YulFunctionCall","src":"16030:30:21"},"nodeType":"YulExpressionStatement","src":"16030:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16080:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16091:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16076:3:21"},"nodeType":"YulFunctionCall","src":"16076:18:21"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"16096:34:21","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16069:6:21"},"nodeType":"YulFunctionCall","src":"16069:62:21"},"nodeType":"YulExpressionStatement","src":"16069:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16151:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16162:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16147:3:21"},"nodeType":"YulFunctionCall","src":"16147:18:21"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"16167:17:21","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16140:6:21"},"nodeType":"YulFunctionCall","src":"16140:45:21"},"nodeType":"YulExpressionStatement","src":"16140:45:21"},{"nodeType":"YulAssignment","src":"16194:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16206:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16217:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16202:3:21"},"nodeType":"YulFunctionCall","src":"16202:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16194:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15967:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15981:4:21","type":""}],"src":"15816:411:21"},{"body":{"nodeType":"YulBlock","src":"16406:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16423:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16434:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16416:6:21"},"nodeType":"YulFunctionCall","src":"16416:21:21"},"nodeType":"YulExpressionStatement","src":"16416:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16457:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16468:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16453:3:21"},"nodeType":"YulFunctionCall","src":"16453:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16473:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16446:6:21"},"nodeType":"YulFunctionCall","src":"16446:30:21"},"nodeType":"YulExpressionStatement","src":"16446:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16496:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16507:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16492:3:21"},"nodeType":"YulFunctionCall","src":"16492:18:21"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"16512:34:21","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16485:6:21"},"nodeType":"YulFunctionCall","src":"16485:62:21"},"nodeType":"YulExpressionStatement","src":"16485:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16567:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16578:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16563:3:21"},"nodeType":"YulFunctionCall","src":"16563:18:21"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"16583:11:21","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16556:6:21"},"nodeType":"YulFunctionCall","src":"16556:39:21"},"nodeType":"YulExpressionStatement","src":"16556:39:21"},{"nodeType":"YulAssignment","src":"16604:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16616:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16627:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16612:3:21"},"nodeType":"YulFunctionCall","src":"16612:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16604:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16383:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16397:4:21","type":""}],"src":"16232:405:21"},{"body":{"nodeType":"YulBlock","src":"16674:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16691:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16694:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16684:6:21"},"nodeType":"YulFunctionCall","src":"16684:88:21"},"nodeType":"YulExpressionStatement","src":"16684:88:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16788:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16791:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16781:6:21"},"nodeType":"YulFunctionCall","src":"16781:15:21"},"nodeType":"YulExpressionStatement","src":"16781:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16812:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16815:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16805:6:21"},"nodeType":"YulFunctionCall","src":"16805:15:21"},"nodeType":"YulExpressionStatement","src":"16805:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"16642:184:21"},{"body":{"nodeType":"YulBlock","src":"16878:88:21","statements":[{"body":{"nodeType":"YulBlock","src":"16909:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16911:16:21"},"nodeType":"YulFunctionCall","src":"16911:18:21"},"nodeType":"YulExpressionStatement","src":"16911:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16894:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16905:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16901:3:21"},"nodeType":"YulFunctionCall","src":"16901:6:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16891:2:21"},"nodeType":"YulFunctionCall","src":"16891:17:21"},"nodeType":"YulIf","src":"16888:43:21"},{"nodeType":"YulAssignment","src":"16940:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16951:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"16958:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16947:3:21"},"nodeType":"YulFunctionCall","src":"16947:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"16940:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16860:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"16870:3:21","type":""}],"src":"16831:135:21"},{"body":{"nodeType":"YulBlock","src":"17110:137:21","statements":[{"nodeType":"YulVariableDeclaration","src":"17120:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17140:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17134:5:21"},"nodeType":"YulFunctionCall","src":"17134:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17124:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17182:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17190:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17178:3:21"},"nodeType":"YulFunctionCall","src":"17178:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"17197:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17202:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"17156:21:21"},"nodeType":"YulFunctionCall","src":"17156:53:21"},"nodeType":"YulExpressionStatement","src":"17156:53:21"},{"nodeType":"YulAssignment","src":"17218:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17229:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17234:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17225:3:21"},"nodeType":"YulFunctionCall","src":"17225:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17218:3:21"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17086:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17091:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17102:3:21","type":""}],"src":"16971:276:21"},{"body":{"nodeType":"YulBlock","src":"17426:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17443:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17454:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17436:6:21"},"nodeType":"YulFunctionCall","src":"17436:21:21"},"nodeType":"YulExpressionStatement","src":"17436:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17477:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17488:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17473:3:21"},"nodeType":"YulFunctionCall","src":"17473:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"17493:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17466:6:21"},"nodeType":"YulFunctionCall","src":"17466:30:21"},"nodeType":"YulExpressionStatement","src":"17466:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17516:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17527:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17512:3:21"},"nodeType":"YulFunctionCall","src":"17512:18:21"},{"hexValue":"546869732061737365742068617320616c7265616479206265656e20746f6b65","kind":"string","nodeType":"YulLiteral","src":"17532:34:21","type":"","value":"This asset has already been toke"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17505:6:21"},"nodeType":"YulFunctionCall","src":"17505:62:21"},"nodeType":"YulExpressionStatement","src":"17505:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17587:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17598:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17583:3:21"},"nodeType":"YulFunctionCall","src":"17583:18:21"},{"hexValue":"6e697a65642e","kind":"string","nodeType":"YulLiteral","src":"17603:8:21","type":"","value":"nized."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17576:6:21"},"nodeType":"YulFunctionCall","src":"17576:36:21"},"nodeType":"YulExpressionStatement","src":"17576:36:21"},{"nodeType":"YulAssignment","src":"17621:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17633:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17644:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17629:3:21"},"nodeType":"YulFunctionCall","src":"17629:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17621:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_048d1d55885f31d97d9e91ff9218b71d61cbd9c58fe78fffe2a74206bc0fcd71__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17403:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17417:4:21","type":""}],"src":"17252:402:21"},{"body":{"nodeType":"YulBlock","src":"17833:171:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17850:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17861:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17843:6:21"},"nodeType":"YulFunctionCall","src":"17843:21:21"},"nodeType":"YulExpressionStatement","src":"17843:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17884:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17895:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17880:3:21"},"nodeType":"YulFunctionCall","src":"17880:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"17900:2:21","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17873:6:21"},"nodeType":"YulFunctionCall","src":"17873:30:21"},"nodeType":"YulExpressionStatement","src":"17873:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17923:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17934:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17919:3:21"},"nodeType":"YulFunctionCall","src":"17919:18:21"},{"hexValue":"416d6f756e74732065786365656473206c696d6974","kind":"string","nodeType":"YulLiteral","src":"17939:23:21","type":"","value":"Amounts exceeds limit"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17912:6:21"},"nodeType":"YulFunctionCall","src":"17912:51:21"},"nodeType":"YulExpressionStatement","src":"17912:51:21"},{"nodeType":"YulAssignment","src":"17972:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17984:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17995:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17980:3:21"},"nodeType":"YulFunctionCall","src":"17980:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17972:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245b480e3b3571387aeccc24a0e30729b808c7ff4317e4407c32bec09b406d5e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17810:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17824:4:21","type":""}],"src":"17659:345:21"},{"body":{"nodeType":"YulBlock","src":"18234:302:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18251:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"18262:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18244:6:21"},"nodeType":"YulFunctionCall","src":"18244:25:21"},"nodeType":"YulExpressionStatement","src":"18244:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18289:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18300:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18285:3:21"},"nodeType":"YulFunctionCall","src":"18285:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18305:3:21","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18278:6:21"},"nodeType":"YulFunctionCall","src":"18278:31:21"},"nodeType":"YulExpressionStatement","src":"18278:31:21"},{"nodeType":"YulVariableDeclaration","src":"18318:60:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18350:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18362:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18373:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18358:3:21"},"nodeType":"YulFunctionCall","src":"18358:19:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"18332:17:21"},"nodeType":"YulFunctionCall","src":"18332:46:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"18322:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18398:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18409:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18394:3:21"},"nodeType":"YulFunctionCall","src":"18394:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"18418:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"18426:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18414:3:21"},"nodeType":"YulFunctionCall","src":"18414:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18387:6:21"},"nodeType":"YulFunctionCall","src":"18387:50:21"},"nodeType":"YulExpressionStatement","src":"18387:50:21"},{"nodeType":"YulAssignment","src":"18446:41:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18472:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"18480:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"18454:17:21"},"nodeType":"YulFunctionCall","src":"18454:33:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18446:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18507:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18518:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18503:3:21"},"nodeType":"YulFunctionCall","src":"18503:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"18523:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18496:6:21"},"nodeType":"YulFunctionCall","src":"18496:34:21"},"nodeType":"YulExpressionStatement","src":"18496:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18179:9:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18190:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18198:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18206:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18214:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18225:4:21","type":""}],"src":"18009:527:21"},{"body":{"nodeType":"YulBlock","src":"18715:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18732:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18743:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18725:6:21"},"nodeType":"YulFunctionCall","src":"18725:21:21"},"nodeType":"YulExpressionStatement","src":"18725:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18766:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18777:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18762:3:21"},"nodeType":"YulFunctionCall","src":"18762:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18782:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18755:6:21"},"nodeType":"YulFunctionCall","src":"18755:30:21"},"nodeType":"YulExpressionStatement","src":"18755:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18805:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18816:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18801:3:21"},"nodeType":"YulFunctionCall","src":"18801:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"18821:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18794:6:21"},"nodeType":"YulFunctionCall","src":"18794:62:21"},"nodeType":"YulExpressionStatement","src":"18794:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18876:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18887:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18872:3:21"},"nodeType":"YulFunctionCall","src":"18872:18:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"18892:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18865:6:21"},"nodeType":"YulFunctionCall","src":"18865:44:21"},"nodeType":"YulExpressionStatement","src":"18865:44:21"},{"nodeType":"YulAssignment","src":"18918:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18930:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18941:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18926:3:21"},"nodeType":"YulFunctionCall","src":"18926:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18918:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18692:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18706:4:21","type":""}],"src":"18541:410:21"},{"body":{"nodeType":"YulBlock","src":"19063:87:21","statements":[{"nodeType":"YulAssignment","src":"19073:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19085:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19096:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19081:3:21"},"nodeType":"YulFunctionCall","src":"19081:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19073:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19115:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19130:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"19138:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19126:3:21"},"nodeType":"YulFunctionCall","src":"19126:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19108:6:21"},"nodeType":"YulFunctionCall","src":"19108:36:21"},"nodeType":"YulExpressionStatement","src":"19108:36:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19032:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19043:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19054:4:21","type":""}],"src":"18956:194:21"},{"body":{"nodeType":"YulBlock","src":"19329:166:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19346:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19357:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:21"},"nodeType":"YulFunctionCall","src":"19339:21:21"},"nodeType":"YulExpressionStatement","src":"19339:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19380:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19391:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19376:3:21"},"nodeType":"YulFunctionCall","src":"19376:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19396:2:21","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19369:6:21"},"nodeType":"YulFunctionCall","src":"19369:30:21"},"nodeType":"YulExpressionStatement","src":"19369:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19419:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19430:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19415:3:21"},"nodeType":"YulFunctionCall","src":"19415:18:21"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"19435:18:21","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19408:6:21"},"nodeType":"YulFunctionCall","src":"19408:46:21"},"nodeType":"YulExpressionStatement","src":"19408:46:21"},{"nodeType":"YulAssignment","src":"19463:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19475:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19486:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19471:3:21"},"nodeType":"YulFunctionCall","src":"19471:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19463:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19306:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19320:4:21","type":""}],"src":"19155:340:21"},{"body":{"nodeType":"YulBlock","src":"19674:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19691:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19702:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19684:6:21"},"nodeType":"YulFunctionCall","src":"19684:21:21"},"nodeType":"YulExpressionStatement","src":"19684:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19725:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19736:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19721:3:21"},"nodeType":"YulFunctionCall","src":"19721:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19741:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19714:6:21"},"nodeType":"YulFunctionCall","src":"19714:30:21"},"nodeType":"YulExpressionStatement","src":"19714:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19764:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19775:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19760:3:21"},"nodeType":"YulFunctionCall","src":"19760:18:21"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"19780:34:21","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19753:6:21"},"nodeType":"YulFunctionCall","src":"19753:62:21"},"nodeType":"YulExpressionStatement","src":"19753:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19835:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19846:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19831:3:21"},"nodeType":"YulFunctionCall","src":"19831:18:21"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"19851:10:21","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19824:6:21"},"nodeType":"YulFunctionCall","src":"19824:38:21"},"nodeType":"YulExpressionStatement","src":"19824:38:21"},{"nodeType":"YulAssignment","src":"19871:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19883:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19894:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19879:3:21"},"nodeType":"YulFunctionCall","src":"19879:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19871:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19651:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19665:4:21","type":""}],"src":"19500:404:21"},{"body":{"nodeType":"YulBlock","src":"20083:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20100:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20111:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20093:6:21"},"nodeType":"YulFunctionCall","src":"20093:21:21"},"nodeType":"YulExpressionStatement","src":"20093:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20134:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20145:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20130:3:21"},"nodeType":"YulFunctionCall","src":"20130:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"20150:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20123:6:21"},"nodeType":"YulFunctionCall","src":"20123:30:21"},"nodeType":"YulExpressionStatement","src":"20123:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20173:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20184:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20169:3:21"},"nodeType":"YulFunctionCall","src":"20169:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"20189:34:21","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20162:6:21"},"nodeType":"YulFunctionCall","src":"20162:62:21"},"nodeType":"YulExpressionStatement","src":"20162:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20244:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20255:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20240:3:21"},"nodeType":"YulFunctionCall","src":"20240:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"20260:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20233:6:21"},"nodeType":"YulFunctionCall","src":"20233:35:21"},"nodeType":"YulExpressionStatement","src":"20233:35:21"},{"nodeType":"YulAssignment","src":"20277:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20289:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20300:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20285:3:21"},"nodeType":"YulFunctionCall","src":"20285:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20277:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20060:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20074:4:21","type":""}],"src":"19909:401:21"},{"body":{"nodeType":"YulBlock","src":"20489:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20506:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20517:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20499:6:21"},"nodeType":"YulFunctionCall","src":"20499:21:21"},"nodeType":"YulExpressionStatement","src":"20499:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20540:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20551:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20536:3:21"},"nodeType":"YulFunctionCall","src":"20536:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"20556:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20529:6:21"},"nodeType":"YulFunctionCall","src":"20529:30:21"},"nodeType":"YulExpressionStatement","src":"20529:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20579:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20590:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20575:3:21"},"nodeType":"YulFunctionCall","src":"20575:18:21"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"20595:34:21","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20568:6:21"},"nodeType":"YulFunctionCall","src":"20568:62:21"},"nodeType":"YulExpressionStatement","src":"20568:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20650:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20661:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20646:3:21"},"nodeType":"YulFunctionCall","src":"20646:18:21"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"20666:12:21","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20639:6:21"},"nodeType":"YulFunctionCall","src":"20639:40:21"},"nodeType":"YulExpressionStatement","src":"20639:40:21"},{"nodeType":"YulAssignment","src":"20688:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20700:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"20711:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20696:3:21"},"nodeType":"YulFunctionCall","src":"20696:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20688:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20466:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20480:4:21","type":""}],"src":"20315:406:21"},{"body":{"nodeType":"YulBlock","src":"20774:80:21","statements":[{"body":{"nodeType":"YulBlock","src":"20801:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20803:16:21"},"nodeType":"YulFunctionCall","src":"20803:18:21"},"nodeType":"YulExpressionStatement","src":"20803:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20790:1:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20797:1:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20793:3:21"},"nodeType":"YulFunctionCall","src":"20793:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20787:2:21"},"nodeType":"YulFunctionCall","src":"20787:13:21"},"nodeType":"YulIf","src":"20784:39:21"},{"nodeType":"YulAssignment","src":"20832:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20843:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"20846:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20839:3:21"},"nodeType":"YulFunctionCall","src":"20839:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"20832:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"20757:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"20760:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"20766:3:21","type":""}],"src":"20726:128:21"},{"body":{"nodeType":"YulBlock","src":"21088:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21105:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21116:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21098:6:21"},"nodeType":"YulFunctionCall","src":"21098:21:21"},"nodeType":"YulExpressionStatement","src":"21098:21:21"},{"nodeType":"YulVariableDeclaration","src":"21128:70:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21171:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21183:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21194:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21179:3:21"},"nodeType":"YulFunctionCall","src":"21179:18:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"21142:28:21"},"nodeType":"YulFunctionCall","src":"21142:56:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"21132:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21218:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21229:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21214:3:21"},"nodeType":"YulFunctionCall","src":"21214:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"21238:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"21246:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21234:3:21"},"nodeType":"YulFunctionCall","src":"21234:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21207:6:21"},"nodeType":"YulFunctionCall","src":"21207:50:21"},"nodeType":"YulExpressionStatement","src":"21207:50:21"},{"nodeType":"YulAssignment","src":"21266:52:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21303:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"21311:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"21274:28:21"},"nodeType":"YulFunctionCall","src":"21274:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21266:4:21"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21049:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21060:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21068:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21079:4:21","type":""}],"src":"20859:465:21"},{"body":{"nodeType":"YulBlock","src":"21503:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21520:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21531:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21513:6:21"},"nodeType":"YulFunctionCall","src":"21513:21:21"},"nodeType":"YulExpressionStatement","src":"21513:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21554:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21565:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21550:3:21"},"nodeType":"YulFunctionCall","src":"21550:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"21570:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21543:6:21"},"nodeType":"YulFunctionCall","src":"21543:30:21"},"nodeType":"YulExpressionStatement","src":"21543:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21593:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21604:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21589:3:21"},"nodeType":"YulFunctionCall","src":"21589:18:21"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"21609:34:21","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21582:6:21"},"nodeType":"YulFunctionCall","src":"21582:62:21"},"nodeType":"YulExpressionStatement","src":"21582:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21664:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21675:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21660:3:21"},"nodeType":"YulFunctionCall","src":"21660:18:21"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"21680:11:21","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21653:6:21"},"nodeType":"YulFunctionCall","src":"21653:39:21"},"nodeType":"YulExpressionStatement","src":"21653:39:21"},{"nodeType":"YulAssignment","src":"21701:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21713:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21724:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21709:3:21"},"nodeType":"YulFunctionCall","src":"21709:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21701:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21480:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21494:4:21","type":""}],"src":"21329:405:21"},{"body":{"nodeType":"YulBlock","src":"21913:223:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21930:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21941:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21923:6:21"},"nodeType":"YulFunctionCall","src":"21923:21:21"},"nodeType":"YulExpressionStatement","src":"21923:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21964:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"21975:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21960:3:21"},"nodeType":"YulFunctionCall","src":"21960:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"21980:2:21","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21953:6:21"},"nodeType":"YulFunctionCall","src":"21953:30:21"},"nodeType":"YulExpressionStatement","src":"21953:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22003:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22014:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21999:3:21"},"nodeType":"YulFunctionCall","src":"21999:18:21"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"22019:34:21","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21992:6:21"},"nodeType":"YulFunctionCall","src":"21992:62:21"},"nodeType":"YulExpressionStatement","src":"21992:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22074:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22085:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22070:3:21"},"nodeType":"YulFunctionCall","src":"22070:18:21"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"22090:3:21","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22063:6:21"},"nodeType":"YulFunctionCall","src":"22063:31:21"},"nodeType":"YulExpressionStatement","src":"22063:31:21"},{"nodeType":"YulAssignment","src":"22103:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22115:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22126:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22111:3:21"},"nodeType":"YulFunctionCall","src":"22111:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22103:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21890:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21904:4:21","type":""}],"src":"21739:397:21"},{"body":{"nodeType":"YulBlock","src":"22270:119:21","statements":[{"nodeType":"YulAssignment","src":"22280:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22292:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22303:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22288:3:21"},"nodeType":"YulFunctionCall","src":"22288:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22280:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22322:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"22333:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22315:6:21"},"nodeType":"YulFunctionCall","src":"22315:25:21"},"nodeType":"YulExpressionStatement","src":"22315:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22360:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22371:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22356:3:21"},"nodeType":"YulFunctionCall","src":"22356:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"22376:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22349:6:21"},"nodeType":"YulFunctionCall","src":"22349:34:21"},"nodeType":"YulExpressionStatement","src":"22349:34:21"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22231:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22242:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22250:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22261:4:21","type":""}],"src":"22141:248:21"},{"body":{"nodeType":"YulBlock","src":"22568:233:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22585:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22596:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22578:6:21"},"nodeType":"YulFunctionCall","src":"22578:21:21"},"nodeType":"YulExpressionStatement","src":"22578:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22619:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22630:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22615:3:21"},"nodeType":"YulFunctionCall","src":"22615:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"22635:2:21","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22608:6:21"},"nodeType":"YulFunctionCall","src":"22608:30:21"},"nodeType":"YulExpressionStatement","src":"22608:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22658:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22669:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22654:3:21"},"nodeType":"YulFunctionCall","src":"22654:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"22674:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22647:6:21"},"nodeType":"YulFunctionCall","src":"22647:62:21"},"nodeType":"YulExpressionStatement","src":"22647:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22729:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22740:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22725:3:21"},"nodeType":"YulFunctionCall","src":"22725:18:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"22745:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22718:6:21"},"nodeType":"YulFunctionCall","src":"22718:41:21"},"nodeType":"YulExpressionStatement","src":"22718:41:21"},{"nodeType":"YulAssignment","src":"22768:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22780:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"22791:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22776:3:21"},"nodeType":"YulFunctionCall","src":"22776:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22768:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22545:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22559:4:21","type":""}],"src":"22394:407:21"},{"body":{"nodeType":"YulBlock","src":"23137:519:21","statements":[{"nodeType":"YulVariableDeclaration","src":"23147:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"23157:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23151:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23215:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23230:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"23238:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23226:3:21"},"nodeType":"YulFunctionCall","src":"23226:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23208:6:21"},"nodeType":"YulFunctionCall","src":"23208:34:21"},"nodeType":"YulExpressionStatement","src":"23208:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23262:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23273:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23258:3:21"},"nodeType":"YulFunctionCall","src":"23258:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23282:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"23290:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23278:3:21"},"nodeType":"YulFunctionCall","src":"23278:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23251:6:21"},"nodeType":"YulFunctionCall","src":"23251:43:21"},"nodeType":"YulExpressionStatement","src":"23251:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23314:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23325:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23310:3:21"},"nodeType":"YulFunctionCall","src":"23310:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"23330:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23303:6:21"},"nodeType":"YulFunctionCall","src":"23303:31:21"},"nodeType":"YulExpressionStatement","src":"23303:31:21"},{"nodeType":"YulVariableDeclaration","src":"23343:71:21","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23386:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23398:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23409:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23394:3:21"},"nodeType":"YulFunctionCall","src":"23394:19:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"23357:28:21"},"nodeType":"YulFunctionCall","src":"23357:57:21"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"23347:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23434:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23445:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23430:3:21"},"nodeType":"YulFunctionCall","src":"23430:18:21"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"23454:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"23462:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23450:3:21"},"nodeType":"YulFunctionCall","src":"23450:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23423:6:21"},"nodeType":"YulFunctionCall","src":"23423:50:21"},"nodeType":"YulExpressionStatement","src":"23423:50:21"},{"nodeType":"YulVariableDeclaration","src":"23482:58:21","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23525:6:21"},{"name":"tail_1","nodeType":"YulIdentifier","src":"23533:6:21"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"23496:28:21"},"nodeType":"YulFunctionCall","src":"23496:44:21"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"23486:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23560:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"23571:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23556:3:21"},"nodeType":"YulFunctionCall","src":"23556:19:21"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"23581:6:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"23589:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23577:3:21"},"nodeType":"YulFunctionCall","src":"23577:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23549:6:21"},"nodeType":"YulFunctionCall","src":"23549:51:21"},"nodeType":"YulExpressionStatement","src":"23549:51:21"},{"nodeType":"YulAssignment","src":"23609:41:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"23635:6:21"},{"name":"tail_2","nodeType":"YulIdentifier","src":"23643:6:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"23617:17:21"},"nodeType":"YulFunctionCall","src":"23617:33:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23609:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23074:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"23085:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23093:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23101:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23109:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23117:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23128:4:21","type":""}],"src":"22806:850:21"},{"body":{"nodeType":"YulBlock","src":"23741:169:21","statements":[{"body":{"nodeType":"YulBlock","src":"23787:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23796:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23799:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23789:6:21"},"nodeType":"YulFunctionCall","src":"23789:12:21"},"nodeType":"YulExpressionStatement","src":"23789:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23762:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"23771:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23758:3:21"},"nodeType":"YulFunctionCall","src":"23758:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"23783:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23754:3:21"},"nodeType":"YulFunctionCall","src":"23754:32:21"},"nodeType":"YulIf","src":"23751:52:21"},{"nodeType":"YulVariableDeclaration","src":"23812:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23831:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23825:5:21"},"nodeType":"YulFunctionCall","src":"23825:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"23816:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23874:5:21"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"23850:23:21"},"nodeType":"YulFunctionCall","src":"23850:30:21"},"nodeType":"YulExpressionStatement","src":"23850:30:21"},{"nodeType":"YulAssignment","src":"23889:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"23899:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23889:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23707:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23718:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23730:6:21","type":""}],"src":"23661:249:21"},{"body":{"nodeType":"YulBlock","src":"23958:136:21","statements":[{"body":{"nodeType":"YulBlock","src":"24003:85:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24032:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24035:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24038:1:21","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"24017:14:21"},"nodeType":"YulFunctionCall","src":"24017:23:21"},"nodeType":"YulExpressionStatement","src":"24017:23:21"},{"nodeType":"YulAssignment","src":"24053:25:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24064:3:21","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24075:1:21","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24069:5:21"},"nodeType":"YulFunctionCall","src":"24069:8:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"24060:3:21"},"nodeType":"YulFunctionCall","src":"24060:18:21"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"24053:3:21"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"23974:14:21"},"nodeType":"YulFunctionCall","src":"23974:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"23992:1:21","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23971:2:21"},"nodeType":"YulFunctionCall","src":"23971:23:21"},"nodeType":"YulIf","src":"23968:120:21"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"23950:3:21","type":""}],"src":"23915:179:21"},{"body":{"nodeType":"YulBlock","src":"24146:624:21","statements":[{"body":{"nodeType":"YulBlock","src":"24186:9:21","statements":[{"nodeType":"YulLeave","src":"24188:5:21"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"24162:14:21"},"nodeType":"YulFunctionCall","src":"24162:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"24180:4:21","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24159:2:21"},"nodeType":"YulFunctionCall","src":"24159:26:21"},"nodeType":"YulIf","src":"24156:39:21"},{"nodeType":"YulVariableDeclaration","src":"24204:21:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24222:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24216:5:21"},"nodeType":"YulFunctionCall","src":"24216:9:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"24208:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24234:16:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24248:1:21","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24244:3:21"},"nodeType":"YulFunctionCall","src":"24244:6:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24238:2:21","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24274:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"24280:1:21","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"24287:14:21"},"nodeType":"YulFunctionCall","src":"24287:16:21"},{"name":"_1","nodeType":"YulIdentifier","src":"24305:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24283:3:21"},"nodeType":"YulFunctionCall","src":"24283:25:21"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"24259:14:21"},"nodeType":"YulFunctionCall","src":"24259:50:21"},"nodeType":"YulExpressionStatement","src":"24259:50:21"},{"nodeType":"YulVariableDeclaration","src":"24318:25:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24338:4:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24332:5:21"},"nodeType":"YulFunctionCall","src":"24332:11:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24322:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24352:26:21","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"24362:14:21"},"nodeType":"YulFunctionCall","src":"24362:16:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"24356:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24387:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"24397:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"24391:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"24473:9:21","statements":[{"nodeType":"YulLeave","src":"24475:5:21"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24433:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"24441:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24430:2:21"},"nodeType":"YulFunctionCall","src":"24430:14:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24453:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"24461:4:21","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24449:3:21"},"nodeType":"YulFunctionCall","src":"24449:17:21"},{"name":"_2","nodeType":"YulIdentifier","src":"24468:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24446:2:21"},"nodeType":"YulFunctionCall","src":"24446:25:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24427:2:21"},"nodeType":"YulFunctionCall","src":"24427:45:21"},"nodeType":"YulIf","src":"24424:58:21"},{"nodeType":"YulVariableDeclaration","src":"24491:28:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24506:4:21"},{"name":"offset","nodeType":"YulIdentifier","src":"24512:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24502:3:21"},"nodeType":"YulFunctionCall","src":"24502:17:21"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"24495:3:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24528:24:21","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"24548:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24542:5:21"},"nodeType":"YulFunctionCall","src":"24542:10:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24532:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"24579:9:21","statements":[{"nodeType":"YulLeave","src":"24581:5:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24567:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"24575:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24564:2:21"},"nodeType":"YulFunctionCall","src":"24564:14:21"},"nodeType":"YulIf","src":"24561:27:21"},{"body":{"nodeType":"YulBlock","src":"24670:9:21","statements":[{"nodeType":"YulLeave","src":"24672:5:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"24611:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"24616:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24607:3:21"},"nodeType":"YulFunctionCall","src":"24607:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"24625:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24603:3:21"},"nodeType":"YulFunctionCall","src":"24603:27:21"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24640:4:21"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"24646:14:21"},"nodeType":"YulFunctionCall","src":"24646:16:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24636:3:21"},"nodeType":"YulFunctionCall","src":"24636:27:21"},{"name":"_1","nodeType":"YulIdentifier","src":"24665:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24632:3:21"},"nodeType":"YulFunctionCall","src":"24632:36:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24600:2:21"},"nodeType":"YulFunctionCall","src":"24600:69:21"},"nodeType":"YulIf","src":"24597:82:21"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24708:4:21"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24722:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"24730:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24718:3:21"},"nodeType":"YulFunctionCall","src":"24718:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"24739:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24714:3:21"},"nodeType":"YulFunctionCall","src":"24714:30:21"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"24688:19:21"},"nodeType":"YulFunctionCall","src":"24688:57:21"},"nodeType":"YulExpressionStatement","src":"24688:57:21"},{"nodeType":"YulAssignment","src":"24754:10:21","value":{"name":"msg","nodeType":"YulIdentifier","src":"24761:3:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"24754:3:21"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"24138:3:21","type":""}],"src":"24099:671:21"},{"body":{"nodeType":"YulBlock","src":"24949:242:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24966:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"24977:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24959:6:21"},"nodeType":"YulFunctionCall","src":"24959:21:21"},"nodeType":"YulExpressionStatement","src":"24959:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25000:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25011:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24996:3:21"},"nodeType":"YulFunctionCall","src":"24996:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"25016:2:21","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24989:6:21"},"nodeType":"YulFunctionCall","src":"24989:30:21"},"nodeType":"YulExpressionStatement","src":"24989:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25039:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25050:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25035:3:21"},"nodeType":"YulFunctionCall","src":"25035:18:21"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"25055:34:21","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25028:6:21"},"nodeType":"YulFunctionCall","src":"25028:62:21"},"nodeType":"YulExpressionStatement","src":"25028:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25110:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25121:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25106:3:21"},"nodeType":"YulFunctionCall","src":"25106:18:21"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"25126:22:21","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25099:6:21"},"nodeType":"YulFunctionCall","src":"25099:50:21"},"nodeType":"YulExpressionStatement","src":"25099:50:21"},{"nodeType":"YulAssignment","src":"25158:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25170:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25181:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25166:3:21"},"nodeType":"YulFunctionCall","src":"25166:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25158:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24926:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24940:4:21","type":""}],"src":"24775:416:21"},{"body":{"nodeType":"YulBlock","src":"25370:230:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25387:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25398:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25380:6:21"},"nodeType":"YulFunctionCall","src":"25380:21:21"},"nodeType":"YulExpressionStatement","src":"25380:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25421:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25432:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25417:3:21"},"nodeType":"YulFunctionCall","src":"25417:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"25437:2:21","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25410:6:21"},"nodeType":"YulFunctionCall","src":"25410:30:21"},"nodeType":"YulExpressionStatement","src":"25410:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25460:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25471:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25456:3:21"},"nodeType":"YulFunctionCall","src":"25456:18:21"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"25476:34:21","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25449:6:21"},"nodeType":"YulFunctionCall","src":"25449:62:21"},"nodeType":"YulExpressionStatement","src":"25449:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25531:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25542:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25527:3:21"},"nodeType":"YulFunctionCall","src":"25527:18:21"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"25547:10:21","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25520:6:21"},"nodeType":"YulFunctionCall","src":"25520:38:21"},"nodeType":"YulExpressionStatement","src":"25520:38:21"},{"nodeType":"YulAssignment","src":"25567:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25579:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"25590:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25575:3:21"},"nodeType":"YulFunctionCall","src":"25575:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25567:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25347:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25361:4:21","type":""}],"src":"25196:404:21"},{"body":{"nodeType":"YulBlock","src":"25994:397:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26011:3:21"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"26016:25:21","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26004:6:21"},"nodeType":"YulFunctionCall","src":"26004:38:21"},"nodeType":"YulExpressionStatement","src":"26004:38:21"},{"nodeType":"YulVariableDeclaration","src":"26051:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26071:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26065:5:21"},"nodeType":"YulFunctionCall","src":"26065:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26055:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26113:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"26121:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26109:3:21"},"nodeType":"YulFunctionCall","src":"26109:17:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26132:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"26137:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26128:3:21"},"nodeType":"YulFunctionCall","src":"26128:12:21"},{"name":"length","nodeType":"YulIdentifier","src":"26142:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"26087:21:21"},"nodeType":"YulFunctionCall","src":"26087:62:21"},"nodeType":"YulExpressionStatement","src":"26087:62:21"},{"nodeType":"YulVariableDeclaration","src":"26158:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26172:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"26177:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26168:3:21"},"nodeType":"YulFunctionCall","src":"26168:16:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"26162:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"26204:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"26208:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26200:3:21"},"nodeType":"YulFunctionCall","src":"26200:11:21"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"26213:19:21","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26193:6:21"},"nodeType":"YulFunctionCall","src":"26193:40:21"},"nodeType":"YulExpressionStatement","src":"26193:40:21"},{"nodeType":"YulVariableDeclaration","src":"26242:29:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26264:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26258:5:21"},"nodeType":"YulFunctionCall","src":"26258:13:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"26246:8:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26306:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"26314:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26302:3:21"},"nodeType":"YulFunctionCall","src":"26302:17:21"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"26325:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"26329:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26321:3:21"},"nodeType":"YulFunctionCall","src":"26321:11:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"26334:8:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"26280:21:21"},"nodeType":"YulFunctionCall","src":"26280:63:21"},"nodeType":"YulExpressionStatement","src":"26280:63:21"},{"nodeType":"YulAssignment","src":"26352:33:21","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"26367:2:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"26371:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26363:3:21"},"nodeType":"YulFunctionCall","src":"26363:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"26382:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26359:3:21"},"nodeType":"YulFunctionCall","src":"26359:26:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26352:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25962:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25967:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25975:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25986:3:21","type":""}],"src":"25605:786:21"},{"body":{"nodeType":"YulBlock","src":"26627:353:21","statements":[{"nodeType":"YulVariableDeclaration","src":"26637:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"26647:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"26641:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26705:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26720:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"26728:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26716:3:21"},"nodeType":"YulFunctionCall","src":"26716:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26698:6:21"},"nodeType":"YulFunctionCall","src":"26698:34:21"},"nodeType":"YulExpressionStatement","src":"26698:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26752:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26763:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26748:3:21"},"nodeType":"YulFunctionCall","src":"26748:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26772:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"26780:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26768:3:21"},"nodeType":"YulFunctionCall","src":"26768:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26741:6:21"},"nodeType":"YulFunctionCall","src":"26741:43:21"},"nodeType":"YulExpressionStatement","src":"26741:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26804:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26815:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26800:3:21"},"nodeType":"YulFunctionCall","src":"26800:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"26820:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26793:6:21"},"nodeType":"YulFunctionCall","src":"26793:34:21"},"nodeType":"YulExpressionStatement","src":"26793:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26847:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26858:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26843:3:21"},"nodeType":"YulFunctionCall","src":"26843:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"26863:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26836:6:21"},"nodeType":"YulFunctionCall","src":"26836:34:21"},"nodeType":"YulExpressionStatement","src":"26836:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26890:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26901:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26886:3:21"},"nodeType":"YulFunctionCall","src":"26886:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"26907:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26879:6:21"},"nodeType":"YulFunctionCall","src":"26879:32:21"},"nodeType":"YulExpressionStatement","src":"26879:32:21"},{"nodeType":"YulAssignment","src":"26920:54:21","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"26946:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26958:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"26969:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26954:3:21"},"nodeType":"YulFunctionCall","src":"26954:19:21"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"26928:17:21"},"nodeType":"YulFunctionCall","src":"26928:46:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26920:4:21"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26564:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"26575:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26583:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26591:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26599:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26607:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26618:4:21","type":""}],"src":"26396:584:21"},{"body":{"nodeType":"YulBlock","src":"27032:89:21","statements":[{"body":{"nodeType":"YulBlock","src":"27059:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27061:16:21"},"nodeType":"YulFunctionCall","src":"27061:18:21"},"nodeType":"YulExpressionStatement","src":"27061:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27052:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27045:6:21"},"nodeType":"YulFunctionCall","src":"27045:13:21"},"nodeType":"YulIf","src":"27042:39:21"},{"nodeType":"YulAssignment","src":"27090:25:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27101:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27112:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27108:3:21"},"nodeType":"YulFunctionCall","src":"27108:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27097:3:21"},"nodeType":"YulFunctionCall","src":"27097:18:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27090:3:21"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27014:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"27024:3:21","type":""}],"src":"26985:136:21"},{"body":{"nodeType":"YulBlock","src":"27300:182:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27317:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27328:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27310:6:21"},"nodeType":"YulFunctionCall","src":"27310:21:21"},"nodeType":"YulExpressionStatement","src":"27310:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27351:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27362:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27347:3:21"},"nodeType":"YulFunctionCall","src":"27347:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"27367:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27340:6:21"},"nodeType":"YulFunctionCall","src":"27340:30:21"},"nodeType":"YulExpressionStatement","src":"27340:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27390:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27401:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27386:3:21"},"nodeType":"YulFunctionCall","src":"27386:18:21"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"27406:34:21","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27379:6:21"},"nodeType":"YulFunctionCall","src":"27379:62:21"},"nodeType":"YulExpressionStatement","src":"27379:62:21"},{"nodeType":"YulAssignment","src":"27450:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27462:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"27473:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27458:3:21"},"nodeType":"YulFunctionCall","src":"27458:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27450:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27277:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27291:4:21","type":""}],"src":"27126:356:21"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e765cf6582a2dd38fa7894df72e944eee1df0925da551b1c939c1fa84bbe840f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Access Denied: Caller is not the\")\n        mstore(add(headStart, 96), \" Admin\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_17dae8a879ae2b2f13bfae8beec1dde541d158682b83c46e12bf6eb43ecd3e8f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Amount of token withdrawn exceed\")\n        mstore(add(headStart, 96), \" balance.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_85cf8b9f8561e0d6e218c757218c60912bfc149fb4d146030b0e05ffd2e40325__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Token ID doesn't exist.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_525088f24019467d21944c4a5381b76afb629a87758f322f4600e8d76a9df151__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 51)\n        mstore(add(headStart, 64), \"Number of tokens purchased excee\")\n        mstore(add(headStart, 96), \"d tokens available.\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_0bdfce708c38b38e49561819ad1e311f4e27ccdb7e08770846f15d78c1e72db1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Insufficient ETH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_048d1d55885f31d97d9e91ff9218b71d61cbd9c58fe78fffe2a74206bc0fcd71__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"This asset has already been toke\")\n        mstore(add(headStart, 96), \"nized.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245b480e3b3571387aeccc24a0e30729b808c7ff4317e4407c32bec09b406d5e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Amounts exceeds limit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_string(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC41A360A GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xECB1B769 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xECB1B769 EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xFCEE45F4 EQ PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC41A360A EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x60D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xAD0CDD89 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xB521B133 EQ PUSH2 0x534 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0x92AB723E EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x308FF127 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4AA10A80 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4AA10A80 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x57764094 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x308FF127 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x34B4E625 EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x34CD58DD EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x1E33667 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x57466EA EQ PUSH2 0x26C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F61 JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F8B JUMP JUMPDEST PUSH2 0x78D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FDD JUMP JUMPDEST PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST PUSH2 0x23A PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x2FFA JUMP JUMPDEST PUSH2 0xA29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x308D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x31EC JUMP JUMPDEST PUSH2 0xDBF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0xE61 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0xE8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0x58C8E11DEAB7910E89BF18A1168C6E6EF28748F00FD3094549459F01CEC5E0AA DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD PUSH2 0x391 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1096 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x32C2 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x33C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1351 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x25C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x14CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E9 JUMP JUMPDEST PUSH2 0x1648 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x162 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x54F CALLDATASIZE PUSH1 0x4 PUSH2 0x3420 JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x580 PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x31EC JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x211 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x391 PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x18FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x1A7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x34B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x671 CALLDATASIZE PUSH1 0x4 PUSH2 0x34DA JUMP JUMPDEST PUSH2 0x1AA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x580 PUSH2 0x691 CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x34F5 JUMP JUMPDEST PUSH2 0x1BE6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x6DD CALLDATASIZE PUSH1 0x4 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C6964206F776E657200000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x2C01DC0041DFB6D4238A91E5A638996136AED16F837D5BEB45610732CF9BF4B0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732044656E6965643A2043616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1020B236B4B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x88B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x355A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x927 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74206F6620746F6B656E2077697468647261776E20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2062616C616E63652E0000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD TIMESTAMP DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xF9C80FFFEDE54CC9D8066EC75E2427DC3863957BC3DE78BCEA60550DE76FEE1D SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA10 SWAP2 SWAP1 PUSH2 0x3573 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA23 DUP3 PUSH2 0x1DFE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA31 PUSH2 0x1E3C JUMP JUMPDEST DUP2 PUSH2 0x162 SLOAD LT ISZERO PUSH2 0xA84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20494420646F65736E27742065786973742E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST DUP1 PUSH2 0xA8F ADDRESS DUP5 PUSH2 0x6E2 JUMP JUMPDEST LT ISZERO PUSH2 0xB03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E756D626572206F6620746F6B656E7320707572636861736564206578636565 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E7320617661696C61626C652E00000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 ADD SWAP2 PUSH2 0xB4A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB76 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB98 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xBDC SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC08 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC55 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC2A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC55 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC38 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC85 DUP2 DUP5 PUSH2 0x35E1 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742045544800000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x160 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD25 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x1BE6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xCB DUP1 SLOAD PUSH2 0xD3A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD66 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDB3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD88 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD96 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xDDB JUMPI POP PUSH2 0xDDB DUP6 CALLER PUSH2 0x628 JUMP JUMPDEST PUSH2 0xE4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0xE5A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E91 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xE7C DUP2 PUSH2 0x20FF JUMP JUMPDEST PUSH2 0xE86 DUP4 DUP4 PUSH2 0x210C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x60 SWAP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0xED6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF02 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF4F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF24 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF4F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF32 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xF68 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF94 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFB6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFE1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFC4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0x60 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x1092 DUP3 DUP3 PUSH2 0x21AE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x60 SWAP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x10E1 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x110D SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x115A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x112F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x115A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x113D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1173 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x119F SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x11C1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x11CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP2 DUP3 ADD MSTORE ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x128C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206D69736D617463680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12A8 JUMPI PUSH2 0x12A8 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1349 JUMPI PUSH2 0x131C DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12F5 JUMPI PUSH2 0x12F5 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x130F JUMPI PUSH2 0x130F PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E2 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x132E JUMPI PUSH2 0x132E PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x1342 DUP2 PUSH2 0x3616 JUMP JUMPDEST SWAP1 POP PUSH2 0x12D7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x139A SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13C6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1413 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1413 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x142C SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1458 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14A5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x147A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14A5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1488 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0xA0 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1517 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1543 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1590 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1565 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1590 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1573 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x15A9 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x15D5 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1622 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x15F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1622 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1605 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1092 CALLER DUP4 DUP4 PUSH2 0x2231 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x2C01DC0041DFB6D4238A91E5A638996136AED16F837D5BEB45610732CF9BF4B0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x16E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732044656E6965643A2043616C6C6572206973206E6F7420746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1020B236B4B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x16E8 PUSH2 0x1E3C JUMP JUMPDEST PUSH2 0x15F DUP4 PUSH1 0x40 MLOAD PUSH2 0x16F9 SWAP2 SWAP1 PUSH2 0x3631 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SLOAD PUSH1 0x0 EQ PUSH2 0x177D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546869732061737365742068617320616C7265616479206265656E20746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E697A65642E0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x32 DUP6 GT ISZERO PUSH2 0x17CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E74732065786365656473206C696D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x17D6 PUSH2 0x2326 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x162 SLOAD SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP3 PUSH32 0x5EB64FF447A74FC2FD487956C0CA71B14E086FB45216D0D92B3370C73F623C36 TIMESTAMP DUP10 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH2 0x181F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x364D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x162 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP8 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND OR SWAP1 SSTORE DUP7 MLOAD SWAP1 SWAP2 PUSH2 0x187F SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 DUP10 ADD SWAP1 PUSH2 0x2EAC JUMP JUMPDEST POP DUP5 MLOAD PUSH2 0x1895 SWAP1 PUSH1 0x3 DUP4 ADD SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x2EAC JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP4 SWAP1 SSTORE PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH2 0x15F SWAP1 PUSH2 0x18BA SWAP1 DUP9 SWAP1 PUSH2 0x3631 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB PUSH1 0x20 SWAP1 DUP2 ADD DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH2 0x160 SLOAD SWAP3 DUP3 ADD SWAP1 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x18F4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP5 SWAP1 DUP11 SWAP1 PUSH2 0x233F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1947 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1973 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19C0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1995 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19C0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19A3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x19D9 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A05 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A52 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A27 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A52 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A35 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1A99 DUP2 PUSH2 0x20FF JUMP JUMPDEST PUSH2 0xE86 DUP4 DUP4 PUSH2 0x21AE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1AC3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1ADD JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ADD JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B93 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x38CD PUSH1 0x22 SWAP2 CODECOPY PUSH2 0x2471 JUMP JUMPDEST PUSH2 0x1B9C DUP3 PUSH2 0x24E5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x1C02 JUMPI POP PUSH2 0x1C02 DUP6 CALLER PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1C74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572206F7220617070726F766564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0xE5A DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2627 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x163 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP6 SWAP5 SWAP4 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1CCA SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CF6 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D43 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D18 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1D43 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D26 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1D5C SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D88 SWAP1 PUSH2 0x3590 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DD5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DAA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DD5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DB8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE PUSH1 0x80 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0xA23 JUMPI POP PUSH2 0xA23 DUP3 PUSH2 0x27D6 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1F08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D69736D61746368000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1F6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2099 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1F8D JUMPI PUSH2 0x1F8D PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1FAB JUMPI PUSH2 0x1FAB PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC9 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x203F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x207E SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x2092 SWAP1 PUSH2 0x3616 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F70 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x20E9 SWAP3 SWAP2 SWAP1 PUSH2 0x36A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xA10 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2848 JUMP JUMPDEST PUSH2 0x2109 DUP2 CALLER PUSH2 0x29FD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1092 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x216A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x22B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20666F722073656C660000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2335 PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x161 SLOAD PUSH2 0x162 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x23BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x23C7 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23D4 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x2408 SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2468 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x2ABD JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x24DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x2109 DUP2 PUSH2 0x2BC8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2505 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x251F JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x251F JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x2591 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x25B4 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x160 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x161 SLOAD PUSH2 0x162 SSTORE DUP1 ISZERO PUSH2 0x1092 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH2 0x1BDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x268B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x2697 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26A4 DUP6 PUSH2 0x2A72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x272C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xC9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x276B SWAP1 DUP5 SWAP1 PUSH2 0x368A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x27CB DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x2ABD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x2839 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0xA23 JUMPI POP PUSH2 0xA23 DUP3 PUSH2 0x2C3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x288C SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x28D6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x28D3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x372E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x298C JUMPI PUSH2 0x28E2 PUSH2 0x374B JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 EQ ISZERO PUSH2 0x291C JUMPI POP PUSH2 0x28F7 PUSH2 0x3767 JUMP JUMPDEST DUP1 PUSH2 0x2902 JUMPI POP PUSH2 0x291E JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75C SWAP2 SWAP1 PUSH2 0x308D JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x2468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1092 JUMPI PUSH2 0x2A30 DUP2 PUSH2 0x2CA3 JUMP JUMPDEST PUSH2 0x2A3B DUP4 PUSH1 0x20 PUSH2 0x2CB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A4C SWAP3 SWAP2 SWAP1 PUSH2 0x37F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x75C SWAP2 PUSH1 0x4 ADD PUSH2 0x308D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI PUSH2 0x2AAC PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x2B01 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3872 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2B4B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2B48 SWAP2 DUP2 ADD SWAP1 PUSH2 0x372E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B57 JUMPI PUSH2 0x28E2 PUSH2 0x374B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x2468 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x2109 DUP2 PUSH2 0x2E9D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0xA23 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0xA23 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA23 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2CC4 DUP4 PUSH1 0x2 PUSH2 0x35E1 JUMP JUMPDEST PUSH2 0x2CCF SWAP1 PUSH1 0x2 PUSH2 0x368A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CE7 JUMPI PUSH2 0x2CE7 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D11 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2D48 JUMPI PUSH2 0x2D48 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2D93 JUMPI PUSH2 0x2D93 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2DB7 DUP5 PUSH1 0x2 PUSH2 0x35E1 JUMP JUMPDEST PUSH2 0x2DC2 SWAP1 PUSH1 0x1 PUSH2 0x368A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2E47 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2E03 JUMPI PUSH2 0x2E03 PUSH2 0x3600 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E19 JUMPI PUSH2 0x2E19 PUSH2 0x3600 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2E40 DUP2 PUSH2 0x38B5 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DC5 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x2E96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x75C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1092 SWAP1 PUSH1 0xCB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2EB8 SWAP1 PUSH2 0x3590 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2EDA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2F20 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2EF3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2F20 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2F20 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2F20 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2F05 JUMP JUMPDEST POP PUSH2 0x2F2C SWAP3 SWAP2 POP PUSH2 0x2F30 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2F2C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2F31 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F7D DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FA9 DUP5 PUSH2 0x2F45 JUMP JUMPDEST SWAP3 POP PUSH2 0x2FB7 PUSH1 0x20 DUP6 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2E96 DUP2 PUSH2 0x2FC7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x300D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x302E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3050 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3038 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD25 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3079 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3061 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x30DC JUMPI PUSH2 0x30DC PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x30FD JUMPI PUSH2 0x30FD PUSH2 0x30A0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3125 DUP3 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3132 DUP3 DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x3152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x316D JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3156 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31A3 JUMPI PUSH2 0x31A3 PUSH2 0x30A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31BA PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x31CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x320D DUP7 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 POP PUSH2 0x321B PUSH1 0x20 DUP8 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3244 DUP10 DUP4 DUP11 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x325A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3266 DUP10 DUP4 DUP11 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x327C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3289 DUP9 DUP3 DUP10 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x32B9 PUSH1 0x20 DUP5 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x32ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x330E DUP3 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x331B DUP3 DUP3 PUSH2 0x30B6 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x333B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x3360 JUMPI PUSH2 0x3351 DUP7 PUSH2 0x2F45 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x3340 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x3376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3383 DUP6 DUP3 DUP7 ADD PUSH2 0x3107 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x33BD JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x33A1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2E96 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x338D JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3405 DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3415 DUP2 PUSH2 0x33DB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3442 DUP8 PUSH2 0x2F45 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3472 DUP11 DUP4 DUP12 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3495 DUP10 DUP3 DUP11 ADD PUSH2 0x3178 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34CC DUP4 PUSH2 0x2F45 JUMP JUMPDEST SWAP2 POP PUSH2 0x32B9 PUSH1 0x20 DUP5 ADD PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E96 DUP3 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x350D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3516 DUP7 PUSH2 0x2F45 JUMP JUMPDEST SWAP5 POP PUSH2 0x3524 PUSH1 0x20 DUP8 ADD PUSH2 0x2F45 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x354E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3289 DUP9 DUP3 DUP10 ADD PUSH2 0x3178 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x356C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E96 DUP2 PUSH2 0x33DB JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x35A4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x35C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x35FB JUMPI PUSH2 0x35FB PUSH2 0x35CB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x362A JUMPI PUSH2 0x362A PUSH2 0x35CB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3643 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3035 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3666 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3061 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3678 DUP2 DUP7 PUSH2 0x3061 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x369D JUMPI PUSH2 0x369D PUSH2 0x35CB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x36B5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x338D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x36C7 DUP2 DUP6 PUSH2 0x338D JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36FC PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x338D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x370E DUP2 DUP7 PUSH2 0x338D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x3722 DUP2 DUP6 PUSH2 0x3061 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E96 DUP2 PUSH2 0x2FC7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x3764 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x3775 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x37A5 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x37BD JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x37D7 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x37E6 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x30B6 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x3829 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3035 JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x3866 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3035 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x38AA PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3061 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x38C4 JUMPI PUSH2 0x38C4 PUSH2 0x35CB JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH9 0x747470733A2F2F746F PUSH12 0x656E2D63646E2D646F6D6169 PUSH15 0x2F7B69647D2E6A736F6EA264697066 PUSH20 0x58221220CCB04F01A846D14FFA6A209107F64018 0xB1 0xD0 PUSH18 0x3B807B4E191102905C3B15EABA64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"783:8653:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2598:227:5;;;;;;;;;;-1:-1:-1;2598:227:5;;;;;:::i;:::-;;:::i;:::-;;;620:25:21;;;608:2;593:18;2598:227:5;;;;;;;;7689:518:20;;;;;;;;;;-1:-1:-1;7689:518:20;;;;;:::i;:::-;;:::i;:::-;;4192:217;;;;;;;;;;-1:-1:-1;4192:217:20;;;;;:::i;:::-;;:::i;:::-;;;1586:14:21;;1579:22;1561:41;;1549:2;1534:18;4192:217:20;1421:187:21;8926:507:20;;;;;;:::i;:::-;;:::i;2353:103:5:-;;;;;;;;;;-1:-1:-1;2353:103:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4713:129:0:-;;;;;;;;;;-1:-1:-1;4713:129:0;;;;;:::i;:::-;4787:7;4813:12;;;:6;:12;;;;;:22;;;;4713:129;4477:426:5;;;;;;;;;;-1:-1:-1;4477:426:5;;;;;:::i;:::-;;:::i;5138:145:0:-;;;;;;;;;;-1:-1:-1;5138:145:0;;;;;:::i;:::-;;:::i;5162:170:20:-;;;;;;;;;;-1:-1:-1;5162:170:20;;;;;:::i;:::-;;:::i;1369:58::-;;;;;;;;;;;;1405:22;1369:58;;1616:31;;;;;;;;;;-1:-1:-1;1616:31:20;;;;-1:-1:-1;;;;;1616:31:20;;;;;;-1:-1:-1;;;;;6460:55:21;;;6442:74;;6430:2;6415:18;1616:31:20;6296:226:21;6247:214:0;;;;;;;;;;-1:-1:-1;6247:214:0;;;;;:::i;:::-;;:::i;4982:174:20:-;;;;;;;;;;-1:-1:-1;4982:174:20;;;;;:::i;:::-;;:::i;2982:508:5:-;;;;;;;;;;-1:-1:-1;2982:508:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5489:147:20:-;;;;;;;;;;-1:-1:-1;5489:147:20;;;;;:::i;:::-;;:::i;1858:84:4:-;;;;;;;;;;-1:-1:-1;1928:7:4;;;;1858:84;;1433:60:20;;;;;;;;;;;;1470:23;1433:60;;3208:145:0;;;;;;;;;;-1:-1:-1;3208:145:0;;;;;:::i;:::-;3294:4;3317:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3317:29:0;;;;;;;;;;;;;;;3208:145;4656:163:20;;;;;;;;;;-1:-1:-1;4656:163:20;;;;;:::i;:::-;;:::i;2329:49:0:-;;;;;;;;;;-1:-1:-1;2329:49:0;2374:4;2329:49;;3558:153:5;;;;;;;;;;-1:-1:-1;3558:153:5;;;;;:::i;:::-;;:::i;2098:23:20:-;;;;;;;;;;;;;;;;6368:959;;;;;;;;;;-1:-1:-1;6368:959:20;;;;;:::i;:::-;;:::i;972:247:9:-;;;;;;;;;;-1:-1:-1;972:247:9;;;;;:::i;:::-;-1:-1:-1;;;972:247:9;;;;;;;;;;;-1:-1:-1;;;;;;9878:79:21;;;9860:98;;9848:2;9833:18;972:247:9;9716:248:21;4825:151:20;;;;;;;;;;-1:-1:-1;4825:151:20;;;;;:::i;:::-;;:::i;1499:62::-;;;;;;;;;;;;1537:24;1499:62;;5563:147:0;;;;;;;;;;-1:-1:-1;5563:147:0;;;;;:::i;:::-;;:::i;3778:166:5:-;;;;;;;;;;-1:-1:-1;3778:166:5;;;;;:::i;:::-;-1:-1:-1;;;;;3900:27:5;;;3877:4;3900:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3778:166;3709:182:20;;;;;;;;;;-1:-1:-1;3709:182:20;;;;;:::i;:::-;;:::i;747:219:9:-;;;;;;;;;;-1:-1:-1;747:219:9;;;;;:::i;:::-;-1:-1:-1;;;747:219:9;;;;;;;;4011:394:5;;;;;;;;;;-1:-1:-1;4011:394:5;;;;;:::i;:::-;;:::i;5338:145:20:-;;;;;;;;;;-1:-1:-1;5338:145:20;;;;;:::i;:::-;;:::i;2598:227:5:-;2684:7;-1:-1:-1;;;;;2711:21:5;;2703:76;;;;-1:-1:-1;;;2703:76:5;;11238:2:21;2703:76:5;;;11220:21:21;11277:2;11257:18;;;11250:30;11316:34;11296:18;;;11289:62;11387:12;11367:18;;;11360:40;11417:19;;2703:76:5;;;;;;;;;-1:-1:-1;2796:13:5;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;2796:22:5;;;;;;;;;;;;2598:227::o;7689:518:20:-;1800:10;3294:4:0;3317:29;;;:12;;:29;:12;:29;;;;;1772:82:20;;;;-1:-1:-1;;;1772:82:20;;11649:2:21;1772:82:20;;;11631:21:21;11688:2;11668:18;;;11661:30;11727:34;11707:18;;;11700:62;-1:-1:-1;;;11778:18:21;;;11771:36;11824:19;;1772:82:20;11447:402:21;1772:82:20;7930:38:::1;::::0;;;;7962:4:::1;7930:38;::::0;::::1;6442:74:21::0;7828:9:20;;7798:20:::1;::::0;-1:-1:-1;;;;;7930:23:20;::::1;::::0;::::1;::::0;6415:18:21;;7930:38:20::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7912:56;;7997:7;7986;:18;;7978:72;;;::::0;-1:-1:-1;;;7978:72:20;;12245:2:21;7978:72:20::1;::::0;::::1;12227:21:21::0;12284:2;12264:18;;;12257:30;12323:34;12303:18;;;12296:62;12394:11;12374:18;;;12367:39;12423:19;;7978:72:20::1;12043:405:21::0;7978:72:20::1;8074:64;::::0;;8089:15:::1;12684:25:21::0;;8106:10:20::1;12801:2:21::0;12786:18;;12779:43;-1:-1:-1;;;;;12858:15:21;;12838:18;;;12831:43;12905:2;12890:18;;12883:34;;;8074:64:20;;::::1;::::0;;;;12671:3:21;8074:64:20;;::::1;8157:43;::::0;;;;-1:-1:-1;;;;;13120:55:21;;;8157:43:20::1;::::0;::::1;13102:74:21::0;13192:18;;;13185:34;;;8157:22:20;::::1;::::0;::::1;::::0;13075:18:21;;8157:43:20::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7787:420;;7689:518:::0;;;:::o;4192:217::-;4343:4;4366:36;4390:11;4366:23;:36::i;:::-;4359:43;4192:217;-1:-1:-1;;4192:217:20:o;8926:507::-;1482:19:4;:17;:19::i;:::-;9035:2:20::1;9023:8;;:14;;9015:50;;;::::0;-1:-1:-1;;;9015:50:20;;13682:2:21;9015:50:20::1;::::0;::::1;13664:21:21::0;13721:2;13701:18;;;13694:30;13760:25;13740:18;;;13733:53;13803:18;;9015:50:20::1;13480:347:21::0;9015:50:20::1;9115:8;9083:28;9101:4;9108:2;9083:9;:28::i;:::-;:40;;9075:104;;;::::0;-1:-1:-1;;;9075:104:20;;14034:2:21;9075:104:20::1;::::0;::::1;14016:21:21::0;14073:2;14053:18;;;14046:30;14112:34;14092:18;;;14085:62;14183:21;14163:18;;;14156:49;14222:19;;9075:104:20::1;13832:415:21::0;9075:104:20::1;9190:20;9213:11:::0;;;:7:::1;:11;::::0;;;;;;;9190:34;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;9190:34:20::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;9213:11;;9190:34;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;9190:34:20;;;-1:-1:-1;;9190:34:20::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;;;9258:10:::1;::::0;::::1;::::0;9190:34;;-1:-1:-1;9300:13:20::1;9258:10:::0;9300:8;:13:::1;:::i;:::-;9287:9;:26;;9279:55;;;::::0;-1:-1:-1;;;9279:55:20;;15258:2:21;9279:55:20::1;::::0;::::1;15240:21:21::0;15297:2;15277:18;;;15270:30;15336:18;15316;;;15309:46;15372:18;;9279:55:20::1;15056:340:21::0;9279:55:20::1;9376:16;::::0;9353:73:::1;::::0;;;;::::1;::::0;;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;9376:16:20::1;::::0;9394:10:::1;::::0;9406:2;;9410:8;;9353:22:::1;:73::i;:::-;9005:428;;8926:507:::0;;:::o;2353:103:5:-;2413:13;2445:4;2438:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2353:103;;;:::o;4477:426::-;-1:-1:-1;;;;;4702:20:5;;929:10:12;4702:20:5;;:60;;-1:-1:-1;4726:36:5;4743:4;929:10:12;3778:166:5;:::i;4726:36::-;4681:153;;;;-1:-1:-1;;;4681:153:5;;15603:2:21;4681:153:5;;;15585:21:21;15642:2;15622:18;;;15615:30;15681:34;15661:18;;;15654:62;15752:16;15732:18;;;15725:44;15786:19;;4681:153:5;15401:410:21;4681:153:5;4844:52;4867:4;4873:2;4877:3;4882:7;4891:4;4844:22;:52::i;:::-;4477:426;;;;;:::o;5138:145:0:-;4787:7;4813:12;;;:6;:12;;;;;:22;;;2807:16;2818:4;2807:10;:16::i;:::-;5251:25:::1;5262:4;5268:7;5251:10;:25::i;:::-;5138:145:::0;;;:::o;5162:170:20:-;5250:20;5273:16;;;:7;:16;;;;;;;;5250:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;5250:39:20;;;;;;;;;;;;;5225:13;;5250:20;:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5250:39:20;;;-1:-1:-1;;5250:39:20;;;;;;;;;;;;;;;;;;5306:19;;;;5162:170;-1:-1:-1;;;5162:170:20:o;6247:214:0:-;-1:-1:-1;;;;;6342:23:0;;929:10:12;6342:23:0;6334:83;;;;-1:-1:-1;;;6334:83:0;;16018:2:21;6334:83:0;;;16000:21:21;16057:2;16037:18;;;16030:30;16096:34;16076:18;;;16069:62;16167:17;16147:18;;;16140:45;16202:19;;6334:83:0;15816:411:21;6334:83:0;6428:26;6440:4;6446:7;6428:11;:26::i;:::-;6247:214;;:::o;4982:174:20:-;5072:20;5095:16;;;:7;:16;;;;;;;;5072:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;5072:39:20;;;;;;;;;;;;;5047:13;;5072:20;:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5072:39:20;;;-1:-1:-1;;5072:39:20;;;;;;;;;;;;;;;;;;5128:21;;;4982:174;-1:-1:-1;;;4982:174:20:o;2982:508:5:-;3133:16;3192:3;:10;3173:8;:15;:29;3165:83;;;;-1:-1:-1;;;3165:83:5;;16434:2:21;3165:83:5;;;16416:21:21;16473:2;16453:18;;;16446:30;16512:34;16492:18;;;16485:62;16583:11;16563:18;;;16556:39;16612:19;;3165:83:5;16232:405:21;3165:83:5;3259:30;3306:8;:15;3292:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3292:30:5;;3259:63;;3338:9;3333:120;3357:8;:15;3353:1;:19;3333:120;;;3412:30;3422:8;3431:1;3422:11;;;;;;;;:::i;:::-;;;;;;;3435:3;3439:1;3435:6;;;;;;;;:::i;:::-;;;;;;;3412:9;:30::i;:::-;3393:13;3407:1;3393:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;3374:3;;;:::i;:::-;;;3333:120;;;-1:-1:-1;3470:13:5;2982:508;-1:-1:-1;;;2982:508:5:o;5489:147:20:-;5544:7;5586:16;;;:7;:16;;;;;;;;5563:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;5563:39:20;;;;;;;;;;;;;5544:7;;5563:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5563:39:20;;;-1:-1:-1;;5563:39:20;;;;;;;;;;;;;;;;;;5619:10;;;;5489:147;-1:-1:-1;;;5489:147:20:o;4656:163::-;4720:7;4762:16;;;:7;:16;;;;;;;;4739:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;4739:39:20;;;;;;;;;;;;;4720:7;;4739:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4739:39:20;;;-1:-1:-1;;4739:39:20;;;;;;;;;;;;;;;;;;4795:17;;4656:163;-1:-1:-1;;;4656:163:20:o;3558:153:5:-;3652:52;929:10:12;3685:8:5;3695;3652:18;:52::i;6368:959:20:-;1800:10;3294:4:0;3317:29;;;:12;;:29;:12;:29;;;;;1772:82:20;;;;-1:-1:-1;;;1772:82:20;;11649:2:21;1772:82:20;;;11631:21:21;11688:2;11668:18;;;11661:30;11727:34;11707:18;;;11700:62;-1:-1:-1;;;11778:18:21;;;11771:36;11824:19;;1772:82:20;11447:402:21;1772:82:20;1482:19:4::1;:17;:19::i;:::-;6553:15:20::2;6569:10;6553:27;;;;;;:::i;:::-;;;;;;;;;;;;;;6584:1;6553:32;6545:83;;;::::0;-1:-1:-1;;;6545:83:20;;17454:2:21;6545:83:20::2;::::0;::::2;17436:21:21::0;17493:2;17473:18;;;17466:30;17532:34;17512:18;;;17505:62;17603:8;17583:18;;;17576:36;17629:19;;6545:83:20::2;17252:402:21::0;6545:83:20::2;6658:2;6646:8;:14;;6638:48;;;::::0;-1:-1:-1;;;6638:48:20;;17861:2:21;6638:48:20::2;::::0;::::2;17843:21:21::0;17900:2;17880:18;;;17873:30;17939:23;17919:18;;;17912:51;17980:18;;6638:48:20::2;17659:345:21::0;6638:48:20::2;6697:18;:16;:18::i;:::-;6734;6755:8;;6734:29;;6828:10;-1:-1:-1::0;;;;;6779:88:20::2;6818:8;6806:10;6779:88;6789:15;6840:8;6850:10;6862:4;6779:88;;;;;;;;;:::i;:::-;;;;;;;;6994:8;::::0;6962:21:::2;6986:17:::0;;;:7:::2;:17;::::0;;;;;;;7013:28;;;7051:11:::2;::::0;::::2;:24:::0;;-1:-1:-1;;7051:24:20::2;-1:-1:-1::0;;;;;7051:24:20;::::2;;::::0;;7085:32;;6986:17;;7085:32:::2;::::0;:21:::2;::::0;::::2;::::0;:32;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;7127:32:20;;::::2;::::0;:19:::2;::::0;::::2;::::0;:32:::2;::::0;::::2;::::0;::::2;:::i;:::-;-1:-1:-1::0;7169:9:20::2;::::0;::::2;:15:::0;;;7194:10:::2;::::0;::::2;:17:::0;;;7252:8:::2;::::0;7222:27:::2;::::0;:15:::2;::::0;:27:::2;::::0;7238:10;;7222:27:::2;:::i;:::-;::::0;;;::::2;::::0;;;;;;::::2;::::0;;;;;:38;;;;7277:16:::2;::::0;7271:49;;::::2;::::0;;7277:16:::2;7271:49:::0;;::::2;::::0;-1:-1:-1;;;;;7277:16:20::2;::::0;7295:10;;7307:8;;7271:5:::2;:49::i;:::-;6535:792;;6368:959:::0;;;;;;:::o;4825:151::-;4883:7;4925:16;;;:7;:16;;;;;;;;4902:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;4902:39:20;;;;;;;;;;;;;4883:7;;4902:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4958:5;:11;;;4951:18;;;4825:151;;;:::o;5563:147:0:-;4787:7;4813:12;;;:6;:12;;;;;:22;;;2807:16;2818:4;2807:10;:16::i;:::-;5677:26:::1;5689:4;5695:7;5677:11;:26::i;3709:182:20:-:0;3273:19:3;3296:13;;;;;;3295:14;;3341:34;;;;-1:-1:-1;3359:12:3;;3374:1;3359:12;;;;:16;3341:34;3340:108;;;-1:-1:-1;3420:4:3;1481:19:11;:23;;;3381:66:3;;-1:-1:-1;3430:12:3;;;;;:17;3381:66;3319:201;;;;-1:-1:-1;;;3319:201:3;;18743:2:21;3319:201:3;;;18725:21:21;18782:2;18762:18;;;18755:30;18821:34;18801:18;;;18794:62;18892:16;18872:18;;;18865:44;18926:19;;3319:201:3;18541:410:21;3319:201:3;3530:12;:16;;-1:-1:-1;;3530:16:3;3545:1;3530:16;;;3556:65;;;;3590:13;:20;;-1:-1:-1;;3590:20:3;;;;;3556:65;3785:52:20::1;;;;;;;;;;;;;;;;;;:14;:52::i;:::-;3847:37;3867:16;3847:19;:37::i;:::-;3645:14:3::0;3641:99;;;3691:5;3675:21;;-1:-1:-1;;3675:21:3;;;3715:14;;-1:-1:-1;19108:36:21;;3715:14:3;;19096:2:21;19081:18;3715:14:3;;;;;;;;3263:483;3709:182:20;:::o;4011:394:5:-;-1:-1:-1;;;;;4211:20:5;;929:10:12;4211:20:5;;:60;;-1:-1:-1;4235:36:5;4252:4;929:10:12;3778:166:5;:::i;4235:36::-;4190:153;;;;-1:-1:-1;;;4190:153:5;;15603:2:21;4190:153:5;;;15585:21:21;15642:2;15622:18;;;15615:30;15681:34;15661:18;;;15654:62;15752:16;15732:18;;;15725:44;15786:19;;4190:153:5;15401:410:21;4190:153:5;4353:45;4371:4;4377:2;4381;4385:6;4393:4;4353:17;:45::i;5338:145:20:-;5392:7;5434:16;;;:7;:16;;;;;;;;5411:39;;;;;;;;;;;;;;;-1:-1:-1;;;;;5411:39:20;;;;;;;;;;;;;5392:7;;5411:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5411:39:20;;;-1:-1:-1;;5411:39:20;;;;;;;;;;;;;;;;;;5467:9;;;;5338:145;-1:-1:-1;;;5338:145:20:o;661:254:10:-;785:4;-1:-1:-1;;;;;;808:60:10;;823:45;808:60;;:100;;;872:36;896:11;872:23;:36::i;2010:106:4:-;1928:7;;;;2079:9;2071:38;;;;-1:-1:-1;;;2071:38:4;;19357:2:21;2071:38:4;;;19339:21:21;19396:2;19376:18;;;19369:30;19435:18;19415;;;19408:46;19471:18;;2071:38:4;19155:340:21;2071:38:4;2010:106::o;6646:1115:5:-;6866:7;:14;6852:3;:10;:28;6844:81;;;;-1:-1:-1;;;6844:81:5;;19702:2:21;6844:81:5;;;19684:21:21;19741:2;19721:18;;;19714:30;19780:34;19760:18;;;19753:62;19851:10;19831:18;;;19824:38;19879:19;;6844:81:5;19500:404:21;6844:81:5;-1:-1:-1;;;;;6943:16:5;;6935:66;;;;-1:-1:-1;;;6935:66:5;;20111:2:21;6935:66:5;;;20093:21:21;20150:2;20130:18;;;20123:30;20189:34;20169:18;;;20162:62;-1:-1:-1;;;20240:18:21;;;20233:35;20285:19;;6935:66:5;19909:401:21;6935:66:5;929:10:12;7012:16:5;7125:411;7149:3;:10;7145:1;:14;7125:411;;;7180:10;7193:3;7197:1;7193:6;;;;;;;;:::i;:::-;;;;;;;7180:19;;7213:14;7230:7;7238:1;7230:10;;;;;;;;:::i;:::-;;;;;;;;;;;;7255:19;7277:13;;;:9;:13;;;;;;-1:-1:-1;;;;;7277:19:5;;;;;;;;;;;;7230:10;;-1:-1:-1;7318:21:5;;;;7310:76;;;;-1:-1:-1;;;7310:76:5;;20517:2:21;7310:76:5;;;20499:21:21;20556:2;20536:18;;;20529:30;20595:34;20575:18;;;20568:62;-1:-1:-1;;;20646:18:21;;;20639:40;20696:19;;7310:76:5;20315:406:21;7310:76:5;7428:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;7428:19:5;;;;;;;;;;7450:20;;;7428:42;;7498:17;;;;;;;:27;;7450:20;;7428:13;7498:27;;7450:20;;7498:27;:::i;:::-;;;;;;;;7166:370;;;7161:3;;;;:::i;:::-;;;7125:411;;;;7581:2;-1:-1:-1;;;;;7551:47:5;7575:4;-1:-1:-1;;;;;7551:47:5;7565:8;-1:-1:-1;;;;;7551:47:5;;7585:3;7590:7;7551:47;;;;;;;:::i;:::-;;;;;;;;7679:75;7715:8;7725:4;7731:2;7735:3;7740:7;7749:4;7679:35;:75::i;3647:103:0:-;3713:30;3724:4;929:10:12;3713::0;:30::i;:::-;3647:103;:::o;7796:233::-;3294:4;3317:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3317:29:0;;;;;;;;;;;;7874:149;;7917:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7917:29:0;;;;;;;;;:36;;-1:-1:-1;;7917:36:0;7949:4;7917:36;;;7999:12;929:10:12;;850:96;7999:12:0;-1:-1:-1;;;;;7972:40:0;7990:7;-1:-1:-1;;;;;7972:40:0;7984:4;7972:40;;;;;;;;;;7796:233;;:::o;8200:234::-;3294:4;3317:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3317:29:0;;;;;;;;;;;;8279:149;;;8353:5;8321:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8321:29:0;;;;;;;;;;:37;;-1:-1:-1;;8321:37:0;;;8377:40;929:10:12;;8321:12:0;;8377:40;;8353:5;8377:40;8200:234;;:::o;13323:323:5:-;13473:8;-1:-1:-1;;;;;13464:17:5;:5;-1:-1:-1;;;;;13464:17:5;;;13456:71;;;;-1:-1:-1;;;13456:71:5;;21531:2:21;13456:71:5;;;21513:21:21;21570:2;21550:18;;;21543:30;21609:34;21589:18;;;21582:62;21680:11;21660:18;;;21653:39;21709:19;;13456:71:5;21329:405:21;13456:71:5;-1:-1:-1;;;;;13537:25:5;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13537:46:5;;;;;;;;;;13598:41;;1561::21;;;13598::5;;1534:18:21;13598:41:5;;;;;;;13323:323;;;:::o;4071:115:20:-;4118:21;:9;1043:19:13;;1061:1;1043:19;;;956:123;4118:21:20;4160:9;929:14:13;4149:8:20;:30;4071:115::o;9043:709:5:-;-1:-1:-1;;;;;9190:16:5;;9182:62;;;;-1:-1:-1;;;9182:62:5;;21941:2:21;9182:62:5;;;21923:21:21;21980:2;21960:18;;;21953:30;22019:34;21999:18;;;21992:62;22090:3;22070:18;;;22063:31;22111:19;;9182:62:5;21739:397:21;9182:62:5;929:10:12;9255:16:5;9319:21;9337:2;9319:17;:21::i;:::-;9296:44;;9350:24;9377:25;9395:6;9377:17;:25::i;:::-;9350:52;;9490:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;9490:17:5;;;;;;;;;:27;;9511:6;;9490:13;:27;;9511:6;;9490:27;:::i;:::-;;;;-1:-1:-1;;9532:52:5;;;22315:25:21;;;22371:2;22356:18;;22349:34;;;-1:-1:-1;;;;;9532:52:5;;;;9565:1;;9532:52;;;;;;22288:18:21;9532:52:5;;;;;;;9671:74;9702:8;9720:1;9724:2;9728;9732:6;9740:4;9671:30;:74::i;:::-;9172:580;;;9043:709;;;;:::o;1305:117::-;5368:13:3;;;;;;;5360:69;;;;-1:-1:-1;;;5360:69:3;;22596:2:21;5360:69:3;;;22578:21:21;22635:2;22615:18;;;22608:30;22674:34;22654:18;;;22647:62;-1:-1:-1;;;22725:18:21;;;22718:41;22776:19;;5360:69:3;22394:407:21;5360:69:3;1385:30:5::1;1410:4;1385:24;:30::i;3897:168:20:-:0;3273:19:3;3296:13;;;;;;3295:14;;3341:34;;;;-1:-1:-1;3359:12:3;;3374:1;3359:12;;;;:16;3341:34;3340:108;;;-1:-1:-1;3420:4:3;1481:19:11;:23;;;3381:66:3;;-1:-1:-1;3430:12:3;;;;;:17;3381:66;3319:201;;;;-1:-1:-1;;;3319:201:3;;18743:2:21;3319:201:3;;;18725:21:21;18782:2;18762:18;;;18755:30;18821:34;18801:18;;;18794:62;18892:16;18872:18;;;18865:44;18926:19;;3319:201:3;18541:410:21;3319:201:3;3530:12;:16;;-1:-1:-1;;3530:16:3;3545:1;3530:16;;;3556:65;;;;3590:13;:20;;-1:-1:-1;;3590:20:3;;;;;3556:65;3983:16:20::1;:35:::0;;-1:-1:-1;;3983:35:20::1;-1:-1:-1::0;;;;;3983:35:20;::::1;;::::0;;4039:9:::1;929:14:13::0;4028:8:20::1;:30:::0;3641:99:3;;;;3691:5;3675:21;;-1:-1:-1;;3675:21:3;;;3715:14;;-1:-1:-1;19108:36:21;;3715:14:3;;19096:2:21;19081:18;3715:14:3;18956:194:21;5353:947:5;-1:-1:-1;;;;;5534:16:5;;5526:66;;;;-1:-1:-1;;;5526:66:5;;20111:2:21;5526:66:5;;;20093:21:21;20150:2;20130:18;;;20123:30;20189:34;20169:18;;;20162:62;-1:-1:-1;;;20240:18:21;;;20233:35;20285:19;;5526:66:5;19909:401:21;5526:66:5;929:10:12;5603:16:5;5667:21;5685:2;5667:17;:21::i;:::-;5644:44;;5698:24;5725:25;5743:6;5725:17;:25::i;:::-;5698:52;;5832:19;5854:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5854:19:5;;;;;;;;;;5891:21;;;;5883:76;;;;-1:-1:-1;;;5883:76:5;;20517:2:21;5883:76:5;;;20499:21:21;20556:2;20536:18;;;20529:30;20595:34;20575:18;;;20568:62;-1:-1:-1;;;20646:18:21;;;20639:40;20696:19;;5883:76:5;20315:406:21;5883:76:5;5993:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5993:19:5;;;;;;;;;;6015:20;;;5993:42;;6055:17;;;;;;;:27;;6015:20;;5993:13;6055:27;;6015:20;;6055:27;:::i;:::-;;;;-1:-1:-1;;6098:46:5;;;22315:25:21;;;22371:2;22356:18;;22349:34;;;-1:-1:-1;;;;;6098:46:5;;;;;;;;;;;;;;22288:18:21;6098:46:5;;;;;;;6225:68;6256:8;6266:4;6272:2;6276;6280:6;6288:4;6225:30;:68::i;:::-;5516:784;;;;5353:947;;;;;:::o;1605:349::-;1729:4;-1:-1:-1;;;;;;1764:52:5;;1779:37;1764:52;;:131;;-1:-1:-1;;;;;;;1832:63:5;;1847:48;1832:63;1764:131;:183;;;;1911:36;1935:11;1911:23;:36::i;16701:814::-;-1:-1:-1;;;;;16933:13:5;;1481:19:11;:23;16929:580:5;;16968:90;;-1:-1:-1;;;16968:90:5;;-1:-1:-1;;;;;16968:54:5;;;;;:90;;17023:8;;17033:4;;17039:3;;17044:7;;17053:4;;16968:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16968:90:5;;;;;;;;-1:-1:-1;;16968:90:5;;;;;;;;;;;;:::i;:::-;;;16964:535;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;17375:6;17368:14;;-1:-1:-1;;;17368:14:5;;;;;;;;:::i;16964:535::-;;;17422:62;;-1:-1:-1;;;17422:62:5;;24977:2:21;17422:62:5;;;24959:21:21;25016:2;24996:18;;;24989:30;25055:34;25035:18;;;25028:62;25126:22;25106:18;;;25099:50;25166:19;;17422:62:5;24775:416:21;16964:535:5;-1:-1:-1;;;;;;17137:71:5;;-1:-1:-1;;;17137:71:5;17133:168;;17232:50;;-1:-1:-1;;;17232:50:5;;25398:2:21;17232:50:5;;;25380:21:21;25437:2;25417:18;;;25410:30;25476:34;25456:18;;;25449:62;-1:-1:-1;;;25527:18:21;;;25520:38;25575:19;;17232:50:5;25196:404:21;4031:501:0;3294:4;3317:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3317:29:0;;;;;;;;;;;;4114:412;;4302:39;4333:7;4302:30;:39::i;:::-;4412:49;4451:4;4458:2;4412:30;:49::i;:::-;4209:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4209:274:0;;;;;;;;;;-1:-1:-1;;;4157:358:0;;;;;;;:::i;17521:193:5:-;17640:16;;;17654:1;17640:16;;;;;;;;;17587;;17615:22;;17640:16;;;;;;;;;;;;-1:-1:-1;17640:16:5;17615:41;;17677:7;17666:5;17672:1;17666:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17702:5;17521:193;-1:-1:-1;;17521:193:5:o;15948:747::-;-1:-1:-1;;;;;16155:13:5;;1481:19:11;:23;16151:538:5;;16190:83;;-1:-1:-1;;;16190:83:5;;-1:-1:-1;;;;;16190:49:5;;;;;:83;;16240:8;;16250:4;;16256:2;;16260:6;;16268:4;;16190:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16190:83:5;;;;;;;;-1:-1:-1;;16190:83:5;;;;;;;;;;;;:::i;:::-;;;16186:493;;;;:::i;:::-;-1:-1:-1;;;;;;16322:66:5;;-1:-1:-1;;;16322:66:5;16318:163;;16412:50;;-1:-1:-1;;;16412:50:5;;25398:2:21;16412:50:5;;;25380:21:21;25437:2;25417:18;;;25410:30;25476:34;25456:18;;;25449:62;-1:-1:-1;;;25527:18:21;;;25520:38;25575:19;;16412:50:5;25196:404:21;1428:110:5;5368:13:3;;;;;;;5360:69;;;;-1:-1:-1;;;5360:69:3;;22596:2:21;5360:69:3;;;22578:21:21;22635:2;22615:18;;;22608:30;22674:34;22654:18;;;22647:62;-1:-1:-1;;;22725:18:21;;;22718:41;22776:19;;5360:69:3;22394:407:21;5360:69:3;1518:13:5::1;1526:4;1518:7;:13::i;2908:213:0:-:0;2993:4;-1:-1:-1;;;;;;3016:58:0;;3031:43;3016:58;;:98;;-1:-1:-1;1183:36:15;-1:-1:-1;;;;;;1168:51:15;;;3078:36:0;1060:166:15;2151:149:14;2209:13;2241:52;-1:-1:-1;;;;;2253:22:14;;338:2;1562:437;1637:13;1662:19;1694:10;1698:6;1694:1;:10;:::i;:::-;:14;;1707:1;1694:14;:::i;:::-;1684:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1684:25:14;;1662:47;;1719:15;:6;1726:1;1719:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1719:15:14;;;;;;;;;1744;:6;1751:1;1744:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1744:15:14;;;;;;;;-1:-1:-1;1774:9:14;1786:10;1790:6;1786:1;:10;:::i;:::-;:14;;1799:1;1786:14;:::i;:::-;1774:26;;1769:128;1806:1;1802;:5;1769:128;;;1840:8;1849:5;1857:3;1849:11;1840:21;;;;;;;:::i;:::-;;;;1828:6;1835:1;1828:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1828:33:14;;;;;;;;-1:-1:-1;1885:1:14;1875:11;;;;;1809:3;;;:::i;:::-;;;1769:128;;;-1:-1:-1;1914:10:14;;1906:55;;;;-1:-1:-1;;;1906:55:14;;27328:2:21;1906:55:14;;;27310:21:21;;;27347:18;;;27340:30;27406:34;27386:18;;;27379:62;27458:18;;1906:55:14;27126:356:21;1906:55:14;1985:6;1562:437;-1:-1:-1;;;1562:437:14:o;8584:86:5:-;8650:13;;;;:4;;:13;;;;-1:-1:-1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:196:21;82:20;;-1:-1:-1;;;;;131:54:21;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:254::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:21:o;656:328::-;733:6;741;749;802:2;790:9;781:7;777:23;773:32;770:52;;;818:1;815;808:12;770:52;841:29;860:9;841:29;:::i;:::-;831:39;;889:38;923:2;912:9;908:18;889:38;:::i;:::-;879:48;;974:2;963:9;959:18;946:32;936:42;;656:328;;;;;:::o;989:177::-;-1:-1:-1;;;;;;1067:5:21;1063:78;1056:5;1053:89;1043:117;;1156:1;1153;1146:12;1171:245;1229:6;1282:2;1270:9;1261:7;1257:23;1253:32;1250:52;;;1298:1;1295;1288:12;1250:52;1337:9;1324:23;1356:30;1380:5;1356:30;:::i;1613:248::-;1681:6;1689;1742:2;1730:9;1721:7;1717:23;1713:32;1710:52;;;1758:1;1755;1748:12;1710:52;-1:-1:-1;;1781:23:21;;;1851:2;1836:18;;;1823:32;;-1:-1:-1;1613:248:21:o;1866:180::-;1925:6;1978:2;1966:9;1957:7;1953:23;1949:32;1946:52;;;1994:1;1991;1984:12;1946:52;-1:-1:-1;2017:23:21;;1866:180;-1:-1:-1;1866:180:21:o;2051:258::-;2123:1;2133:113;2147:6;2144:1;2141:13;2133:113;;;2223:11;;;2217:18;2204:11;;;2197:39;2169:2;2162:10;2133:113;;;2264:6;2261:1;2258:13;2255:48;;;-1:-1:-1;;2299:1:21;2281:16;;2274:27;2051:258::o;2314:::-;2356:3;2394:5;2388:12;2421:6;2416:3;2409:19;2437:63;2493:6;2486:4;2481:3;2477:14;2470:4;2463:5;2459:16;2437:63;:::i;:::-;2554:2;2533:15;-1:-1:-1;;2529:29:21;2520:39;;;;2561:4;2516:50;;2314:258;-1:-1:-1;;2314:258:21:o;2577:220::-;2726:2;2715:9;2708:21;2689:4;2746:45;2787:2;2776:9;2772:18;2764:6;2746:45;:::i;3169:184::-;-1:-1:-1;;;3218:1:21;3211:88;3318:4;3315:1;3308:15;3342:4;3339:1;3332:15;3358:249;3468:2;3449:13;;-1:-1:-1;;3445:27:21;3433:40;;3503:18;3488:34;;3524:22;;;3485:62;3482:88;;;3550:18;;:::i;:::-;3586:2;3579:22;-1:-1:-1;;3358:249:21:o;3612:183::-;3672:4;3705:18;3697:6;3694:30;3691:56;;;3727:18;;:::i;:::-;-1:-1:-1;3772:1:21;3768:14;3784:4;3764:25;;3612:183::o;3800:724::-;3854:5;3907:3;3900:4;3892:6;3888:17;3884:27;3874:55;;3925:1;3922;3915:12;3874:55;3961:6;3948:20;3987:4;4010:43;4050:2;4010:43;:::i;:::-;4082:2;4076:9;4094:31;4122:2;4114:6;4094:31;:::i;:::-;4160:18;;;4252:1;4248:10;;;;4236:23;;4232:32;;;4194:15;;;;-1:-1:-1;4276:15:21;;;4273:35;;;4304:1;4301;4294:12;4273:35;4340:2;4332:6;4328:15;4352:142;4368:6;4363:3;4360:15;4352:142;;;4434:17;;4422:30;;4472:12;;;;4385;;4352:142;;;-1:-1:-1;4512:6:21;3800:724;-1:-1:-1;;;;;;3800:724:21:o;4529:555::-;4571:5;4624:3;4617:4;4609:6;4605:17;4601:27;4591:55;;4642:1;4639;4632:12;4591:55;4678:6;4665:20;4704:18;4700:2;4697:26;4694:52;;;4726:18;;:::i;:::-;4775:2;4769:9;4787:67;4842:2;4823:13;;-1:-1:-1;;4819:27:21;4848:4;4815:38;4769:9;4787:67;:::i;:::-;4878:2;4870:6;4863:18;4924:3;4917:4;4912:2;4904:6;4900:15;4896:26;4893:35;4890:55;;;4941:1;4938;4931:12;4890:55;5005:2;4998:4;4990:6;4986:17;4979:4;4971:6;4967:17;4954:54;5052:1;5028:15;;;5045:4;5024:26;5017:37;;;;5032:6;4529:555;-1:-1:-1;;;4529:555:21:o;5089:943::-;5243:6;5251;5259;5267;5275;5328:3;5316:9;5307:7;5303:23;5299:33;5296:53;;;5345:1;5342;5335:12;5296:53;5368:29;5387:9;5368:29;:::i;:::-;5358:39;;5416:38;5450:2;5439:9;5435:18;5416:38;:::i;:::-;5406:48;;5505:2;5494:9;5490:18;5477:32;5528:18;5569:2;5561:6;5558:14;5555:34;;;5585:1;5582;5575:12;5555:34;5608:61;5661:7;5652:6;5641:9;5637:22;5608:61;:::i;:::-;5598:71;;5722:2;5711:9;5707:18;5694:32;5678:48;;5751:2;5741:8;5738:16;5735:36;;;5767:1;5764;5757:12;5735:36;5790:63;5845:7;5834:8;5823:9;5819:24;5790:63;:::i;:::-;5780:73;;5906:3;5895:9;5891:19;5878:33;5862:49;;5936:2;5926:8;5923:16;5920:36;;;5952:1;5949;5942:12;5920:36;;5975:51;6018:7;6007:8;5996:9;5992:24;5975:51;:::i;:::-;5965:61;;;5089:943;;;;;;;;:::o;6037:254::-;6105:6;6113;6166:2;6154:9;6145:7;6141:23;6137:32;6134:52;;;6182:1;6179;6172:12;6134:52;6218:9;6205:23;6195:33;;6247:38;6281:2;6270:9;6266:18;6247:38;:::i;:::-;6237:48;;6037:254;;;;;:::o;6527:1208::-;6645:6;6653;6706:2;6694:9;6685:7;6681:23;6677:32;6674:52;;;6722:1;6719;6712:12;6674:52;6762:9;6749:23;6791:18;6832:2;6824:6;6821:14;6818:34;;;6848:1;6845;6838:12;6818:34;6886:6;6875:9;6871:22;6861:32;;6931:7;6924:4;6920:2;6916:13;6912:27;6902:55;;6953:1;6950;6943:12;6902:55;6989:2;6976:16;7011:4;7034:43;7074:2;7034:43;:::i;:::-;7106:2;7100:9;7118:31;7146:2;7138:6;7118:31;:::i;:::-;7184:18;;;7272:1;7268:10;;;;7260:19;;7256:28;;;7218:15;;;;-1:-1:-1;7296:19:21;;;7293:39;;;7328:1;7325;7318:12;7293:39;7352:11;;;;7372:148;7388:6;7383:3;7380:15;7372:148;;;7454:23;7473:3;7454:23;:::i;:::-;7442:36;;7405:12;;;;7498;;;;7372:148;;;7539:6;-1:-1:-1;;7583:18:21;;7570:32;;-1:-1:-1;;7614:16:21;;;7611:36;;;7643:1;7640;7633:12;7611:36;;7666:63;7721:7;7710:8;7699:9;7695:24;7666:63;:::i;:::-;7656:73;;;6527:1208;;;;;:::o;7740:435::-;7793:3;7831:5;7825:12;7858:6;7853:3;7846:19;7884:4;7913:2;7908:3;7904:12;7897:19;;7950:2;7943:5;7939:14;7971:1;7981:169;7995:6;7992:1;7989:13;7981:169;;;8056:13;;8044:26;;8090:12;;;;8125:15;;;;8017:1;8010:9;7981:169;;;-1:-1:-1;8166:3:21;;7740:435;-1:-1:-1;;;;;7740:435:21:o;8180:261::-;8359:2;8348:9;8341:21;8322:4;8379:56;8431:2;8420:9;8416:18;8408:6;8379:56;:::i;8446:118::-;8532:5;8525:13;8518:21;8511:5;8508:32;8498:60;;8554:1;8551;8544:12;8569:315;8634:6;8642;8695:2;8683:9;8674:7;8670:23;8666:32;8663:52;;;8711:1;8708;8701:12;8663:52;8734:29;8753:9;8734:29;:::i;:::-;8724:39;;8813:2;8802:9;8798:18;8785:32;8826:28;8848:5;8826:28;:::i;:::-;8873:5;8863:15;;;8569:315;;;;;:::o;8889:822::-;9013:6;9021;9029;9037;9045;9053;9106:3;9094:9;9085:7;9081:23;9077:33;9074:53;;;9123:1;9120;9113:12;9074:53;9146:29;9165:9;9146:29;:::i;:::-;9136:39;;9222:2;9211:9;9207:18;9194:32;9184:42;;9277:2;9266:9;9262:18;9249:32;9300:18;9341:2;9333:6;9330:14;9327:34;;;9357:1;9354;9347:12;9327:34;9380:49;9421:7;9412:6;9401:9;9397:22;9380:49;:::i;:::-;9370:59;;9482:2;9471:9;9467:18;9454:32;9438:48;;9511:2;9501:8;9498:16;9495:36;;;9527:1;9524;9517:12;9495:36;;9550:51;9593:7;9582:8;9571:9;9567:24;9550:51;:::i;:::-;9540:61;;;9648:3;9637:9;9633:19;9620:33;9610:43;;9700:3;9689:9;9685:19;9672:33;9662:43;;8889:822;;;;;;;;:::o;9969:260::-;10037:6;10045;10098:2;10086:9;10077:7;10073:23;10069:32;10066:52;;;10114:1;10111;10104:12;10066:52;10137:29;10156:9;10137:29;:::i;:::-;10127:39;;10185:38;10219:2;10208:9;10204:18;10185:38;:::i;10234:186::-;10293:6;10346:2;10334:9;10325:7;10321:23;10317:32;10314:52;;;10362:1;10359;10352:12;10314:52;10385:29;10404:9;10385:29;:::i;10425:606::-;10529:6;10537;10545;10553;10561;10614:3;10602:9;10593:7;10589:23;10585:33;10582:53;;;10631:1;10628;10621:12;10582:53;10654:29;10673:9;10654:29;:::i;:::-;10644:39;;10702:38;10736:2;10725:9;10721:18;10702:38;:::i;:::-;10692:48;;10787:2;10776:9;10772:18;10759:32;10749:42;;10838:2;10827:9;10823:18;10810:32;10800:42;;10893:3;10882:9;10878:19;10865:33;10921:18;10913:6;10910:30;10907:50;;;10953:1;10950;10943:12;10907:50;10976:49;11017:7;11008:6;10997:9;10993:22;10976:49;:::i;11854:184::-;11924:6;11977:2;11965:9;11956:7;11952:23;11948:32;11945:52;;;11993:1;11990;11983:12;11945:52;-1:-1:-1;12016:16:21;;11854:184;-1:-1:-1;11854:184:21:o;13230:245::-;13297:6;13350:2;13338:9;13329:7;13325:23;13321:32;13318:52;;;13366:1;13363;13356:12;13318:52;13398:9;13392:16;13417:28;13439:5;13417:28;:::i;14252:437::-;14331:1;14327:12;;;;14374;;;14395:61;;14449:4;14441:6;14437:17;14427:27;;14395:61;14502:2;14494:6;14491:14;14471:18;14468:38;14465:218;;;-1:-1:-1;;;14536:1:21;14529:88;14640:4;14637:1;14630:15;14668:4;14665:1;14658:15;14465:218;;14252:437;;;:::o;14694:184::-;-1:-1:-1;;;14743:1:21;14736:88;14843:4;14840:1;14833:15;14867:4;14864:1;14857:15;14883:168;14923:7;14989:1;14985;14981:6;14977:14;14974:1;14971:21;14966:1;14959:9;14952:17;14948:45;14945:71;;;14996:18;;:::i;:::-;-1:-1:-1;15036:9:21;;14883:168::o;16642:184::-;-1:-1:-1;;;16691:1:21;16684:88;16791:4;16788:1;16781:15;16815:4;16812:1;16805:15;16831:135;16870:3;-1:-1:-1;;16891:17:21;;16888:43;;;16911:18;;:::i;:::-;-1:-1:-1;16958:1:21;16947:13;;16831:135::o;16971:276::-;17102:3;17140:6;17134:13;17156:53;17202:6;17197:3;17190:4;17182:6;17178:17;17156:53;:::i;:::-;17225:16;;;;;16971:276;-1:-1:-1;;16971:276:21:o;18009:527::-;18262:6;18251:9;18244:25;18305:3;18300:2;18289:9;18285:18;18278:31;18225:4;18332:46;18373:3;18362:9;18358:19;18350:6;18332:46;:::i;:::-;18426:9;18418:6;18414:22;18409:2;18398:9;18394:18;18387:50;18454:33;18480:6;18472;18454:33;:::i;:::-;18446:41;;;18523:6;18518:2;18507:9;18503:18;18496:34;18009:527;;;;;;;:::o;20726:128::-;20766:3;20797:1;20793:6;20790:1;20787:13;20784:39;;;20803:18;;:::i;:::-;-1:-1:-1;20839:9:21;;20726:128::o;20859:465::-;21116:2;21105:9;21098:21;21079:4;21142:56;21194:2;21183:9;21179:18;21171:6;21142:56;:::i;:::-;21246:9;21238:6;21234:22;21229:2;21218:9;21214:18;21207:50;21274:44;21311:6;21303;21274:44;:::i;:::-;21266:52;20859:465;-1:-1:-1;;;;;20859:465:21:o;22806:850::-;23128:4;-1:-1:-1;;;;;23238:2:21;23230:6;23226:15;23215:9;23208:34;23290:2;23282:6;23278:15;23273:2;23262:9;23258:18;23251:43;;23330:3;23325:2;23314:9;23310:18;23303:31;23357:57;23409:3;23398:9;23394:19;23386:6;23357:57;:::i;:::-;23462:9;23454:6;23450:22;23445:2;23434:9;23430:18;23423:50;23496:44;23533:6;23525;23496:44;:::i;:::-;23482:58;;23589:9;23581:6;23577:22;23571:3;23560:9;23556:19;23549:51;23617:33;23643:6;23635;23617:33;:::i;:::-;23609:41;22806:850;-1:-1:-1;;;;;;;;22806:850:21:o;23661:249::-;23730:6;23783:2;23771:9;23762:7;23758:23;23754:32;23751:52;;;23799:1;23796;23789:12;23751:52;23831:9;23825:16;23850:30;23874:5;23850:30;:::i;23915:179::-;23950:3;23992:1;23974:16;23971:23;23968:120;;;24038:1;24035;24032;24017:23;-1:-1:-1;24075:1:21;24069:8;24064:3;24060:18;23968:120;23915:179;:::o;24099:671::-;24138:3;24180:4;24162:16;24159:26;24156:39;;;24099:671;:::o;24156:39::-;24222:2;24216:9;-1:-1:-1;;24287:16:21;24283:25;;24280:1;24216:9;24259:50;24338:4;24332:11;24362:16;24397:18;24468:2;24461:4;24453:6;24449:17;24446:25;24441:2;24433:6;24430:14;24427:45;24424:58;;;24475:5;;;;;24099:671;:::o;24424:58::-;24512:6;24506:4;24502:17;24491:28;;24548:3;24542:10;24575:2;24567:6;24564:14;24561:27;;;24581:5;;;;;;24099:671;:::o;24561:27::-;24665:2;24646:16;24640:4;24636:27;24632:36;24625:4;24616:6;24611:3;24607:16;24603:27;24600:69;24597:82;;;24672:5;;;;;;24099:671;:::o;24597:82::-;24688:57;24739:4;24730:6;24722;24718:19;24714:30;24708:4;24688:57;:::i;:::-;-1:-1:-1;24761:3:21;;24099:671;-1:-1:-1;;;;;24099:671:21:o;25605:786::-;26016:25;26011:3;26004:38;25986:3;26071:6;26065:13;26087:62;26142:6;26137:2;26132:3;26128:12;26121:4;26113:6;26109:17;26087:62;:::i;:::-;26213:19;26208:2;26168:16;;;26200:11;;;26193:40;26258:13;;26280:63;26258:13;26329:2;26321:11;;26314:4;26302:17;;26280:63;:::i;:::-;26363:17;26382:2;26359:26;;25605:786;-1:-1:-1;;;;25605:786:21:o;26396:584::-;26618:4;-1:-1:-1;;;;;26728:2:21;26720:6;26716:15;26705:9;26698:34;26780:2;26772:6;26768:15;26763:2;26752:9;26748:18;26741:43;;26820:6;26815:2;26804:9;26800:18;26793:34;26863:6;26858:2;26847:9;26843:18;26836:34;26907:3;26901;26890:9;26886:19;26879:32;26928:46;26969:3;26958:9;26954:19;26946:6;26928:46;:::i;:::-;26920:54;26396:584;-1:-1:-1;;;;;;;26396:584:21:o;26985:136::-;27024:3;27052:5;27042:39;;27061:18;;:::i;:::-;-1:-1:-1;;;27097:18:21;;26985:136::o"},"gasEstimates":{"creation":{"codeDepositCost":"2925600","executionCost":"3208","totalCost":"2928808"},"external":{"ADMIN_ROLE()":"230","DEFAULT_ADMIN_ROLE()":"296","MINTER_ROLE()":"251","MODERATOR()":"252","__DR_init(address)":"infinite","_tokenID()":"2351","balanceOf(address,uint256)":"2721","balanceOfBatch(address[],uint256[])":"infinite","buyToken(uint256,uint256)":"infinite","getFee(uint256)":"infinite","getLegalContr(uint256)":"infinite","getOwner(uint256)":"infinite","getRate(uint256)":"infinite","getRoleAdmin(bytes32)":"2501","getTotalSupply(uint256)":"infinite","getValuationRpt(uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2721","isApprovedForAll(address,address)":"infinite","mintToken(address,uint256,string,string,uint256,uint256)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","paused()":"2415","platform_address()":"2427","renounceRole(bytes32,address)":"29074","revokeRole(bytes32,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26760","supportsInterface(bytes4)":"infinite","uri(uint256)":"infinite","withdrawToken(address,address,uint256)":"infinite"},"internal":{"__DR_init_unchained(address)":"infinite","incrementTokenId()":"48442"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","MODERATOR()":"34b4e625","__DR_init(address)":"ecb1b769","_tokenID()":"ad0cdd89","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","buyToken(uint256,uint256)":"057466ea","getFee(uint256)":"fcee45f4","getLegalContr(uint256)":"308ff127","getOwner(uint256)":"c41a360a","getRate(uint256)":"57764094","getRoleAdmin(bytes32)":"248a9ca3","getTotalSupply(uint256)":"92ab723e","getValuationRpt(uint256)":"4aa10a80","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","mintToken(address,uint256,string,string,uint256,uint256)":"b521b133","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","paused()":"5c975abb","platform_address()":"34cd58dd","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c","withdrawToken(address,address,uint256)":"01e33667"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"valuationReport\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"legalContract\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"DRTokenID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"__DR_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLegalContr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getValuationRpt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"valueRpt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalContr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DRTokenID(uint256,uint256,uint256,address,string,string,uint256)\":{\"details\":\"Declaration of new Event to record created token details for DRToken\",\"params\":{\"id\":\"- Unique token ID\",\"legalContract\":\"- File Hash of Legal Contract\",\"owner\":\"- Asset Owner wallet address\",\"timestamp\":\"- Time Stamp of Event\",\"totalSupply\":\"- Number of tokens for unique token ID\",\"valuationReport\":\"- File Hash of Valuation Report\"}},\"TokenWithdrawn(uint256,address,address,uint256)\":{\"details\":\"Declaration of new Event to record ERC20 token withdraw\",\"params\":{\"amount\":\"- Total amount of USDT withdrawn\",\"initiator\":\"- Wallet Address that invoked the withdrawal process\",\"recipient\":\"- Wallet address which received the USDT\",\"timestamp\":\"- Time Stamp of Event\"}}},\"kind\":\"dev\",\"methods\":{\"__DR_init(address)\":{\"details\":\"Functions for ERC1155 Token 1. __ERC1155_init - Construct the ERC1155 token with URI 2. incrementTokenId() - Increase `tokenID` by 1 before minting new token\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buyToken(uint256,uint256)\":{\"details\":\"Transfers `tokenAmt` tokens of token type `id` from `platform_address` to `investor` by calling ERC1155 safeTransferFrom function. Emits a {TransferSingle} event via ERC1155 library.  Requirements: - `id` must be equal or less than current Token ID. - `tokenAmt` must be equal or less than balance of Proxy Contract Transfers the payable amount of ETH equivalent to amount of tokens multiplied by the token rate.  Requirements: - Paid ETH amount must be equal or more than `tokenAmt` multiplied by the token rate.\",\"params\":{\"id\":\"- Token ID\",\"tokenAmt\":\"- Number of tokens purchased\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalSupply(uint256)\":{\"details\":\"Series of functions to retrieve token details from `DRToken` struct, including Total Supply, Owner, Valuation Report, Legal Contract and Service Fee.\",\"params\":{\"tokenId\":\"- Unique token id of token\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mintToken(address,uint256,string,string,uint256,uint256)\":{\"details\":\"Creates `totalAmt` tokens of token type `newTokenId`, by calling ERC1155 _mint function. Can only be called by the current admin.  Emits a {DRTokenID} event. Emits {TransferSingle} event via ERC1155 library. Requirements: - `legalContr` must not have been used for another token ID.\",\"params\":{\"assetOwner\":\"- Asset Owner wallet address\",\"fee\":\"- Fees to be paid to platform owner for sale proceedings\",\"legalContr\":\"- File Hash of Legal Contract\",\"rate\":\"- token rate for the sale\",\"totalAmt\":\"- Total number of tokens for unique token ID\",\"valueRpt\":\"- File Hash of Valuation Report\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"withdrawToken(address,address,uint256)\":{\"details\":\"Withdraws any ERC20 from Contract Can only be called by the current admin.  Emits a {TokenWithdrawn} event.\",\"params\":{\"_amount\":\"- Amount of ERC20 token to withdraw\",\"_contract\":\"- token contact address to withdraw\",\"_recipient\":\"- Wallet address to withdraw token to\"}}},\"stateVariables\":{\"MODERATOR\":{\"details\":\"Declaration of variables. 1. `MODERATOR` - Group of addresses possessing moderator authorization for AccessControl contract 2. `ADMIN_ROLE` - Group of addresses possessing admin authorization 3. `MINTER_ROLE` - Group of addresses possessing minting authorization 4. `_legalContracts` - Mapping of Token ID to Legal Contract File Hash 5. `platform_address` - Main address for the platform owner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DwellaReit.sol\":\"DR\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd25b5dd88ee621810335aa7272faeeb2a4c4151b19ce4ac0d7ce75a347bb53b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xab3948ae0bf8a1ccc035b6b4c78c2fa24c133291d4c71b605fdc6c6f6246e92f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x992b28e9cd85d3614bf2f0ad8225164128abdf44fb533db8587e8a64e0d9883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x382f704a068eb9b9e3c73c7acef54b464043aa12ea0abacfd0b8440c6e1e4e4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xa681e276ffa5896274bd7fbb01a1258190d7b72215208606db00d44aa4890811\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/DwellaReit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\ncontract DR is Initializable, AccessControlUpgradeable, PausableUpgradeable, ERC1155Upgradeable, ERC1155HolderUpgradeable {\\n\\n    /**\\n     * @dev Declaration of variables.\\n     * 1. `MODERATOR` - Group of addresses possessing moderator authorization for AccessControl contract\\n     * 2. `ADMIN_ROLE` - Group of addresses possessing admin authorization\\n     * 3. `MINTER_ROLE` - Group of addresses possessing minting authorization\\n     * 4. `_legalContracts` - Mapping of Token ID to Legal Contract File Hash\\n     * 5. `platform_address` - Main address for the platform owner\\n     */\\n    bytes32 public constant MODERATOR = keccak256(\\\"MODERATOR\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    mapping (string => uint256) _legalContracts;\\n    address public platform_address;\\n\\n    /**\\n     * @dev Throws if called by any account without ADMIN_ROLE access.\\n     */\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Access Denied: Caller is not the Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Declaration of `_tokenID` variable as unique Token ID using Counters library\\n     */\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter internal _tokenIds;\\n    uint256 public _tokenID;\\n\\n    /**\\n     * @dev Declaring `DRToken` struct to store token details and\\n     * mapping of Token ID to DRToken Struct\\n     */\\n    struct DRToken {\\n        uint256 totalSupply;\\n        address owner;\\n        string valuationReport;\\n        string legalContract;\\n        uint256 fee;\\n        uint256 rate;\\n    }\\n    mapping (uint256 => DRToken) drToken;\\n\\n     /**\\n     * @dev Declaration of new Event to record created token details for DRToken\\n     *\\n     * @param timestamp - Time Stamp of Event\\n     * @param id - Unique token ID\\n     * @param totalSupply - Number of tokens for unique token ID\\n     * @param owner - Asset Owner wallet address\\n     * @param valuationReport - File Hash of Valuation Report\\n     * @param legalContract - File Hash of Legal Contract\\n     */\\n    event DRTokenID(uint256 timestamp, uint256 indexed id, uint256 indexed totalSupply, address indexed owner, string valuationReport, string legalContract, uint256 rate);\\n\\n     /**\\n     * @dev Declaration of new Event to record ERC20 token withdraw\\n     *\\n     * @param timestamp - Time Stamp of Event\\n     * @param initiator - Wallet Address that invoked the withdrawal process\\n     * @param recipient - Wallet address which received the USDT\\n     * @param amount - Total amount of USDT withdrawn\\n     */\\n    event TokenWithdrawn(uint256 timestamp, address initiator, address recipient, uint256 amount);\\n\\n    /**\\n     * @dev Functions for ERC1155 Token\\n     * 1. __ERC1155_init - Construct the ERC1155 token with URI\\n     * 2. incrementTokenId() - Increase `tokenID` by 1 before minting new token\\n     */\\n    function __DR_init(address _platformAddress) initializer external {\\n        __ERC1155_init(\\\"https://token-cdn-domain/{id}.json\\\");\\n        __DR_init_unchained(_platformAddress);\\n    }\\n\\n    function __DR_init_unchained(address _platformAddress) initializer internal {\\n        platform_address = _platformAddress;\\n        _tokenID = _tokenIds.current();\\n    }\\n\\n    function incrementTokenId() internal {\\n        _tokenIds.increment();\\n        _tokenID = _tokenIds.current();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable, ERC1155Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Series of functions to retrieve token details from `DRToken` struct, including\\n     * Total Supply, Owner, Valuation Report, Legal Contract and Service Fee.\\n     *\\n     * @param tokenId - Unique token id of token\\n     */\\n    function getTotalSupply(uint256 tokenId) external view returns (uint256) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.totalSupply;\\n    }\\n\\n    function getOwner(uint256 tokenId) external view returns (address) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.owner;\\n    }\\n\\n    function getValuationRpt(uint256 tokenId) external view returns (string memory) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.valuationReport;\\n    }\\n\\n    function getLegalContr(uint256 tokenId) external view returns (string memory) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.legalContract;\\n    }\\n\\n    function getFee(uint256 tokenId) public view returns (uint256) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.fee;\\n    }\\n\\n    function getRate(uint256 tokenId) public view returns (uint256) {\\n        DRToken memory token = drToken[tokenId];\\n        return token.rate;\\n    }\\n\\n    /**\\n     * @dev Creates `totalAmt` tokens of token type `newTokenId`, by calling ERC1155 _mint function.\\n     *\\n     * Can only be called by the current admin.\\n     * \\n     * Emits a {DRTokenID} event.\\n     * Emits {TransferSingle} event via ERC1155 library.\\n     *\\n     * Requirements:\\n     * - `legalContr` must not have been used for another token ID.\\n     *\\n     * @param assetOwner - Asset Owner wallet address\\n     * @param totalAmt - Total number of tokens for unique token ID\\n     * @param valueRpt - File Hash of Valuation Report\\n     * @param legalContr - File Hash of Legal Contract\\n     * @param fee - Fees to be paid to platform owner for sale proceedings\\n     * @param rate - token rate for the sale\\n     */\\n    function mintToken(address assetOwner, uint256 totalAmt, string memory valueRpt, string memory legalContr, uint256 fee, uint256 rate) external onlyAdmin whenNotPaused {\\n        require(_legalContracts[legalContr] == 0, \\\"This asset has already been tokenized.\\\");\\n        require(totalAmt <= 50, 'Amounts exceeds limit');\\n\\n        incrementTokenId();\\n        \\n        uint256 newTokenId = _tokenID;\\n\\n        emit DRTokenID(block.timestamp, newTokenId, totalAmt, assetOwner, valueRpt, legalContr, rate);\\n\\n        // Creates and updates DRToken Struct of unique token ID with token details\\n        DRToken storage token = drToken[_tokenID];\\n        token.totalSupply = totalAmt;\\n        token.owner = assetOwner;\\n        token.valuationReport = valueRpt;\\n        token.legalContract = legalContr;\\n        token.fee = fee;\\n        token.rate = rate;\\n\\n        _legalContracts[legalContr] = _tokenID;\\n\\n        _mint(platform_address, newTokenId, totalAmt, \\\"\\\");\\n    }\\n    \\n    /**\\n     * @dev Withdraws any ERC20 from Contract\\n     *\\n     * Can only be called by the current admin.\\n     * \\n     * Emits a {TokenWithdrawn} event.\\n     *\\n     * @param _contract - token contact address to withdraw\\n     * @param _recipient - Wallet address to withdraw token to\\n     * @param _amount - Amount of ERC20 token to withdraw\\n     */\\n    function withdrawToken(address _contract, address _recipient, uint256 _amount) external onlyAdmin {\\n         IERC20 tokenContract = IERC20(_contract);\\n        // transfer the token from address of Catbotica address\\n        uint256 balance = tokenContract.balanceOf(address(this));\\n        require(balance >= _amount, \\\"Amount of token withdrawn exceed balance.\\\");\\n        \\n        emit TokenWithdrawn(block.timestamp, msg.sender, _recipient, _amount);\\n        \\n        tokenContract.transfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenAmt` tokens of token type `id` from `platform_address` to `investor`\\n     * by calling ERC1155 safeTransferFrom function.\\n     *\\n     * Emits a {TransferSingle} event via ERC1155 library.\\n     * \\n     * Requirements:\\n     * - `id` must be equal or less than current Token ID.\\n     * - `tokenAmt` must be equal or less than balance of Proxy Contract\\n     *\\n     * Transfers the payable amount of ETH equivalent to amount of tokens multiplied by the token rate.\\n     * \\n     * Requirements:\\n     * - Paid ETH amount must be equal or more than `tokenAmt` multiplied by the token rate.\\n     *\\n     * @param id - Token ID\\n     * @param tokenAmt - Number of tokens purchased\\n     */\\n    function buyToken(uint256 id, uint256 tokenAmt) external payable whenNotPaused {\\n        require(_tokenID >= id, \\\"Token ID doesn't exist.\\\");\\n        require(balanceOf(address(this), id) >= tokenAmt, \\\"Number of tokens purchased exceed tokens available.\\\");\\n\\n        DRToken memory token = drToken[id];\\n        \\n        uint256 rate = token.rate;\\n\\n        require(msg.value >= tokenAmt*rate, 'Insufficient ETH');\\n        \\n        super.safeTransferFrom(platform_address, msg.sender, id, tokenAmt, \\\"0x0\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x2c76d01b63f42f6612ff121713db17c7a1fcda1874f70901345f241958e914f9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/DwellaReit.sol:DR","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/DwellaReit.sol:DR","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2580,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2873,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/DwellaReit.sol:DR","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":601,"contract":"contracts/DwellaReit.sol:DR","label":"_paused","offset":0,"slot":"151","type":"t_bool"},{"astId":706,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":736,"contract":"contracts/DwellaReit.sol:DR","label":"_balances","offset":0,"slot":"201","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":742,"contract":"contracts/DwellaReit.sol:DR","label":"_operatorApprovals","offset":0,"slot":"202","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":744,"contract":"contracts/DwellaReit.sol:DR","label":"_uri","offset":0,"slot":"203","type":"t_string_storage"},{"astId":1951,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"204","type":"t_array(t_uint256)47_storage"},{"astId":2254,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"251","type":"t_array(t_uint256)50_storage"},{"astId":2200,"contract":"contracts/DwellaReit.sol:DR","label":"__gap","offset":0,"slot":"301","type":"t_array(t_uint256)50_storage"},{"astId":3873,"contract":"contracts/DwellaReit.sol:DR","label":"_legalContracts","offset":0,"slot":"351","type":"t_mapping(t_string_memory_ptr,t_uint256)"},{"astId":3875,"contract":"contracts/DwellaReit.sol:DR","label":"platform_address","offset":0,"slot":"352","type":"t_address"},{"astId":3896,"contract":"contracts/DwellaReit.sol:DR","label":"_tokenIds","offset":0,"slot":"353","type":"t_struct(Counter)2587_storage"},{"astId":3898,"contract":"contracts/DwellaReit.sol:DR","label":"_tokenID","offset":0,"slot":"354","type":"t_uint256"},{"astId":3916,"contract":"contracts/DwellaReit.sol:DR","label":"drToken","offset":0,"slot":"355","type":"t_mapping(t_uint256,t_struct(DRToken)3911_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_string_memory_ptr,t_uint256)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_struct(DRToken)3911_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct DR.DRToken)","numberOfBytes":"32","value":"t_struct(DRToken)3911_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2587_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2586,"contract":"contracts/DwellaReit.sol:DR","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(DRToken)3911_storage":{"encoding":"inplace","label":"struct DR.DRToken","members":[{"astId":3900,"contract":"contracts/DwellaReit.sol:DR","label":"totalSupply","offset":0,"slot":"0","type":"t_uint256"},{"astId":3902,"contract":"contracts/DwellaReit.sol:DR","label":"owner","offset":0,"slot":"1","type":"t_address"},{"astId":3904,"contract":"contracts/DwellaReit.sol:DR","label":"valuationReport","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3906,"contract":"contracts/DwellaReit.sol:DR","label":"legalContract","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3908,"contract":"contracts/DwellaReit.sol:DR","label":"fee","offset":0,"slot":"4","type":"t_uint256"},{"astId":3910,"contract":"contracts/DwellaReit.sol:DR","label":"rate","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/DwellaReit.sol:DR","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/DwellaReit.sol:DR","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}